[
  {
    "title": "Syntax - Q0001",
    "text": "Which of the following is a valid Java identifier",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "myVar2"
      },
      {
        "letter": "B",
        "text": "2ndVar"
      },
      {
        "letter": "C",
        "text": "class"
      },
      {
        "letter": "D",
        "text": "my-var"
      }
    ],
    "correct": "A",
    "explanation": "Identifiers must not start with a digit and cannot contain hyphens or be Java keywords."
  },
  {
    "title": "Syntax - Q0002",
    "text": "What is wrong with the code snippet above",
    "code": "int x = 5\nint y = 6;",
    "options": [
      {
        "letter": "A",
        "text": "Too many semicolons"
      },
      {
        "letter": "B",
        "text": "Missing semicolon after first declaration"
      },
      {
        "letter": "C",
        "text": "Wrong variable names"
      },
      {
        "letter": "D",
        "text": "Using int instead of Integer"
      }
    ],
    "correct": "B",
    "explanation": "Java statements must end with a semicolon; the first line is missing it."
  },
  {
    "title": "Syntax - Q0003",
    "text": "Which keyword is used to create a new object in Java",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "create"
      },
      {
        "letter": "B",
        "text": "instantiate"
      },
      {
        "letter": "C",
        "text": "new"
      },
      {
        "letter": "D",
        "text": "make"
      }
    ],
    "correct": "C",
    "explanation": "The 'new' keyword allocates a new object and calls its constructor."
  },
  {
    "title": "Syntax - Q0004",
    "text": "Which access modifier allows visibility only within the same package",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "default (no modifier)"
      },
      {
        "letter": "B",
        "text": "private"
      },
      {
        "letter": "C",
        "text": "protected"
      },
      {
        "letter": "D",
        "text": "public"
      }
    ],
    "correct": "A",
    "explanation": "When no access modifier is specified, the member has package-private (default) access."
  },
  {
    "title": "Syntax - Q0005",
    "text": "Which method is the entry point of a standard Java application",
    "code": "public class Main {\n    public static void main(String[] args) {\n        System.out.println(\"Hello World\");\n    }\n}",
    "options": [
      {
        "letter": "A",
        "text": "static void main()"
      },
      {
        "letter": "B",
        "text": "public void main()"
      },
      {
        "letter": "C",
        "text": "public static void main(String[] args)"
      },
      {
        "letter": "D",
        "text": "void main(String[])"
      }
    ],
    "correct": "C",
    "explanation": "The JVM looks for the 'public static void main(String[] args)' method as the program entry point."
  },
  {
    "title": "Syntax - Q0010",
    "text": "Which method is the entry point of a standard Java application",
    "code": "public class Main {\n    public static void main(String[] args) {\n        System.out.println(\"Hello World\");\n    }\n}",
    "options": [
      {
        "letter": "A",
        "text": "public static void main(String[] args)"
      },
      {
        "letter": "B",
        "text": "public void main()"
      },
      {
        "letter": "C",
        "text": "static void main()"
      },
      {
        "letter": "D",
        "text": "void main(String[])"
      }
    ],
    "correct": "A",
    "explanation": "The JVM looks for the 'public static void main(String[] args)' method as the program entry point."
  },
  {
    "title": "Syntax - Q0015",
    "text": "Which method is the entry point of a standard Java application",
    "code": "public class Main {\n    public static void main(String[] args) {\n        System.out.println(\"Hello World\");\n    }\n}",
    "options": [
      {
        "letter": "A",
        "text": "static void main()"
      },
      {
        "letter": "B",
        "text": "public static void main(String[] args)"
      },
      {
        "letter": "C",
        "text": "public void main()"
      },
      {
        "letter": "D",
        "text": "void main(String[])"
      }
    ],
    "correct": "B",
    "explanation": "The JVM looks for the 'public static void main(String[] args)' method as the program entry point."
  },
  {
    "title": "Syntax - Q0050",
    "text": "Which method is the entry point of a standard Java application",
    "code": "public class Main {\n    public static void main(String[] args) {\n        System.out.println(\"Hello World\");\n    }\n}",
    "options": [
      {
        "letter": "A",
        "text": "public void main()"
      },
      {
        "letter": "B",
        "text": "static void main()"
      },
      {
        "letter": "C",
        "text": "void main(String[])"
      },
      {
        "letter": "D",
        "text": "public static void main(String[] args)"
      }
    ],
    "correct": "D",
    "explanation": "The JVM looks for the 'public static void main(String[] args)' method as the program entry point."
  },
  {
    "title": "Data Types - Q0144",
    "text": "What is the size of an int in Java (in bits)",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "16 bits"
      },
      {
        "letter": "B",
        "text": "8 bits"
      },
      {
        "letter": "C",
        "text": "32 bits"
      },
      {
        "letter": "D",
        "text": "64 bits"
      }
    ],
    "correct": "C",
    "explanation": "Java's int is a 32-bit signed two's complement integer."
  },
  {
    "title": "Data Types - Q0145",
    "text": "Which type would you use to store single characters",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "byte"
      },
      {
        "letter": "B",
        "text": "String"
      },
      {
        "letter": "C",
        "text": "Character[]"
      },
      {
        "letter": "D",
        "text": "char"
      }
    ],
    "correct": "D",
    "explanation": "The 'char' type stores a single 16-bit Unicode character."
  },
  {
    "title": "Data Types - Q0146",
    "text": "Which of these is a floating-point type",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "double"
      },
      {
        "letter": "B",
        "text": "char"
      },
      {
        "letter": "C",
        "text": "int"
      },
      {
        "letter": "D",
        "text": "boolean"
      }
    ],
    "correct": "A",
    "explanation": "double and float are floating-point types; double is 64-bit."
  },
  {
    "title": "Data Types - Q0147",
    "text": "Which literal denotes a long integer in Java",
    "code": "long n = 1000L;",
    "options": [
      {
        "letter": "A",
        "text": "No suffix required"
      },
      {
        "letter": "B",
        "text": "Suffix with l (lowercase) is forbidden"
      },
      {
        "letter": "C",
        "text": "Use 'long()' function"
      },
      {
        "letter": "D",
        "text": "Suffix with L (e.g., 1000L)"
      }
    ],
    "correct": "D",
    "explanation": "Use L or l to denote long literals; uppercase L avoids confusion with digit '1'."
  },
  {
    "title": "Data Types - Q0148",
    "text": "What is the boolean default value for instance variables",
    "code": "class A { boolean flag; }",
    "options": [
      {
        "letter": "A",
        "text": "false"
      },
      {
        "letter": "B",
        "text": "true"
      },
      {
        "letter": "C",
        "text": "0"
      },
      {
        "letter": "D",
        "text": "null"
      }
    ],
    "correct": "A",
    "explanation": "Instance boolean variables default to false."
  },
  {
    "title": "Data Types - Q0149",
    "text": "Which type can hold decimal numbers with highest precision (useful for currency)",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "double"
      },
      {
        "letter": "B",
        "text": "BigDecimal"
      },
      {
        "letter": "C",
        "text": "long"
      },
      {
        "letter": "D",
        "text": "float"
      }
    ],
    "correct": "B",
    "explanation": "BigDecimal provides arbitrary-precision decimal numbers, preferred for currency."
  },
  {
    "title": "Data Types - Q0150",
    "text": "What is the size of an int in Java (in bits)",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "16 bits"
      },
      {
        "letter": "B",
        "text": "32 bits"
      },
      {
        "letter": "C",
        "text": "8 bits"
      },
      {
        "letter": "D",
        "text": "64 bits"
      }
    ],
    "correct": "B",
    "explanation": "Java's int is a 32-bit signed two's complement integer."
  },
  {
    "title": "Data Types - Q0151",
    "text": "Which type would you use to store single characters",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Character[]"
      },
      {
        "letter": "B",
        "text": "char"
      },
      {
        "letter": "C",
        "text": "byte"
      },
      {
        "letter": "D",
        "text": "String"
      }
    ],
    "correct": "B",
    "explanation": "The 'char' type stores a single 16-bit Unicode character."
  },
  {
    "title": "Data Types - Q0152",
    "text": "Which of these is a floating-point type",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "boolean"
      },
      {
        "letter": "B",
        "text": "double"
      },
      {
        "letter": "C",
        "text": "int"
      },
      {
        "letter": "D",
        "text": "char"
      }
    ],
    "correct": "B",
    "explanation": "double and float are floating-point types; double is 64-bit."
  },
  {
    "title": "Data Types - Q0154",
    "text": "What is the boolean default value for instance variables",
    "code": "class A { boolean flag; }",
    "options": [
      {
        "letter": "A",
        "text": "0"
      },
      {
        "letter": "B",
        "text": "true"
      },
      {
        "letter": "C",
        "text": "false"
      },
      {
        "letter": "D",
        "text": "null"
      }
    ],
    "correct": "C",
    "explanation": "Instance boolean variables default to false."
  },
  {
    "title": "Data Types - Q0155",
    "text": "Which type can hold decimal numbers with highest precision (useful for currency)",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "BigDecimal"
      },
      {
        "letter": "B",
        "text": "long"
      },
      {
        "letter": "C",
        "text": "double"
      },
      {
        "letter": "D",
        "text": "float"
      }
    ],
    "correct": "A",
    "explanation": "BigDecimal provides arbitrary-precision decimal numbers, preferred for currency."
  },
  {
    "title": "Data Types - Q0156",
    "text": "What is the size of an int in Java (in bits)",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "8 bits"
      },
      {
        "letter": "B",
        "text": "16 bits"
      },
      {
        "letter": "C",
        "text": "64 bits"
      },
      {
        "letter": "D",
        "text": "32 bits"
      }
    ],
    "correct": "D",
    "explanation": "Java's int is a 32-bit signed two's complement integer."
  },
  {
    "title": "Data Types",
    "text": "Which of these is a floating-point type",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "int"
      },
      {
        "letter": "B",
        "text": "char"
      },
      {
        "letter": "C",
        "text": "double"
      },
      {
        "letter": "D",
        "text": "boolean"
      }
    ],
    "correct": "C",
    "explanation": "double and float are floating-point types; double is 64-bit."
  },
  {
    "title": "Data Types",
    "text": "What is the boolean default value for instance variables",
    "code": "class A { boolean flag; }",
    "options": [
      {
        "letter": "A",
        "text": "null"
      },
      {
        "letter": "B",
        "text": "true"
      },
      {
        "letter": "C",
        "text": "0"
      },
      {
        "letter": "D",
        "text": "false"
      }
    ],
    "correct": "D",
    "explanation": "Instance boolean variables default to false."
  },
  {
    "title": "Data Types",
    "text": "What is the size of an int in Java (in bits)",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "32 bits"
      },
      {
        "letter": "B",
        "text": "16 bits"
      },
      {
        "letter": "C",
        "text": "64 bits"
      },
      {
        "letter": "D",
        "text": "8 bits"
      }
    ],
    "correct": "A",
    "explanation": "Java's int is a 32-bit signed two's complement integer."
  },
  {
    "title": "Data Types",
    "text": "Which type would you use to store single characters",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "char"
      },
      {
        "letter": "B",
        "text": "String"
      },
      {
        "letter": "C",
        "text": "Character[]"
      },
      {
        "letter": "D",
        "text": "byte"
      }
    ],
    "correct": "A",
    "explanation": "The 'char' type stores a single 16-bit Unicode character."
  },
  {
    "title": "Data Types",
    "text": "Which literal denotes a long integer in Java",
    "code": "long n = 1000L;",
    "options": [
      {
        "letter": "A",
        "text": "Use 'long()' function"
      },
      {
        "letter": "B",
        "text": "Suffix with l (lowercase) is forbidden"
      },
      {
        "letter": "C",
        "text": "Suffix with L (e.g., 1000L)"
      },
      {
        "letter": "D",
        "text": "No suffix required"
      }
    ],
    "correct": "C",
    "explanation": "Use L or l to denote long literals; uppercase L avoids confusion with digit '1'."
  },
  {
    "title": "Data Types",
    "text": "Which type can hold decimal numbers with highest precision (useful for currency)",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "double"
      },
      {
        "letter": "B",
        "text": "long"
      },
      {
        "letter": "C",
        "text": "BigDecimal"
      },
      {
        "letter": "D",
        "text": "float"
      }
    ],
    "correct": "C",
    "explanation": "BigDecimal provides arbitrary-precision decimal numbers, preferred for currency."
  },
  {
    "title": "Data Types",
    "text": "Which of these is a floating-point type",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "char"
      },
      {
        "letter": "B",
        "text": "int"
      },
      {
        "letter": "C",
        "text": "boolean"
      },
      {
        "letter": "D",
        "text": "double"
      }
    ],
    "correct": "D",
    "explanation": "double and float are floating-point types; double is 64-bit."
  },
  {
    "title": "Data Types",
    "text": "Which type can hold decimal numbers with highest precision (useful for currency)",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "double"
      },
      {
        "letter": "B",
        "text": "float"
      },
      {
        "letter": "C",
        "text": "long"
      },
      {
        "letter": "D",
        "text": "BigDecimal"
      }
    ],
    "correct": "D",
    "explanation": "BigDecimal provides arbitrary-precision decimal numbers, preferred for currency."
  },
  {
    "title": "Data Types",
    "text": "Which type would you use to store single characters",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Character[]"
      },
      {
        "letter": "B",
        "text": "byte"
      },
      {
        "letter": "C",
        "text": "char"
      },
      {
        "letter": "D",
        "text": "String"
      }
    ],
    "correct": "C",
    "explanation": "The 'char' type stores a single 16-bit Unicode character."
  },
  {
    "title": "Data Types",
    "text": "Which literal denotes a long integer in Java",
    "code": "long n = 1000L;",
    "options": [
      {
        "letter": "A",
        "text": "Suffix with L (e.g., 1000L)"
      },
      {
        "letter": "B",
        "text": "Suffix with l (lowercase) is forbidden"
      },
      {
        "letter": "C",
        "text": "Use 'long()' function"
      },
      {
        "letter": "D",
        "text": "No suffix required"
      }
    ],
    "correct": "A",
    "explanation": "Use L or l to denote long literals; uppercase L avoids confusion with digit '1'."
  },
  {
    "title": "Data Types",
    "text": "What is the boolean default value for instance variables",
    "code": "class A { boolean flag; }",
    "options": [
      {
        "letter": "A",
        "text": "true"
      },
      {
        "letter": "B",
        "text": "false"
      },
      {
        "letter": "C",
        "text": "0"
      },
      {
        "letter": "D",
        "text": "null"
      }
    ],
    "correct": "B",
    "explanation": "Instance boolean variables default to false."
  },
  {
    "title": "Data Types",
    "text": "Which literal denotes a long integer in Java",
    "code": "long n = 1000L;",
    "options": [
      {
        "letter": "A",
        "text": "Suffix with l (lowercase) is forbidden"
      },
      {
        "letter": "B",
        "text": "Suffix with L (e.g., 1000L)"
      },
      {
        "letter": "C",
        "text": "Use 'long()' function"
      },
      {
        "letter": "D",
        "text": "No suffix required"
      }
    ],
    "correct": "B",
    "explanation": "Use L or l to denote long literals; uppercase L avoids confusion with digit '1'."
  },
  {
    "title": "Variables",
    "text": "Which of these describes shadowing in Java",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Overloading a variable"
      },
      {
        "letter": "B",
        "text": "Renaming a variable"
      },
      {
        "letter": "C",
        "text": "A local variable with same name as a class variable hides the class variable in that scope"
      },
      {
        "letter": "D",
        "text": "Deleting a variable"
      }
    ],
    "correct": "C",
    "explanation": "Shadowing occurs when a local variable masks a field with the same name."
  },
  {
    "title": "Variables",
    "text": "What is the scope of a local variable declared inside a method",
    "code": "void foo() { int x = 0; }",
    "options": [
      {
        "letter": "A",
        "text": "Accessible to subclasses"
      },
      {
        "letter": "B",
        "text": "Class-wide"
      },
      {
        "letter": "C",
        "text": "Global"
      },
      {
        "letter": "D",
        "text": "Only within that method/block"
      }
    ],
    "correct": "D",
    "explanation": "Local variables are accessible only within the block or method they are declared in."
  },
  {
    "title": "Variables",
    "text": "Which of the following is a valid way to initialize a variable",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "a = 10;"
      },
      {
        "letter": "B",
        "text": "int = 10;"
      },
      {
        "letter": "C",
        "text": "int a = 10;"
      },
      {
        "letter": "D",
        "text": "int a;"
      }
    ],
    "correct": "C",
    "explanation": "Declaration with type and initialization is 'int a = 10;'."
  },
  {
    "title": "Variables",
    "text": "What will be printed for a static variable if not initialized explicitly",
    "code": "static int count; public static void main(String[] args){ System.out.println(count); }",
    "options": [
      {
        "letter": "A",
        "text": "null"
      },
      {
        "letter": "B",
        "text": "0"
      },
      {
        "letter": "C",
        "text": "Compilation error"
      },
      {
        "letter": "D",
        "text": "undefined"
      }
    ],
    "correct": "B",
    "explanation": "Static (class) int variables default to 0."
  },
  {
    "title": "Variables",
    "text": "Which keyword makes a variable constant (cannot be reassigned)",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "immutable"
      },
      {
        "letter": "B",
        "text": "static"
      },
      {
        "letter": "C",
        "text": "final"
      },
      {
        "letter": "D",
        "text": "const"
      }
    ],
    "correct": "C",
    "explanation": "final prevents reassignment of the variable after initialization."
  },
  {
    "title": "Variables",
    "text": "Which variable lives as long as the program runs and belongs to the class",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "instance variable"
      },
      {
        "letter": "B",
        "text": "local variable"
      },
      {
        "letter": "C",
        "text": "static variable"
      },
      {
        "letter": "D",
        "text": "parameter"
      }
    ],
    "correct": "C",
    "explanation": "Static variables are class-level and persist for the application's lifetime (class unloading aside)."
  },
  {
    "title": "Variables",
    "text": "Which of these describes shadowing in Java",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Deleting a variable"
      },
      {
        "letter": "B",
        "text": "A local variable with same name as a class variable hides the class variable in that scope"
      },
      {
        "letter": "C",
        "text": "Overloading a variable"
      },
      {
        "letter": "D",
        "text": "Renaming a variable"
      }
    ],
    "correct": "B",
    "explanation": "Shadowing occurs when a local variable masks a field with the same name."
  },
  {
    "title": "Variables",
    "text": "What is the scope of a local variable declared inside a method",
    "code": "void foo() { int x = 0; }",
    "options": [
      {
        "letter": "A",
        "text": "Class-wide"
      },
      {
        "letter": "B",
        "text": "Accessible to subclasses"
      },
      {
        "letter": "C",
        "text": "Only within that method/block"
      },
      {
        "letter": "D",
        "text": "Global"
      }
    ],
    "correct": "C",
    "explanation": "Local variables are accessible only within the block or method they are declared in."
  },
  {
    "title": "Variables",
    "text": "Which of the following is a valid way to initialize a variable",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "int = 10;"
      },
      {
        "letter": "B",
        "text": "a = 10;"
      },
      {
        "letter": "C",
        "text": "int a;"
      },
      {
        "letter": "D",
        "text": "int a = 10;"
      }
    ],
    "correct": "D",
    "explanation": "Declaration with type and initialization is 'int a = 10;'."
  },
  {
    "title": "Variables",
    "text": "What will be printed for a static variable if not initialized explicitly",
    "code": "static int count; public static void main(String[] args){ System.out.println(count); }",
    "options": [
      {
        "letter": "A",
        "text": "Compilation error"
      },
      {
        "letter": "B",
        "text": "undefined"
      },
      {
        "letter": "C",
        "text": "0"
      },
      {
        "letter": "D",
        "text": "null"
      }
    ],
    "correct": "C",
    "explanation": "Static (class) int variables default to 0."
  },
  {
    "title": "Variables",
    "text": "Which keyword makes a variable constant (cannot be reassigned)",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "final"
      },
      {
        "letter": "B",
        "text": "immutable"
      },
      {
        "letter": "C",
        "text": "const"
      },
      {
        "letter": "D",
        "text": "static"
      }
    ],
    "correct": "A",
    "explanation": "final prevents reassignment of the variable after initialization."
  },
  {
    "title": "Variables",
    "text": "Which variable lives as long as the program runs and belongs to the class",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "local variable"
      },
      {
        "letter": "B",
        "text": "parameter"
      },
      {
        "letter": "C",
        "text": "instance variable"
      },
      {
        "letter": "D",
        "text": "static variable"
      }
    ],
    "correct": "D",
    "explanation": "Static variables are class-level and persist for the application's lifetime (class unloading aside)."
  },
  {
    "title": "Variables",
    "text": "What is the scope of a local variable declared inside a method",
    "code": "void foo() { int x = 0; }",
    "options": [
      {
        "letter": "A",
        "text": "Accessible to subclasses"
      },
      {
        "letter": "B",
        "text": "Only within that method/block"
      },
      {
        "letter": "C",
        "text": "Global"
      },
      {
        "letter": "D",
        "text": "Class-wide"
      }
    ],
    "correct": "B",
    "explanation": "Local variables are accessible only within the block or method they are declared in."
  },
  {
    "title": "Variables",
    "text": "Which of the following is a valid way to initialize a variable",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "int a = 10;"
      },
      {
        "letter": "B",
        "text": "int a;"
      },
      {
        "letter": "C",
        "text": "int = 10;"
      },
      {
        "letter": "D",
        "text": "a = 10;"
      }
    ],
    "correct": "A",
    "explanation": "Declaration with type and initialization is 'int a = 10;'."
  },
  {
    "title": "Variables",
    "text": "Which variable lives as long as the program runs and belongs to the class",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "instance variable"
      },
      {
        "letter": "B",
        "text": "static variable"
      },
      {
        "letter": "C",
        "text": "parameter"
      },
      {
        "letter": "D",
        "text": "local variable"
      }
    ],
    "correct": "B",
    "explanation": "Static variables are class-level and persist for the application's lifetime (class unloading aside)."
  },
  {
    "title": "Variables",
    "text": "What is the scope of a local variable declared inside a method",
    "code": "void foo() { int x = 0; }",
    "options": [
      {
        "letter": "A",
        "text": "Only within that method/block"
      },
      {
        "letter": "B",
        "text": "Accessible to subclasses"
      },
      {
        "letter": "C",
        "text": "Class-wide"
      },
      {
        "letter": "D",
        "text": "Global"
      }
    ],
    "correct": "A",
    "explanation": "Local variables are accessible only within the block or method they are declared in."
  },
  {
    "title": "Variables",
    "text": "Which keyword makes a variable constant (cannot be reassigned)",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "static"
      },
      {
        "letter": "B",
        "text": "final"
      },
      {
        "letter": "C",
        "text": "immutable"
      },
      {
        "letter": "D",
        "text": "const"
      }
    ],
    "correct": "B",
    "explanation": "final prevents reassignment of the variable after initialization."
  },
  {
    "title": "Variables",
    "text": "Which of these describes shadowing in Java",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Renaming a variable"
      },
      {
        "letter": "B",
        "text": "Overloading a variable"
      },
      {
        "letter": "C",
        "text": "Deleting a variable"
      },
      {
        "letter": "D",
        "text": "A local variable with same name as a class variable hides the class variable in that scope"
      }
    ],
    "correct": "D",
    "explanation": "Shadowing occurs when a local variable masks a field with the same name."
  },
  {
    "title": "Variables",
    "text": "What will be printed for a static variable if not initialized explicitly",
    "code": "static int count; public static void main(String[] args){ System.out.println(count); }",
    "options": [
      {
        "letter": "A",
        "text": "0"
      },
      {
        "letter": "B",
        "text": "undefined"
      },
      {
        "letter": "C",
        "text": "null"
      },
      {
        "letter": "D",
        "text": "Compilation error"
      }
    ],
    "correct": "A",
    "explanation": "Static (class) int variables default to 0."
  },
  {
    "title": "Variables",
    "text": "Which variable lives as long as the program runs and belongs to the class",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "static variable"
      },
      {
        "letter": "B",
        "text": "instance variable"
      },
      {
        "letter": "C",
        "text": "parameter"
      },
      {
        "letter": "D",
        "text": "local variable"
      }
    ],
    "correct": "A",
    "explanation": "Static variables are class-level and persist for the application's lifetime (class unloading aside)."
  },
  {
    "title": "Variables",
    "text": "Which keyword makes a variable constant (cannot be reassigned)",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "static"
      },
      {
        "letter": "B",
        "text": "const"
      },
      {
        "letter": "C",
        "text": "immutable"
      },
      {
        "letter": "D",
        "text": "final"
      }
    ],
    "correct": "D",
    "explanation": "final prevents reassignment of the variable after initialization."
  },
  {
    "title": "Variables",
    "text": "Which of these describes shadowing in Java",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "A local variable with same name as a class variable hides the class variable in that scope"
      },
      {
        "letter": "B",
        "text": "Overloading a variable"
      },
      {
        "letter": "C",
        "text": "Renaming a variable"
      },
      {
        "letter": "D",
        "text": "Deleting a variable"
      }
    ],
    "correct": "A",
    "explanation": "Shadowing occurs when a local variable masks a field with the same name."
  },
  {
    "title": "Variables",
    "text": "Which of the following is a valid way to initialize a variable",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "a = 10;"
      },
      {
        "letter": "B",
        "text": "int a = 10;"
      },
      {
        "letter": "C",
        "text": "int a;"
      },
      {
        "letter": "D",
        "text": "int = 10;"
      }
    ],
    "correct": "B",
    "explanation": "Declaration with type and initialization is 'int a = 10;'."
  },
  {
    "title": "Variables",
    "text": "What will be printed for a static variable if not initialized explicitly",
    "code": "static int count; public static void main(String[] args){ System.out.println(count); }",
    "options": [
      {
        "letter": "A",
        "text": "null"
      },
      {
        "letter": "B",
        "text": "Compilation error"
      },
      {
        "letter": "C",
        "text": "undefined"
      },
      {
        "letter": "D",
        "text": "0"
      }
    ],
    "correct": "D",
    "explanation": "Static (class) int variables default to 0."
  },
  {
    "title": "Operators",
    "text": "Which operator is used to assign a value",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "=="
      },
      {
        "letter": "B",
        "text": ":="
      },
      {
        "letter": "C",
        "text": "=>"
      },
      {
        "letter": "D",
        "text": "="
      }
    ],
    "correct": "D",
    "explanation": "'=' is the assignment operator in Java."
  },
  {
    "title": "Operators",
    "text": "What is the result of (5 & 3) where & is bitwise AND",
    "code": "int r = 5 & 3; // binary 0101 & 0011",
    "options": [
      {
        "letter": "A",
        "text": "1"
      },
      {
        "letter": "B",
        "text": "3"
      },
      {
        "letter": "C",
        "text": "5"
      },
      {
        "letter": "D",
        "text": "7"
      }
    ],
    "correct": "A",
    "explanation": "0101 & 0011 = 0001 which is 1."
  },
  {
    "title": "Operators",
    "text": "What is the result of 7 / 2 in Java when using int operands",
    "code": "int a = 7/2;",
    "options": [
      {
        "letter": "A",
        "text": "3"
      },
      {
        "letter": "B",
        "text": "3.5"
      },
      {
        "letter": "C",
        "text": "Compilation error"
      },
      {
        "letter": "D",
        "text": "4"
      }
    ],
    "correct": "A",
    "explanation": "Integer division truncates the decimal part; 7/2 = 3."
  },
  {
    "title": "Operators",
    "text": "Which operator is used for equality comparison between primitives",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "==="
      },
      {
        "letter": "B",
        "text": "equals"
      },
      {
        "letter": "C",
        "text": "=="
      },
      {
        "letter": "D",
        "text": "="
      }
    ],
    "correct": "C",
    "explanation": "Use '==' to compare primitive values; .equals() is for object equality."
  },
  {
    "title": "Operators",
    "text": "What does '&&' operator do",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Bitwise AND"
      },
      {
        "letter": "B",
        "text": "Logical AND (short-circuit)"
      },
      {
        "letter": "C",
        "text": "Assignment"
      },
      {
        "letter": "D",
        "text": "Logical OR"
      }
    ],
    "correct": "B",
    "explanation": "'&&' performs logical AND and short-circuits if the left operand is false."
  },
  {
    "title": "Operators",
    "text": "What is the value of x after int x = 5; x++; ",
    "code": "int x = 5; x++;",
    "options": [
      {
        "letter": "A",
        "text": "5"
      },
      {
        "letter": "B",
        "text": "Compilation error"
      },
      {
        "letter": "C",
        "text": "7"
      },
      {
        "letter": "D",
        "text": "6"
      }
    ],
    "correct": "D",
    "explanation": "Post-increment increases the variable by 1, so x becomes 6."
  },
  {
    "title": "Operators",
    "text": "Which operator concatenates strings",
    "code": "String s = \"Hi\" + \"There\";",
    "options": [
      {
        "letter": "A",
        "text": "&"
      },
      {
        "letter": "B",
        "text": ","
      },
      {
        "letter": "C",
        "text": "+"
      },
      {
        "letter": "D",
        "text": "."
      }
    ],
    "correct": "C",
    "explanation": "The '+' operator concatenates strings in Java."
  },
  {
    "title": "Operators - Q0437",
    "text": "What does the ternary operator return: (5>3) ? 10 : 20 ",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "10"
      },
      {
        "letter": "B",
        "text": "true"
      },
      {
        "letter": "C",
        "text": "false"
      },
      {
        "letter": "D",
        "text": "20"
      }
    ],
    "correct": "A",
    "explanation": "Condition true, so ternary returns the first expression (10)."
  },
  {
    "title": "Operators - Q0439",
    "text": "What is the result of (5 & 3) where & is bitwise AND",
    "code": "int r = 5 & 3; // binary 0101 & 0011",
    "options": [
      {
        "letter": "A",
        "text": "7"
      },
      {
        "letter": "B",
        "text": "1"
      },
      {
        "letter": "C",
        "text": "3"
      },
      {
        "letter": "D",
        "text": "5"
      }
    ],
    "correct": "B",
    "explanation": "0101 & 0011 = 0001 which is 1."
  },
  {
    "title": "Operators - Q0440",
    "text": "What is the result of 7 / 2 in Java when using int operands",
    "code": "int a = 7/2;",
    "options": [
      {
        "letter": "A",
        "text": "4"
      },
      {
        "letter": "B",
        "text": "Compilation error"
      },
      {
        "letter": "C",
        "text": "3"
      },
      {
        "letter": "D",
        "text": "3.5"
      }
    ],
    "correct": "C",
    "explanation": "Integer division truncates the decimal part; 7/2 = 3."
  },
  {
    "title": "Operators - Q0442",
    "text": "What does '&&' operator do",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Bitwise AND"
      },
      {
        "letter": "B",
        "text": "Logical OR"
      },
      {
        "letter": "C",
        "text": "Assignment"
      },
      {
        "letter": "D",
        "text": "Logical AND (short-circuit)"
      }
    ],
    "correct": "D",
    "explanation": "'&&' performs logical AND and short-circuits if the left operand is false."
  },
  {
    "title": "Operators - Q0443",
    "text": "What is the value of x after int x = 5; x++; ",
    "code": "int x = 5; x++;",
    "options": [
      {
        "letter": "A",
        "text": "6"
      },
      {
        "letter": "B",
        "text": "7"
      },
      {
        "letter": "C",
        "text": "5"
      },
      {
        "letter": "D",
        "text": "Compilation error"
      }
    ],
    "correct": "A",
    "explanation": "Post-increment increases the variable by 1, so x becomes 6."
  },
  {
    "title": "Operators - Q0445",
    "text": "What does the ternary operator return: (5>3) ? 10 : 20 ",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "true"
      },
      {
        "letter": "B",
        "text": "false"
      },
      {
        "letter": "C",
        "text": "20"
      },
      {
        "letter": "D",
        "text": "10"
      }
    ],
    "correct": "D",
    "explanation": "Condition true, so ternary returns the first expression (10)."
  },
  {
    "title": "Operators",
    "text": "Which operator is used to assign a value",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "="
      },
      {
        "letter": "B",
        "text": ":="
      },
      {
        "letter": "C",
        "text": "=>"
      },
      {
        "letter": "D",
        "text": "=="
      }
    ],
    "correct": "A",
    "explanation": "'=' is the assignment operator in Java."
  },
  {
    "title": "Operators - Q0449",
    "text": "Which operator is used for equality comparison between primitives",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "="
      },
      {
        "letter": "B",
        "text": "=="
      },
      {
        "letter": "C",
        "text": "equals"
      },
      {
        "letter": "D",
        "text": "==="
      }
    ],
    "correct": "B",
    "explanation": "Use '==' to compare primitive values; .equals() is for object equality."
  },
  {
    "title": "Operators - Q0450",
    "text": "What does '&&' operator do",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Logical AND (short-circuit)"
      },
      {
        "letter": "B",
        "text": "Bitwise AND"
      },
      {
        "letter": "C",
        "text": "Assignment"
      },
      {
        "letter": "D",
        "text": "Logical OR"
      }
    ],
    "correct": "A",
    "explanation": "'&&' performs logical AND and short-circuits if the left operand is false."
  },
  {
    "title": "Operators - Q0453",
    "text": "What does the ternary operator return: (5>3) ? 10 : 20 ",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "20"
      },
      {
        "letter": "B",
        "text": "10"
      },
      {
        "letter": "C",
        "text": "true"
      },
      {
        "letter": "D",
        "text": "false"
      }
    ],
    "correct": "B",
    "explanation": "Condition true, so ternary returns the first expression (10)."
  },
  {
    "title": "Operators - Q0454",
    "text": "Which operator is used to assign a value",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "=>"
      },
      {
        "letter": "B",
        "text": "="
      },
      {
        "letter": "C",
        "text": ":="
      },
      {
        "letter": "D",
        "text": "=="
      }
    ],
    "correct": "B",
    "explanation": "'=' is the assignment operator in Java."
  },
  {
    "title": "Operators - Q0455",
    "text": "What is the result of (5 & 3) where & is bitwise AND",
    "code": "int r = 5 & 3; // binary 0101 & 0011",
    "options": [
      {
        "letter": "A",
        "text": "5"
      },
      {
        "letter": "B",
        "text": "3"
      },
      {
        "letter": "C",
        "text": "1"
      },
      {
        "letter": "D",
        "text": "7"
      }
    ],
    "correct": "C",
    "explanation": "0101 & 0011 = 0001 which is 1."
  },
  {
    "title": "Operators - Q0459",
    "text": "What is the value of x after int x = 5; x++; ",
    "code": "int x = 5; x++;",
    "options": [
      {
        "letter": "A",
        "text": "5"
      },
      {
        "letter": "B",
        "text": "7"
      },
      {
        "letter": "C",
        "text": "6"
      },
      {
        "letter": "D",
        "text": "Compilation error"
      }
    ],
    "correct": "C",
    "explanation": "Post-increment increases the variable by 1, so x becomes 6."
  },
  {
    "title": "Operators - Q0469",
    "text": "What does the ternary operator return: (5>3) ? 10 : 20 ",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "true"
      },
      {
        "letter": "B",
        "text": "20"
      },
      {
        "letter": "C",
        "text": "10"
      },
      {
        "letter": "D",
        "text": "false"
      }
    ],
    "correct": "C",
    "explanation": "Condition true, so ternary returns the first expression (10)."
  },
  {
    "title": "Operators - Q0472",
    "text": "What is the result of 7 / 2 in Java when using int operands",
    "code": "int a = 7/2;",
    "options": [
      {
        "letter": "A",
        "text": "3.5"
      },
      {
        "letter": "B",
        "text": "3"
      },
      {
        "letter": "C",
        "text": "Compilation error"
      },
      {
        "letter": "D",
        "text": "4"
      }
    ],
    "correct": "B",
    "explanation": "Integer division truncates the decimal part; 7/2 = 3."
  },
  {
    "title": "Operators - Q0473",
    "text": "Which operator is used for equality comparison between primitives",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "==="
      },
      {
        "letter": "B",
        "text": "equals"
      },
      {
        "letter": "C",
        "text": "="
      },
      {
        "letter": "D",
        "text": "=="
      }
    ],
    "correct": "D",
    "explanation": "Use '==' to compare primitive values; .equals() is for object equality."
  },
  {
    "title": "Operators - Q0476",
    "text": "Which operator concatenates strings",
    "code": "String s = \"Hi\" + \"There\";",
    "options": [
      {
        "letter": "A",
        "text": ","
      },
      {
        "letter": "B",
        "text": "&"
      },
      {
        "letter": "C",
        "text": "."
      },
      {
        "letter": "D",
        "text": "+"
      }
    ],
    "correct": "D",
    "explanation": "The '+' operator concatenates strings in Java."
  },
  {
    "title": "Operators - Q0479",
    "text": "What is the result of (5 & 3) where & is bitwise AND",
    "code": "int r = 5 & 3; // binary 0101 & 0011",
    "options": [
      {
        "letter": "A",
        "text": "5"
      },
      {
        "letter": "B",
        "text": "3"
      },
      {
        "letter": "C",
        "text": "7"
      },
      {
        "letter": "D",
        "text": "1"
      }
    ],
    "correct": "D",
    "explanation": "0101 & 0011 = 0001 which is 1."
  },
  {
    "title": "Operators - Q0492",
    "text": "Which operator concatenates strings",
    "code": "String s = \"Hi\" + \"There\";",
    "options": [
      {
        "letter": "A",
        "text": "&"
      },
      {
        "letter": "B",
        "text": "+"
      },
      {
        "letter": "C",
        "text": ","
      },
      {
        "letter": "D",
        "text": "."
      }
    ],
    "correct": "B",
    "explanation": "The '+' operator concatenates strings in Java."
  },
  {
    "title": "Operators - Q0505",
    "text": "Which operator is used for equality comparison between primitives",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "=="
      },
      {
        "letter": "B",
        "text": "==="
      },
      {
        "letter": "C",
        "text": "equals"
      },
      {
        "letter": "D",
        "text": "="
      }
    ],
    "correct": "A",
    "explanation": "Use '==' to compare primitive values; .equals() is for object equality."
  },
  {
    "title": "Operators - Q0508",
    "text": "Which operator concatenates strings",
    "code": "String s = \"Hi\" + \"There\";",
    "options": [
      {
        "letter": "A",
        "text": "+"
      },
      {
        "letter": "B",
        "text": "&"
      },
      {
        "letter": "C",
        "text": ","
      },
      {
        "letter": "D",
        "text": "."
      }
    ],
    "correct": "A",
    "explanation": "The '+' operator concatenates strings in Java."
  },
  {
    "title": "Operators - Q0520",
    "text": "What is the result of 7 / 2 in Java when using int operands",
    "code": "int a = 7/2;",
    "options": [
      {
        "letter": "A",
        "text": "3.5"
      },
      {
        "letter": "B",
        "text": "4"
      },
      {
        "letter": "C",
        "text": "Compilation error"
      },
      {
        "letter": "D",
        "text": "3"
      }
    ],
    "correct": "D",
    "explanation": "Integer division truncates the decimal part; 7/2 = 3."
  },
  {
    "title": "Operators - Q0534",
    "text": "Which operator is used to assign a value",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "=>"
      },
      {
        "letter": "B",
        "text": ":="
      },
      {
        "letter": "C",
        "text": "="
      },
      {
        "letter": "D",
        "text": "=="
      }
    ],
    "correct": "C",
    "explanation": "'=' is the assignment operator in Java."
  },
  {
    "title": "Operators - Q0538",
    "text": "What does '&&' operator do",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Logical OR"
      },
      {
        "letter": "B",
        "text": "Bitwise AND"
      },
      {
        "letter": "C",
        "text": "Logical AND (short-circuit)"
      },
      {
        "letter": "D",
        "text": "Assignment"
      }
    ],
    "correct": "C",
    "explanation": "'&&' performs logical AND and short-circuits if the left operand is false."
  },
  {
    "title": "Operators - Q0555",
    "text": "What is the value of x after int x = 5; x++; ",
    "code": "int x = 5; x++;",
    "options": [
      {
        "letter": "A",
        "text": "5"
      },
      {
        "letter": "B",
        "text": "6"
      },
      {
        "letter": "C",
        "text": "7"
      },
      {
        "letter": "D",
        "text": "Compilation error"
      }
    ],
    "correct": "B",
    "explanation": "Post-increment increases the variable by 1, so x becomes 6."
  },
  {
    "title": "Control Flow - Q0573",
    "text": "How many times will the while loop execute",
    "code": "int i=0; while(i<1) { System.out.print(i); i++; }",
    "options": [
      {
        "letter": "A",
        "text": "1"
      },
      {
        "letter": "B",
        "text": "2"
      },
      {
        "letter": "C",
        "text": "Infinite"
      },
      {
        "letter": "D",
        "text": "0"
      }
    ],
    "correct": "A",
    "explanation": "Condition true once; loop runs one time."
  },
  {
    "title": "Control Flow - Q0574",
    "text": "What does a do-while loop guarantee",
    "code": "int i=5; do { System.out.print(i); i++; } while(i<5);",
    "options": [
      {
        "letter": "A",
        "text": "Body executes at least once"
      },
      {
        "letter": "B",
        "text": "Executes twice"
      },
      {
        "letter": "C",
        "text": "It may not execute at all"
      },
      {
        "letter": "D",
        "text": "Always infinite"
      }
    ],
    "correct": "A",
    "explanation": "do-while checks condition after executing the body, ensuring at least one run."
  },
  {
    "title": "Control Flow - Q0575",
    "text": "What is printed before break",
    "code": "for(int i=0;i<5;i++){ if(i==2) break; System.out.print(i);}",
    "options": [
      {
        "letter": "A",
        "text": "Nothing"
      },
      {
        "letter": "B",
        "text": "0 1"
      },
      {
        "letter": "C",
        "text": "0 1 2 3"
      },
      {
        "letter": "D",
        "text": "0 1 2"
      }
    ],
    "correct": "B",
    "explanation": "Loop prints 0 and 1, then breaks when i==2 before printing 2."
  },
  {
    "title": "Control Flow - Q0576",
    "text": "What is the output using continue",
    "code": "for(int i=0;i<3;i++){ if(i==1) continue; System.out.print(i);}",
    "options": [
      {
        "letter": "A",
        "text": "0 1"
      },
      {
        "letter": "B",
        "text": "0 1 2"
      },
      {
        "letter": "C",
        "text": "0 2"
      },
      {
        "letter": "D",
        "text": "1 2"
      }
    ],
    "correct": "C",
    "explanation": "When i==1 continue skips remaining body, so 1 isn't printed."
  },
  {
    "title": "Control Flow - Q0577",
    "text": "Which will be printed? (Be careful with nested if-else)",
    "code": "if(true) if(false) System.out.print(\"A\"); else System.out.print(\"B\");",
    "options": [
      {
        "letter": "A",
        "text": "Nothing"
      },
      {
        "letter": "B",
        "text": "Compilation error"
      },
      {
        "letter": "C",
        "text": "B"
      },
      {
        "letter": "D",
        "text": "A"
      }
    ],
    "correct": "C",
    "explanation": "Inner if(false) goes to its else printing B; the outer if(true) surrounds it."
  },
  {
    "title": "Control Flow - Q0578",
    "text": "Can a switch statement use Strings as case labels (Java 7+)",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "No"
      },
      {
        "letter": "B",
        "text": "Only with enum"
      },
      {
        "letter": "C",
        "text": "Yes"
      },
      {
        "letter": "D",
        "text": "Only with integers"
      }
    ],
    "correct": "C",
    "explanation": "Since Java 7, switch supports String expressions."
  },
  {
    "title": "Control Flow - Q0579",
    "text": "What is printed by the switch with fall-through cases",
    "code": "int x = 0; switch(x){ case 0: case 1: System.out.print(\"X\"); break; }",
    "options": [
      {
        "letter": "A",
        "text": "X"
      },
      {
        "letter": "B",
        "text": "0"
      },
      {
        "letter": "C",
        "text": "Compilation error"
      },
      {
        "letter": "D",
        "text": "Nothing"
      }
    ],
    "correct": "A",
    "explanation": "Multiple case labels can fall through to same code block, printing X."
  },
  {
    "title": "Control Flow - Q0580",
    "text": "What is the output of the for loop above",
    "code": "for (int i = 0; i < 3; i++) System.out.print(i);",
    "options": [
      {
        "letter": "A",
        "text": "123"
      },
      {
        "letter": "B",
        "text": "01"
      },
      {
        "letter": "C",
        "text": "012"
      },
      {
        "letter": "D",
        "text": "0123"
      }
    ],
    "correct": "C",
    "explanation": "Loop prints i values 0,1,2 concatenated."
  },
  {
    "title": "Control Flow - Q0581",
    "text": "What will be printed",
    "code": "int x = 10; if (x > 5) System.out.println(\"Hi\"); else System.out.println(\"Bye\");",
    "options": [
      {
        "letter": "A",
        "text": "Hi"
      },
      {
        "letter": "B",
        "text": "Nothing"
      },
      {
        "letter": "C",
        "text": "Compilation error"
      },
      {
        "letter": "D",
        "text": "Bye"
      }
    ],
    "correct": "A",
    "explanation": "Condition true so 'Hi' is printed."
  },
  {
    "title": "Control Flow - Q0582",
    "text": "What will the switch print",
    "code": "int day = 2; switch(day) { case 1: System.out.print(\"A\"); break; default: System.out.print(\"B\"); }",
    "options": [
      {
        "letter": "A",
        "text": "A"
      },
      {
        "letter": "B",
        "text": "Nothing"
      },
      {
        "letter": "C",
        "text": "Compilation error"
      },
      {
        "letter": "D",
        "text": "B"
      }
    ],
    "correct": "D",
    "explanation": "No case matches 2, so default executes printing B."
  },
  {
    "title": "Control Flow - Q0583",
    "text": "How many times will the while loop execute",
    "code": "int i=0; while(i<1) { System.out.print(i); i++; }",
    "options": [
      {
        "letter": "A",
        "text": "Infinite"
      },
      {
        "letter": "B",
        "text": "1"
      },
      {
        "letter": "C",
        "text": "2"
      },
      {
        "letter": "D",
        "text": "0"
      }
    ],
    "correct": "B",
    "explanation": "Condition true once; loop runs one time."
  },
  {
    "title": "Control Flow - Q0584",
    "text": "What does a do-while loop guarantee",
    "code": "int i=5; do { System.out.print(i); i++; } while(i<5);",
    "options": [
      {
        "letter": "A",
        "text": "It may not execute at all"
      },
      {
        "letter": "B",
        "text": "Executes twice"
      },
      {
        "letter": "C",
        "text": "Always infinite"
      },
      {
        "letter": "D",
        "text": "Body executes at least once"
      }
    ],
    "correct": "D",
    "explanation": "do-while checks condition after executing the body, ensuring at least one run."
  },
  {
    "title": "Control Flow - Q0586",
    "text": "What is the output using continue",
    "code": "for(int i=0;i<3;i++){ if(i==1) continue; System.out.print(i);}",
    "options": [
      {
        "letter": "A",
        "text": "0 1 2"
      },
      {
        "letter": "B",
        "text": "1 2"
      },
      {
        "letter": "C",
        "text": "0 1"
      },
      {
        "letter": "D",
        "text": "0 2"
      }
    ],
    "correct": "D",
    "explanation": "When i==1 continue skips remaining body, so 1 isn't printed."
  },
  {
    "title": "Control Flow - Q0587",
    "text": "Which will be printed? (Be careful with nested if-else)",
    "code": "if(true) if(false) System.out.print(\"A\"); else System.out.print(\"B\");",
    "options": [
      {
        "letter": "A",
        "text": "Compilation error"
      },
      {
        "letter": "B",
        "text": "A"
      },
      {
        "letter": "C",
        "text": "Nothing"
      },
      {
        "letter": "D",
        "text": "B"
      }
    ],
    "correct": "D",
    "explanation": "Inner if(false) goes to its else printing B; the outer if(true) surrounds it."
  },
  {
    "title": "Control Flow - Q0588",
    "text": "Can a switch statement use Strings as case labels (Java 7+)",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Yes"
      },
      {
        "letter": "B",
        "text": "Only with integers"
      },
      {
        "letter": "C",
        "text": "Only with enum"
      },
      {
        "letter": "D",
        "text": "No"
      }
    ],
    "correct": "A",
    "explanation": "Since Java 7, switch supports String expressions."
  },
  {
    "title": "Control Flow - Q0589",
    "text": "What is printed by the switch with fall-through cases",
    "code": "int x = 0; switch(x){ case 0: case 1: System.out.print(\"X\"); break; }",
    "options": [
      {
        "letter": "A",
        "text": "Compilation error"
      },
      {
        "letter": "B",
        "text": "Nothing"
      },
      {
        "letter": "C",
        "text": "X"
      },
      {
        "letter": "D",
        "text": "0"
      }
    ],
    "correct": "C",
    "explanation": "Multiple case labels can fall through to same code block, printing X."
  },
  {
    "title": "Control Flow - Q0590",
    "text": "What is the output of the for loop above",
    "code": "for (int i = 0; i < 3; i++) System.out.print(i);",
    "options": [
      {
        "letter": "A",
        "text": "123"
      },
      {
        "letter": "B",
        "text": "01"
      },
      {
        "letter": "C",
        "text": "0123"
      },
      {
        "letter": "D",
        "text": "012"
      }
    ],
    "correct": "D",
    "explanation": "Loop prints i values 0,1,2 concatenated."
  },
  {
    "title": "Control Flow - Q0593",
    "text": "How many times will the while loop execute",
    "code": "int i=0; while(i<1) { System.out.print(i); i++; }",
    "options": [
      {
        "letter": "A",
        "text": "Infinite"
      },
      {
        "letter": "B",
        "text": "2"
      },
      {
        "letter": "C",
        "text": "1"
      },
      {
        "letter": "D",
        "text": "0"
      }
    ],
    "correct": "C",
    "explanation": "Condition true once; loop runs one time."
  },
  {
    "title": "Control Flow - Q0594",
    "text": "What does a do-while loop guarantee",
    "code": "int i=5; do { System.out.print(i); i++; } while(i<5);",
    "options": [
      {
        "letter": "A",
        "text": "Executes twice"
      },
      {
        "letter": "B",
        "text": "It may not execute at all"
      },
      {
        "letter": "C",
        "text": "Body executes at least once"
      },
      {
        "letter": "D",
        "text": "Always infinite"
      }
    ],
    "correct": "C",
    "explanation": "do-while checks condition after executing the body, ensuring at least one run."
  },
  {
    "title": "Control Flow - Q0597",
    "text": "Which will be printed? (Be careful with nested if-else)",
    "code": "if(true) if(false) System.out.print(\"A\"); else System.out.print(\"B\");",
    "options": [
      {
        "letter": "A",
        "text": "A"
      },
      {
        "letter": "B",
        "text": "B"
      },
      {
        "letter": "C",
        "text": "Compilation error"
      },
      {
        "letter": "D",
        "text": "Nothing"
      }
    ],
    "correct": "B",
    "explanation": "Inner if(false) goes to its else printing B; the outer if(true) surrounds it."
  },
  {
    "title": "Control Flow - Q0598",
    "text": "Can a switch statement use Strings as case labels (Java 7+)",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "No"
      },
      {
        "letter": "B",
        "text": "Only with integers"
      },
      {
        "letter": "C",
        "text": "Only with enum"
      },
      {
        "letter": "D",
        "text": "Yes"
      }
    ],
    "correct": "D",
    "explanation": "Since Java 7, switch supports String expressions."
  },
  {
    "title": "Control Flow - Q0599",
    "text": "What is printed by the switch with fall-through cases",
    "code": "int x = 0; switch(x){ case 0: case 1: System.out.print(\"X\"); break; }",
    "options": [
      {
        "letter": "A",
        "text": "Compilation error"
      },
      {
        "letter": "B",
        "text": "X"
      },
      {
        "letter": "C",
        "text": "0"
      },
      {
        "letter": "D",
        "text": "Nothing"
      }
    ],
    "correct": "B",
    "explanation": "Multiple case labels can fall through to same code block, printing X."
  },
  {
    "title": "Control Flow - Q0600",
    "text": "What is the output of the for loop above",
    "code": "for (int i = 0; i < 3; i++) System.out.print(i);",
    "options": [
      {
        "letter": "A",
        "text": "012"
      },
      {
        "letter": "B",
        "text": "01"
      },
      {
        "letter": "C",
        "text": "123"
      },
      {
        "letter": "D",
        "text": "0123"
      }
    ],
    "correct": "A",
    "explanation": "Loop prints i values 0,1,2 concatenated."
  },
  {
    "title": "Control Flow - Q0601",
    "text": "What will be printed",
    "code": "int x = 10; if (x > 5) System.out.println(\"Hi\"); else System.out.println(\"Bye\");",
    "options": [
      {
        "letter": "A",
        "text": "Compilation error"
      },
      {
        "letter": "B",
        "text": "Hi"
      },
      {
        "letter": "C",
        "text": "Nothing"
      },
      {
        "letter": "D",
        "text": "Bye"
      }
    ],
    "correct": "B",
    "explanation": "Condition true so 'Hi' is printed."
  },
  {
    "title": "Control Flow - Q0602",
    "text": "What will the switch print",
    "code": "int day = 2; switch(day) { case 1: System.out.print(\"A\"); break; default: System.out.print(\"B\"); }",
    "options": [
      {
        "letter": "A",
        "text": "A"
      },
      {
        "letter": "B",
        "text": "B"
      },
      {
        "letter": "C",
        "text": "Compilation error"
      },
      {
        "letter": "D",
        "text": "Nothing"
      }
    ],
    "correct": "B",
    "explanation": "No case matches 2, so default executes printing B."
  },
  {
    "title": "Control Flow - Q0603",
    "text": "How many times will the while loop execute",
    "code": "int i=0; while(i<1) { System.out.print(i); i++; }",
    "options": [
      {
        "letter": "A",
        "text": "2"
      },
      {
        "letter": "B",
        "text": "Infinite"
      },
      {
        "letter": "C",
        "text": "0"
      },
      {
        "letter": "D",
        "text": "1"
      }
    ],
    "correct": "D",
    "explanation": "Condition true once; loop runs one time."
  },
  {
    "title": "Control Flow - Q0605",
    "text": "What is printed before break",
    "code": "for(int i=0;i<5;i++){ if(i==2) break; System.out.print(i);}",
    "options": [
      {
        "letter": "A",
        "text": "0 1"
      },
      {
        "letter": "B",
        "text": "0 1 2"
      },
      {
        "letter": "C",
        "text": "Nothing"
      },
      {
        "letter": "D",
        "text": "0 1 2 3"
      }
    ],
    "correct": "A",
    "explanation": "Loop prints 0 and 1, then breaks when i==2 before printing 2."
  },
  {
    "title": "Control Flow - Q0606",
    "text": "What is the output using continue",
    "code": "for(int i=0;i<3;i++){ if(i==1) continue; System.out.print(i);}",
    "options": [
      {
        "letter": "A",
        "text": "0 1"
      },
      {
        "letter": "B",
        "text": "0 2"
      },
      {
        "letter": "C",
        "text": "0 1 2"
      },
      {
        "letter": "D",
        "text": "1 2"
      }
    ],
    "correct": "B",
    "explanation": "When i==1 continue skips remaining body, so 1 isn't printed."
  },
  {
    "title": "Control Flow - Q0607",
    "text": "Which will be printed? (Be careful with nested if-else)",
    "code": "if(true) if(false) System.out.print(\"A\"); else System.out.print(\"B\");",
    "options": [
      {
        "letter": "A",
        "text": "B"
      },
      {
        "letter": "B",
        "text": "Nothing"
      },
      {
        "letter": "C",
        "text": "A"
      },
      {
        "letter": "D",
        "text": "Compilation error"
      }
    ],
    "correct": "A",
    "explanation": "Inner if(false) goes to its else printing B; the outer if(true) surrounds it."
  },
  {
    "title": "Control Flow - Q0611",
    "text": "What will be printed",
    "code": "int x = 10; if (x > 5) System.out.println(\"Hi\"); else System.out.println(\"Bye\");",
    "options": [
      {
        "letter": "A",
        "text": "Nothing"
      },
      {
        "letter": "B",
        "text": "Compilation error"
      },
      {
        "letter": "C",
        "text": "Hi"
      },
      {
        "letter": "D",
        "text": "Bye"
      }
    ],
    "correct": "C",
    "explanation": "Condition true so 'Hi' is printed."
  },
  {
    "title": "Control Flow - Q0620",
    "text": "What is the output of the for loop above",
    "code": "for (int i = 0; i < 3; i++) System.out.print(i);",
    "options": [
      {
        "letter": "A",
        "text": "123"
      },
      {
        "letter": "B",
        "text": "012"
      },
      {
        "letter": "C",
        "text": "0123"
      },
      {
        "letter": "D",
        "text": "01"
      }
    ],
    "correct": "B",
    "explanation": "Loop prints i values 0,1,2 concatenated."
  },
  {
    "title": "Control Flow - Q0622",
    "text": "What will the switch print",
    "code": "int day = 2; switch(day) { case 1: System.out.print(\"A\"); break; default: System.out.print(\"B\"); }",
    "options": [
      {
        "letter": "A",
        "text": "Nothing"
      },
      {
        "letter": "B",
        "text": "A"
      },
      {
        "letter": "C",
        "text": "B"
      },
      {
        "letter": "D",
        "text": "Compilation error"
      }
    ],
    "correct": "C",
    "explanation": "No case matches 2, so default executes printing B."
  },
  {
    "title": "Control Flow - Q0625",
    "text": "What is printed before break",
    "code": "for(int i=0;i<5;i++){ if(i==2) break; System.out.print(i);}",
    "options": [
      {
        "letter": "A",
        "text": "0 1 2"
      },
      {
        "letter": "B",
        "text": "Nothing"
      },
      {
        "letter": "C",
        "text": "0 1 2 3"
      },
      {
        "letter": "D",
        "text": "0 1"
      }
    ],
    "correct": "D",
    "explanation": "Loop prints 0 and 1, then breaks when i==2 before printing 2."
  },
  {
    "title": "Control Flow - Q0632",
    "text": "What will the switch print",
    "code": "int day = 2; switch(day) { case 1: System.out.print(\"A\"); break; default: System.out.print(\"B\"); }",
    "options": [
      {
        "letter": "A",
        "text": "B"
      },
      {
        "letter": "B",
        "text": "Compilation error"
      },
      {
        "letter": "C",
        "text": "Nothing"
      },
      {
        "letter": "D",
        "text": "A"
      }
    ],
    "correct": "A",
    "explanation": "No case matches 2, so default executes printing B."
  },
  {
    "title": "Control Flow - Q0638",
    "text": "Can a switch statement use Strings as case labels (Java 7+)",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "No"
      },
      {
        "letter": "B",
        "text": "Yes"
      },
      {
        "letter": "C",
        "text": "Only with integers"
      },
      {
        "letter": "D",
        "text": "Only with enum"
      }
    ],
    "correct": "B",
    "explanation": "Since Java 7, switch supports String expressions."
  },
  {
    "title": "Control Flow - Q0649",
    "text": "What is printed by the switch with fall-through cases",
    "code": "int x = 0; switch(x){ case 0: case 1: System.out.print(\"X\"); break; }",
    "options": [
      {
        "letter": "A",
        "text": "Compilation error"
      },
      {
        "letter": "B",
        "text": "0"
      },
      {
        "letter": "C",
        "text": "Nothing"
      },
      {
        "letter": "D",
        "text": "X"
      }
    ],
    "correct": "D",
    "explanation": "Multiple case labels can fall through to same code block, printing X."
  },
  {
    "title": "Control Flow - Q0664",
    "text": "What does a do-while loop guarantee",
    "code": "int i=5; do { System.out.print(i); i++; } while(i<5);",
    "options": [
      {
        "letter": "A",
        "text": "Executes twice"
      },
      {
        "letter": "B",
        "text": "Body executes at least once"
      },
      {
        "letter": "C",
        "text": "It may not execute at all"
      },
      {
        "letter": "D",
        "text": "Always infinite"
      }
    ],
    "correct": "B",
    "explanation": "do-while checks condition after executing the body, ensuring at least one run."
  },
  {
    "title": "Control Flow - Q0666",
    "text": "What is the output using continue",
    "code": "for(int i=0;i<3;i++){ if(i==1) continue; System.out.print(i);}",
    "options": [
      {
        "letter": "A",
        "text": "0 2"
      },
      {
        "letter": "B",
        "text": "1 2"
      },
      {
        "letter": "C",
        "text": "0 1"
      },
      {
        "letter": "D",
        "text": "0 1 2"
      }
    ],
    "correct": "A",
    "explanation": "When i==1 continue skips remaining body, so 1 isn't printed."
  },
  {
    "title": "Control Flow - Q0695",
    "text": "What is printed before break",
    "code": "for(int i=0;i<5;i++){ if(i==2) break; System.out.print(i);}",
    "options": [
      {
        "letter": "A",
        "text": "Nothing"
      },
      {
        "letter": "B",
        "text": "0 1 2"
      },
      {
        "letter": "C",
        "text": "0 1"
      },
      {
        "letter": "D",
        "text": "0 1 2 3"
      }
    ],
    "correct": "C",
    "explanation": "Loop prints 0 and 1, then breaks when i==2 before printing 2."
  },
  {
    "title": "Comments - Q0716",
    "text": "[Comments] Which is the single-line comment syntax in Java",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "/* */"
      },
      {
        "letter": "B",
        "text": "<!-- -->"
      },
      {
        "letter": "C",
        "text": "#"
      },
      {
        "letter": "D",
        "text": "//"
      }
    ],
    "correct": "D",
    "explanation": "// starts a single-line comment."
  },
  {
    "title": "Comments - Q0717",
    "text": "[Comments] Which comment style is used for Javadoc",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "// ..."
      },
      {
        "letter": "B",
        "text": "# ..."
      },
      {
        "letter": "C",
        "text": "/** ... */"
      },
      {
        "letter": "D",
        "text": "/* ... */"
      }
    ],
    "correct": "C",
    "explanation": "Javadoc comments start with /** and can be processed to generate docs."
  },
  {
    "title": "Comments - Q0718",
    "text": "[Comments] Which comment can span multiple lines",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "@comment"
      },
      {
        "letter": "B",
        "text": "// ..."
      },
      {
        "letter": "C",
        "text": "/* ... */"
      },
      {
        "letter": "D",
        "text": "' ... '"
      }
    ],
    "correct": "C",
    "explanation": "Block comments use /* ... */ and can span several lines."
  },
  {
    "title": "Comments - Q0719",
    "text": "[Comments] Does the compiler include commented code in the bytecode",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Only Javadoc"
      },
      {
        "letter": "B",
        "text": "No"
      },
      {
        "letter": "C",
        "text": "Only // comments"
      },
      {
        "letter": "D",
        "text": "Yes"
      }
    ],
    "correct": "B",
    "explanation": "Comments are ignored by the compiler and not included in bytecode."
  },
  {
    "title": "Comments - Q0720",
    "text": "[Comments] Which is the single-line comment syntax in Java",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "//"
      },
      {
        "letter": "B",
        "text": "#"
      },
      {
        "letter": "C",
        "text": "/* */"
      },
      {
        "letter": "D",
        "text": "<!-- -->"
      }
    ],
    "correct": "A",
    "explanation": "// starts a single-line comment."
  },
  {
    "title": "Comments - Q0721",
    "text": "[Comments] Which comment style is used for Javadoc",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "# ..."
      },
      {
        "letter": "B",
        "text": "/** ... */"
      },
      {
        "letter": "C",
        "text": "// ..."
      },
      {
        "letter": "D",
        "text": "/* ... */"
      }
    ],
    "correct": "B",
    "explanation": "Javadoc comments start with /** and can be processed to generate docs."
  },
  {
    "title": "Comments - Q0722",
    "text": "[Comments] Which comment can span multiple lines",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "/* ... */"
      },
      {
        "letter": "B",
        "text": "@comment"
      },
      {
        "letter": "C",
        "text": "// ..."
      },
      {
        "letter": "D",
        "text": "' ... '"
      }
    ],
    "correct": "A",
    "explanation": "Block comments use /* ... */ and can span several lines."
  },
  {
    "title": "Comments - Q0723",
    "text": "[Comments] Does the compiler include commented code in the bytecode",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "No"
      },
      {
        "letter": "B",
        "text": "Yes"
      },
      {
        "letter": "C",
        "text": "Only Javadoc"
      },
      {
        "letter": "D",
        "text": "Only // comments"
      }
    ],
    "correct": "A",
    "explanation": "Comments are ignored by the compiler and not included in bytecode."
  },
  {
    "title": "Comments - Q0725",
    "text": "[Comments] Which comment style is used for Javadoc",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "/** ... */"
      },
      {
        "letter": "B",
        "text": "# ..."
      },
      {
        "letter": "C",
        "text": "/* ... */"
      },
      {
        "letter": "D",
        "text": "// ..."
      }
    ],
    "correct": "A",
    "explanation": "Javadoc comments start with /** and can be processed to generate docs."
  },
  {
    "title": "Comments - Q0728",
    "text": "[Comments] Which is the single-line comment syntax in Java",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "#"
      },
      {
        "letter": "B",
        "text": "<!-- -->"
      },
      {
        "letter": "C",
        "text": "//"
      },
      {
        "letter": "D",
        "text": "/* */"
      }
    ],
    "correct": "C",
    "explanation": "// starts a single-line comment."
  },
  {
    "title": "Comments - Q0734",
    "text": "[Comments] Which comment can span multiple lines",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "' ... '"
      },
      {
        "letter": "B",
        "text": "@comment"
      },
      {
        "letter": "C",
        "text": "// ..."
      },
      {
        "letter": "D",
        "text": "/* ... */"
      }
    ],
    "correct": "D",
    "explanation": "Block comments use /* ... */ and can span several lines."
  },
  {
    "title": "Comments - Q0735",
    "text": "[Comments] Does the compiler include commented code in the bytecode",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Yes"
      },
      {
        "letter": "B",
        "text": "Only // comments"
      },
      {
        "letter": "C",
        "text": "No"
      },
      {
        "letter": "D",
        "text": "Only Javadoc"
      }
    ],
    "correct": "C",
    "explanation": "Comments are ignored by the compiler and not included in bytecode."
  },
  {
    "title": "Comments - Q0742",
    "text": "[Comments] Which comment can span multiple lines",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "// ..."
      },
      {
        "letter": "B",
        "text": "/* ... */"
      },
      {
        "letter": "C",
        "text": "@comment"
      },
      {
        "letter": "D",
        "text": "' ... '"
      }
    ],
    "correct": "B",
    "explanation": "Block comments use /* ... */ and can span several lines."
  },
  {
    "title": "Comments - Q0744",
    "text": "[Comments] Which is the single-line comment syntax in Java",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "/* */"
      },
      {
        "letter": "B",
        "text": "//"
      },
      {
        "letter": "C",
        "text": "#"
      },
      {
        "letter": "D",
        "text": "<!-- -->"
      }
    ],
    "correct": "B",
    "explanation": "// starts a single-line comment."
  },
  {
    "title": "Comments - Q0747",
    "text": "[Comments] Does the compiler include commented code in the bytecode",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Only Javadoc"
      },
      {
        "letter": "B",
        "text": "Yes"
      },
      {
        "letter": "C",
        "text": "Only // comments"
      },
      {
        "letter": "D",
        "text": "No"
      }
    ],
    "correct": "D",
    "explanation": "Comments are ignored by the compiler and not included in bytecode."
  },
  {
    "title": "Comments - Q0761",
    "text": "[Comments] Which comment style is used for Javadoc",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "# ..."
      },
      {
        "letter": "B",
        "text": "// ..."
      },
      {
        "letter": "C",
        "text": "/* ... */"
      },
      {
        "letter": "D",
        "text": "/** ... */"
      }
    ],
    "correct": "D",
    "explanation": "Javadoc comments start with /** and can be processed to generate docs."
  },
  {
    "title": "User Input - Q0859",
    "text": "Is it necessary to close a Scanner wrapping System.in",
    "code": "Scanner sc = new Scanner(System.in); sc.close();",
    "options": [
      {
        "letter": "A",
        "text": "Never allowed"
      },
      {
        "letter": "B",
        "text": "Closing scanner flushes input"
      },
      {
        "letter": "C",
        "text": "Not recommended to close System.in scanner if you need input later"
      },
      {
        "letter": "D",
        "text": "Always required"
      }
    ],
    "correct": "C",
    "explanation": "Closing Scanner closes the underlying stream (System.in), which may not be desired."
  },
  {
    "title": "User Input - Q0860",
    "text": "Which class is commonly used to read console input in Java",
    "code": "import java.util.Scanner;\nScanner sc = new Scanner(System.in);\nint n = sc.nextInt();",
    "options": [
      {
        "letter": "A",
        "text": "BufferedReader"
      },
      {
        "letter": "B",
        "text": "Console"
      },
      {
        "letter": "C",
        "text": "Scanner"
      },
      {
        "letter": "D",
        "text": "DataInputStream"
      }
    ],
    "correct": "C",
    "explanation": "Scanner is commonly used for simple console input (java.util.Scanner)."
  },
  {
    "title": "User Input - Q0861",
    "text": "How are command-line arguments accessed in Java",
    "code": "public static void main(String[] args) { System.out.println(args.length); }",
    "options": [
      {
        "letter": "A",
        "text": "Through the String[] args parameter of main"
      },
      {
        "letter": "B",
        "text": "They are not accessible"
      },
      {
        "letter": "C",
        "text": "Using Scanner by default"
      },
      {
        "letter": "D",
        "text": "System.console() only"
      }
    ],
    "correct": "A",
    "explanation": "main receives command-line arguments via String[] args."
  },
  {
    "title": "User Input - Q0862",
    "text": "Which Scanner method reads an entire line including spaces",
    "code": "Scanner sc = new Scanner(System.in); String s = sc.nextLine();",
    "options": [
      {
        "letter": "A",
        "text": "readLine()"
      },
      {
        "letter": "B",
        "text": "next()"
      },
      {
        "letter": "C",
        "text": "nextInt()"
      },
      {
        "letter": "D",
        "text": "nextLine()"
      }
    ],
    "correct": "D",
    "explanation": "nextLine() reads until end-of-line, including spaces."
  },
  {
    "title": "User Input - Q0863",
    "text": "What happens if user inputs a non-integer when calling nextInt()",
    "code": "Scanner sc = new Scanner(System.in); int x = sc.nextInt();",
    "options": [
      {
        "letter": "A",
        "text": "InputMismatchException at runtime"
      },
      {
        "letter": "B",
        "text": "Compilation error"
      },
      {
        "letter": "C",
        "text": "It returns 0"
      },
      {
        "letter": "D",
        "text": "It blocks forever"
      }
    ],
    "correct": "A",
    "explanation": "nextInt() throws InputMismatchException if the token isn't parseable as int."
  },
  {
    "title": "User Input - Q0864",
    "text": "Is it necessary to close a Scanner wrapping System.in",
    "code": "Scanner sc = new Scanner(System.in); sc.close();",
    "options": [
      {
        "letter": "A",
        "text": "Never allowed"
      },
      {
        "letter": "B",
        "text": "Always required"
      },
      {
        "letter": "C",
        "text": "Closing scanner flushes input"
      },
      {
        "letter": "D",
        "text": "Not recommended to close System.in scanner if you need input later"
      }
    ],
    "correct": "D",
    "explanation": "Closing Scanner closes the underlying stream (System.in), which may not be desired."
  },
  {
    "title": "User Input - Q0865",
    "text": "Which class is commonly used to read console input in Java",
    "code": "import java.util.Scanner;\nScanner sc = new Scanner(System.in);\nint n = sc.nextInt();",
    "options": [
      {
        "letter": "A",
        "text": "Scanner"
      },
      {
        "letter": "B",
        "text": "DataInputStream"
      },
      {
        "letter": "C",
        "text": "BufferedReader"
      },
      {
        "letter": "D",
        "text": "Console"
      }
    ],
    "correct": "A",
    "explanation": "Scanner is commonly used for simple console input (java.util.Scanner)."
  },
  {
    "title": "User Input - Q0868",
    "text": "What happens if user inputs a non-integer when calling nextInt()",
    "code": "Scanner sc = new Scanner(System.in); int x = sc.nextInt();",
    "options": [
      {
        "letter": "A",
        "text": "It returns 0"
      },
      {
        "letter": "B",
        "text": "InputMismatchException at runtime"
      },
      {
        "letter": "C",
        "text": "It blocks forever"
      },
      {
        "letter": "D",
        "text": "Compilation error"
      }
    ],
    "correct": "B",
    "explanation": "nextInt() throws InputMismatchException if the token isn't parseable as int."
  },
  {
    "title": "User Input - Q0869",
    "text": "Is it necessary to close a Scanner wrapping System.in",
    "code": "Scanner sc = new Scanner(System.in); sc.close();",
    "options": [
      {
        "letter": "A",
        "text": "Not recommended to close System.in scanner if you need input later"
      },
      {
        "letter": "B",
        "text": "Never allowed"
      },
      {
        "letter": "C",
        "text": "Closing scanner flushes input"
      },
      {
        "letter": "D",
        "text": "Always required"
      }
    ],
    "correct": "A",
    "explanation": "Closing Scanner closes the underlying stream (System.in), which may not be desired."
  },
  {
    "title": "User Input - Q0870",
    "text": "Which class is commonly used to read console input in Java",
    "code": "import java.util.Scanner;\nScanner sc = new Scanner(System.in);\nint n = sc.nextInt();",
    "options": [
      {
        "letter": "A",
        "text": "Console"
      },
      {
        "letter": "B",
        "text": "Scanner"
      },
      {
        "letter": "C",
        "text": "BufferedReader"
      },
      {
        "letter": "D",
        "text": "DataInputStream"
      }
    ],
    "correct": "B",
    "explanation": "Scanner is commonly used for simple console input (java.util.Scanner)."
  },
  {
    "title": "User Input - Q0871",
    "text": "How are command-line arguments accessed in Java",
    "code": "public static void main(String[] args) { System.out.println(args.length); }",
    "options": [
      {
        "letter": "A",
        "text": "They are not accessible"
      },
      {
        "letter": "B",
        "text": "Through the String[] args parameter of main"
      },
      {
        "letter": "C",
        "text": "System.console() only"
      },
      {
        "letter": "D",
        "text": "Using Scanner by default"
      }
    ],
    "correct": "B",
    "explanation": "main receives command-line arguments via String[] args."
  },
  {
    "title": "User Input - Q0872",
    "text": "Which Scanner method reads an entire line including spaces",
    "code": "Scanner sc = new Scanner(System.in); String s = sc.nextLine();",
    "options": [
      {
        "letter": "A",
        "text": "next()"
      },
      {
        "letter": "B",
        "text": "readLine()"
      },
      {
        "letter": "C",
        "text": "nextLine()"
      },
      {
        "letter": "D",
        "text": "nextInt()"
      }
    ],
    "correct": "C",
    "explanation": "nextLine() reads until end-of-line, including spaces."
  },
  {
    "title": "User Input - Q0876",
    "text": "How are command-line arguments accessed in Java",
    "code": "public static void main(String[] args) { System.out.println(args.length); }",
    "options": [
      {
        "letter": "A",
        "text": "System.console() only"
      },
      {
        "letter": "B",
        "text": "Using Scanner by default"
      },
      {
        "letter": "C",
        "text": "They are not accessible"
      },
      {
        "letter": "D",
        "text": "Through the String[] args parameter of main"
      }
    ],
    "correct": "D",
    "explanation": "main receives command-line arguments via String[] args."
  },
  {
    "title": "User Input - Q0877",
    "text": "Which Scanner method reads an entire line including spaces",
    "code": "Scanner sc = new Scanner(System.in); String s = sc.nextLine();",
    "options": [
      {
        "letter": "A",
        "text": "nextLine()"
      },
      {
        "letter": "B",
        "text": "readLine()"
      },
      {
        "letter": "C",
        "text": "nextInt()"
      },
      {
        "letter": "D",
        "text": "next()"
      }
    ],
    "correct": "A",
    "explanation": "nextLine() reads until end-of-line, including spaces."
  },
  {
    "title": "User Input - Q0878",
    "text": "What happens if user inputs a non-integer when calling nextInt()",
    "code": "Scanner sc = new Scanner(System.in); int x = sc.nextInt();",
    "options": [
      {
        "letter": "A",
        "text": "Compilation error"
      },
      {
        "letter": "B",
        "text": "It blocks forever"
      },
      {
        "letter": "C",
        "text": "InputMismatchException at runtime"
      },
      {
        "letter": "D",
        "text": "It returns 0"
      }
    ],
    "correct": "C",
    "explanation": "nextInt() throws InputMismatchException if the token isn't parseable as int."
  },
  {
    "title": "User Input - Q0879",
    "text": "Is it necessary to close a Scanner wrapping System.in",
    "code": "Scanner sc = new Scanner(System.in); sc.close();",
    "options": [
      {
        "letter": "A",
        "text": "Never allowed"
      },
      {
        "letter": "B",
        "text": "Not recommended to close System.in scanner if you need input later"
      },
      {
        "letter": "C",
        "text": "Closing scanner flushes input"
      },
      {
        "letter": "D",
        "text": "Always required"
      }
    ],
    "correct": "B",
    "explanation": "Closing Scanner closes the underlying stream (System.in), which may not be desired."
  },
  {
    "title": "User Input - Q0882",
    "text": "Which Scanner method reads an entire line including spaces",
    "code": "Scanner sc = new Scanner(System.in); String s = sc.nextLine();",
    "options": [
      {
        "letter": "A",
        "text": "nextInt()"
      },
      {
        "letter": "B",
        "text": "nextLine()"
      },
      {
        "letter": "C",
        "text": "next()"
      },
      {
        "letter": "D",
        "text": "readLine()"
      }
    ],
    "correct": "B",
    "explanation": "nextLine() reads until end-of-line, including spaces."
  },
  {
    "title": "User Input - Q0885",
    "text": "Which class is commonly used to read console input in Java",
    "code": "import java.util.Scanner;\nScanner sc = new Scanner(System.in);\nint n = sc.nextInt();",
    "options": [
      {
        "letter": "A",
        "text": "DataInputStream"
      },
      {
        "letter": "B",
        "text": "Console"
      },
      {
        "letter": "C",
        "text": "BufferedReader"
      },
      {
        "letter": "D",
        "text": "Scanner"
      }
    ],
    "correct": "D",
    "explanation": "Scanner is commonly used for simple console input (java.util.Scanner)."
  },
  {
    "title": "User Input - Q0886",
    "text": "How are command-line arguments accessed in Java",
    "code": "public static void main(String[] args) { System.out.println(args.length); }",
    "options": [
      {
        "letter": "A",
        "text": "They are not accessible"
      },
      {
        "letter": "B",
        "text": "System.console() only"
      },
      {
        "letter": "C",
        "text": "Through the String[] args parameter of main"
      },
      {
        "letter": "D",
        "text": "Using Scanner by default"
      }
    ],
    "correct": "C",
    "explanation": "main receives command-line arguments via String[] args."
  },
  {
    "title": "User Input - Q0893",
    "text": "What happens if user inputs a non-integer when calling nextInt()",
    "code": "Scanner sc = new Scanner(System.in); int x = sc.nextInt();",
    "options": [
      {
        "letter": "A",
        "text": "It blocks forever"
      },
      {
        "letter": "B",
        "text": "It returns 0"
      },
      {
        "letter": "C",
        "text": "Compilation error"
      },
      {
        "letter": "D",
        "text": "InputMismatchException at runtime"
      }
    ],
    "correct": "D",
    "explanation": "nextInt() throws InputMismatchException if the token isn't parseable as int."
  }
]
