[
    {
        "title": "ThreadCreation - Q0001",
        "text": "Which of the following is NOT a valid way to create a thread in Java",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "Extending the Thread class"
            },
            {
                "letter": "B",
                "text": "Implementing the Runnable interface"
            },
            {
                "letter": "C",
                "text": "Using the Executor framework"
            },
            {
                "letter": "D",
                "text": "Using the 'thread' keyword"
            }
        ],
        "correct": "D",
        "explanation": "There is no 'thread' keyword in Java."
    },
    {
        "title": "ThreadCreation - Q0002",
        "text": "Which method is used to start a thread",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "run()"
            },
            {
                "letter": "B",
                "text": "start()"
            },
            {
                "letter": "C",
                "text": "execute()"
            },
            {
                "letter": "D",
                "text": "init()"
            }
        ],
        "correct": "B",
        "explanation": "The start() method is used to start a new thread."
    },
    {
        "title": "ThreadCreation - Q0003",
        "text": "What happens if run() is called directly instead of start()",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "A new thread is created"
            },
            {
                "letter": "B",
                "text": "The code runs in the current thread"
            },
            {
                "letter": "C",
                "text": "Compilation error"
            },
            {
                "letter": "D",
                "text": "Runtime exception"
            }
        ],
        "correct": "B",
        "explanation": "Calling run() directly executes the code in the current thread."
    },
    {
        "title": "ThreadCreation - Q0004",
        "text": "Which of the following is true about extending the Thread class",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "The class must override the run() method"
            },
            {
                "letter": "B",
                "text": "The class must override the start() method"
            },
            {
                "letter": "C",
                "text": "The class must override the sleep() method"
            },
            {
                "letter": "D",
                "text": "The class must override the yield() method"
            }
        ],
        "correct": "A",
        "explanation": "When extending Thread, the run() method should be overridden."
    },
    {
        "title": "ThreadCreation - Q0005",
        "text": "Which interface must be implemented to create a thread without extending Thread",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "Runnable"
            },
            {
                "letter": "B",
                "text": "Callable"
            },
            {
                "letter": "C",
                "text": "Executor"
            },
            {
                "letter": "D",
                "text": "Threadable"
            }
        ],
        "correct": "A",
        "explanation": "Runnable is the interface used to create threads without extending Thread."
    },
    {
        "title": "ThreadCreation - Q0006",
        "text": "Which method must be implemented when using the Runnable interface",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "start()"
            },
            {
                "letter": "B",
                "text": "run()"
            },
            {
                "letter": "C",
                "text": "execute()"
            },
            {
                "letter": "D",
                "text": "init()"
            }
        ],
        "correct": "B",
        "explanation": "The run() method must be implemented in Runnable."
    },
    {
        "title": "ThreadCreation - Q0007",
        "text": "Which of the following is true about the start() method",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "It creates a new thread and calls run()"
            },
            {
                "letter": "B",
                "text": "It directly executes run() in the current thread"
            },
            {
                "letter": "C",
                "text": "It must be overridden"
            },
            {
                "letter": "D",
                "text": "It is abstract"
            }
        ],
        "correct": "A",
        "explanation": "start() creates a new thread and then calls run()."
    },
    {
        "title": "ThreadCreation - Q0008",
        "text": "Which of the following is NOT a valid constructor of the Thread class",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "Thread()"
            },
            {
                "letter": "B",
                "text": "Thread(Runnable target)"
            },
            {
                "letter": "C",
                "text": "Thread(String name)"
            },
            {
                "letter": "D",
                "text": "Thread(int priority)"
            }
        ],
        "correct": "D",
        "explanation": "There is no Thread constructor that takes only an int priority."
    },
    {
        "title": "ThreadCreation - Q0009",
        "text": "Which of the following is true about creating a thread using Runnable",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "Runnable must override start()"
            },
            {
                "letter": "B",
                "text": "Runnable must override run()"
            },
            {
                "letter": "C",
                "text": "Runnable must override sleep()"
            },
            {
                "letter": "D",
                "text": "Runnable must override yield()"
            }
        ],
        "correct": "B",
        "explanation": "Runnable requires implementing the run() method."
    },
    {
        "title": "ThreadCreation - Q0010",
        "text": "Which of the following is true about Callable compared to Runnable",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "Callable returns a value"
            },
            {
                "letter": "B",
                "text": "Callable cannot throw exceptions"
            },
            {
                "letter": "C",
                "text": "Callable has a run() method"
            },
            {
                "letter": "D",
                "text": "Callable is used only with Thread"
            }
        ],
        "correct": "A",
        "explanation": "Callable's call() method returns a value and can throw exceptions."
    },
    {
        "title": "ThreadCreation - Q0011",
        "text": "Which method is defined in the Runnable interface",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "run()"
            },
            {
                "letter": "B",
                "text": "start()"
            },
            {
                "letter": "C",
                "text": "execute()"
            },
            {
                "letter": "D",
                "text": "call()"
            }
        ],
        "correct": "A",
        "explanation": "Runnable defines the run() method."
    },
    {
        "title": "ThreadCreation - Q0012",
        "text": "Which method is defined in the Callable interface",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "run()"
            },
            {
                "letter": "B",
                "text": "start()"
            },
            {
                "letter": "C",
                "text": "call()"
            },
            {
                "letter": "D",
                "text": "execute()"
            }
        ],
        "correct": "C",
        "explanation": "Callable defines the call() method."
    },
    {
        "title": "ThreadCreation - Q0013",
        "text": "Which of the following is true about creating a thread by extending Thread",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "The class must implement call()"
            },
            {
                "letter": "B",
                "text": "The class must override run()"
            },
            {
                "letter": "C",
                "text": "The class must override start()"
            },
            {
                "letter": "D",
                "text": "The class must implement execute()"
            }
        ],
        "correct": "B",
        "explanation": "When extending Thread, override run() to define thread behavior."
    },
    {
        "title": "ThreadCreation - Q0014",
        "text": "Which of the following is true about the Executor framework",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "It provides a higher-level API for managing threads"
            },
            {
                "letter": "B",
                "text": "It replaces the Thread class"
            },
            {
                "letter": "C",
                "text": "It cannot execute Runnable tasks"
            },
            {
                "letter": "D",
                "text": "It is deprecated"
            }
        ],
        "correct": "A",
        "explanation": "The Executor framework provides a higher-level API for managing threads."
    },
    {
        "title": "ThreadCreation - Q0015",
        "text": "Which of the following is true about thread pools",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "They reuse threads for executing tasks"
            },
            {
                "letter": "B",
                "text": "They create a new thread for each task"
            },
            {
                "letter": "C",
                "text": "They cannot execute Runnable tasks"
            },
            {
                "letter": "D",
                "text": "They are deprecated"
            }
        ],
        "correct": "A",
        "explanation": "Thread pools reuse threads for executing multiple tasks."
    },
    {
        "title": "ThreadCreation - Q0016",
        "text": "Which of the following is true about Future in Java",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "It represents the result of an asynchronous computation"
            },
            {
                "letter": "B",
                "text": "It is used to create threads"
            },
            {
                "letter": "C",
                "text": "It is used to stop threads"
            },
            {
                "letter": "D",
                "text": "It is used to pause threads"
            }
        ],
        "correct": "A",
        "explanation": "Future represents the result of an asynchronous computation."
    },
    {
        "title": "ThreadCreation - Q0017",
        "text": "Which of the following is true about Executors.newFixedThreadPool()",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "It creates a thread pool with a fixed number of threads"
            },
            {
                "letter": "B",
                "text": "It creates a new thread for each task"
            },
            {
                "letter": "C",
                "text": "It creates a thread pool with unlimited threads"
            },
            {
                "letter": "D",
                "text": "It creates a single-threaded executor"
            }
        ],
        "correct": "A",
        "explanation": "newFixedThreadPool() creates a pool with a fixed number of threads."
    },
    {
        "title": "ThreadCreation - Q0018",
        "text": "Which of the following is true about Executors.newSingleThreadExecutor()",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "It creates a thread pool with one thread"
            },
            {
                "letter": "B",
                "text": "It creates a thread pool with unlimited threads"
            },
            {
                "letter": "C",
                "text": "It creates a thread pool with a fixed number of threads"
            },
            {
                "letter": "D",
                "text": "It creates a cached thread pool"
            }
        ],
        "correct": "A",
        "explanation": "newSingleThreadExecutor() creates a pool with one thread."
    },
    {
        "title": "ThreadCreation - Q0019",
        "text": "Which of the following is true about Executors.newCachedThreadPool()",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "It creates a thread pool that creates new threads as needed"
            },
            {
                "letter": "B",
                "text": "It creates a thread pool with one thread"
            },
            {
                "letter": "C",
                "text": "It creates a thread pool with a fixed number of threads"
            },
            {
                "letter": "D",
                "text": "It creates a scheduled thread pool"
            }
        ],
        "correct": "A",
        "explanation": "newCachedThreadPool() creates new threads as needed and reuses idle ones."
    },
    {
        "title": "ThreadCreation - Q0020",
        "text": "Which of the following is true about Executors.newScheduledThreadPool()",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "It creates a thread pool that can schedule tasks"
            },
            {
                "letter": "B",
                "text": "It creates a thread pool with one thread"
            },
            {
                "letter": "C",
                "text": "It creates a thread pool with unlimited threads"
            },
            {
                "letter": "D",
                "text": "It creates a cached thread pool"
            }
        ],
        "correct": "A",
        "explanation": "newScheduledThreadPool() creates a pool that can schedule tasks."
    },
    {
        "title": "ThreadCreation - Q0021",
        "text": "Which of the following is true about the run() method in a thread",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "It must be called directly to start a thread"
            },
            {
                "letter": "B",
                "text": "It contains the code executed by the thread"
            },
            {
                "letter": "C",
                "text": "It is automatically called by the JVM when the program starts"
            },
            {
                "letter": "D",
                "text": "It cannot be overridden"
            }
        ],
        "correct": "B",
        "explanation": "The run() method contains the code executed by the thread."
    },
    {
        "title": "ThreadCreation - Q0022",
        "text": "Which of the following is true about the start() method",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "It can be called multiple times on the same thread"
            },
            {
                "letter": "B",
                "text": "It can only be called once per thread instance"
            },
            {
                "letter": "C",
                "text": "It is optional for starting a thread"
            },
            {
                "letter": "D",
                "text": "It is abstract and must be implemented"
            }
        ],
        "correct": "B",
        "explanation": "start() can only be called once per thread instance."
    },
    {
        "title": "ThreadCreation - Q0023",
        "text": "What happens if start() is called twice on the same thread object",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "The thread runs twice"
            },
            {
                "letter": "B",
                "text": "A new thread is created"
            },
            {
                "letter": "C",
                "text": "IllegalThreadStateException is thrown"
            },
            {
                "letter": "D",
                "text": "Nothing happens"
            }
        ],
        "correct": "C",
        "explanation": "Calling start() twice throws IllegalThreadStateException."
    },
    {
        "title": "ThreadCreation - Q0024",
        "text": "Which of the following is true about thread naming",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "Threads cannot be named"
            },
            {
                "letter": "B",
                "text": "Threads can be named using the constructor or setName()"
            },
            {
                "letter": "C",
                "text": "Thread names are fixed by the JVM"
            },
            {
                "letter": "D",
                "text": "Thread names must be unique"
            }
        ],
        "correct": "B",
        "explanation": "Threads can be named using the constructor or setName()."
    },
    {
        "title": "ThreadCreation - Q0025",
        "text": "Which method retrieves the current thread",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "Thread.current()"
            },
            {
                "letter": "B",
                "text": "Thread.get()"
            },
            {
                "letter": "C",
                "text": "Thread.currentThread()"
            },
            {
                "letter": "D",
                "text": "Thread.this()"
            }
        ],
        "correct": "C",
        "explanation": "Thread.currentThread() returns the current thread."
    },
    {
        "title": "ThreadCreation - Q0026",
        "text": "Which of the following is true about thread priority",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "Thread priority ranges from 0 to 10"
            },
            {
                "letter": "B",
                "text": "Thread priority ranges from 1 to 10"
            },
            {
                "letter": "C",
                "text": "Thread priority ranges from -1 to 1"
            },
            {
                "letter": "D",
                "text": "Thread priority cannot be changed"
            }
        ],
        "correct": "B",
        "explanation": "Thread priority ranges from 1 (MIN_PRIORITY) to 10 (MAX_PRIORITY)."
    },
    {
        "title": "ThreadCreation - Q0027",
        "text": "Which method is used to set thread priority",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "setPriority()"
            },
            {
                "letter": "B",
                "text": "priority()"
            },
            {
                "letter": "C",
                "text": "setLevel()"
            },
            {
                "letter": "D",
                "text": "setImportance()"
            }
        ],
        "correct": "A",
        "explanation": "setPriority() is used to set thread priority."
    },
    {
        "title": "ThreadCreation - Q0028",
        "text": "Which method is used to get the name of a thread",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "getThreadName()"
            },
            {
                "letter": "B",
                "text": "getName()"
            },
            {
                "letter": "C",
                "text": "name()"
            },
            {
                "letter": "D",
                "text": "threadName()"
            }
        ],
        "correct": "B",
        "explanation": "getName() returns the name of the thread."
    },
    {
        "title": "ThreadCreation - Q0029",
        "text": "Which method is used to set the name of a thread",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "setThreadName()"
            },
            {
                "letter": "B",
                "text": "setName()"
            },
            {
                "letter": "C",
                "text": "name()"
            },
            {
                "letter": "D",
                "text": "threadName()"
            }
        ],
        "correct": "B",
        "explanation": "setName() sets the name of the thread."
    },
    {
        "title": "ThreadCreation - Q0030",
        "text": "Which of the following is true about daemon threads",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "They prevent the JVM from exiting"
            },
            {
                "letter": "B",
                "text": "They run in the background and do not prevent JVM exit"
            },
            {
                "letter": "C",
                "text": "They are created by default"
            },
            {
                "letter": "D",
                "text": "They cannot be created by the user"
            }
        ],
        "correct": "B",
        "explanation": "Daemon threads run in the background and do not prevent JVM exit."
    },
    {
        "title": "ThreadCreation - Q0031",
        "text": "Which method is used to mark a thread as daemon",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "setDaemon()"
            },
            {
                "letter": "B",
                "text": "daemon()"
            },
            {
                "letter": "C",
                "text": "makeDaemon()"
            },
            {
                "letter": "D",
                "text": "setBackground()"
            }
        ],
        "correct": "A",
        "explanation": "setDaemon(true) marks a thread as daemon."
    },
    {
        "title": "ThreadCreation - Q0032",
        "text": "Which method checks if a thread is a daemon",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "isDaemon()"
            },
            {
                "letter": "B",
                "text": "checkDaemon()"
            },
            {
                "letter": "C",
                "text": "daemon()"
            },
            {
                "letter": "D",
                "text": "isBackground()"
            }
        ],
        "correct": "A",
        "explanation": "isDaemon() checks if a thread is a daemon."
    },
    {
        "title": "ThreadCreation - Q0033",
        "text": "Which of the following is true about thread groups",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "They allow grouping of multiple threads"
            },
            {
                "letter": "B",
                "text": "They prevent thread creation"
            },
            {
                "letter": "C",
                "text": "They are mandatory for all threads"
            },
            {
                "letter": "D",
                "text": "They are deprecated"
            }
        ],
        "correct": "A",
        "explanation": "Thread groups allow grouping of multiple threads."
    },
    {
        "title": "ThreadCreation - Q0034",
        "text": "Which constructor allows assigning a thread to a thread group",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "Thread(ThreadGroup group, Runnable target)"
            },
            {
                "letter": "B",
                "text": "Thread(Runnable target, int priority)"
            },
            {
                "letter": "C",
                "text": "Thread(String name, int priority)"
            },
            {
                "letter": "D",
                "text": "Thread(ThreadGroup group, int priority)"
            }
        ],
        "correct": "A",
        "explanation": "Thread(ThreadGroup group, Runnable target) assigns a thread to a group."
    },
    {
        "title": "ThreadCreation - Q0035",
        "text": "Which method returns the thread group of a thread",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "getThreadGroup()"
            },
            {
                "letter": "B",
                "text": "getGroup()"
            },
            {
                "letter": "C",
                "text": "group()"
            },
            {
                "letter": "D",
                "text": "threadGroup()"
            }
        ],
        "correct": "A",
        "explanation": "getThreadGroup() returns the thread group of a thread."
    },
    {
        "title": "ThreadCreation - Q0036",
        "text": "Which of the following is true about thread states",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "A thread can only be in NEW or TERMINATED state"
            },
            {
                "letter": "B",
                "text": "A thread can be in NEW, RUNNABLE, BLOCKED, WAITING, TIMED_WAITING, or TERMINATED"
            },
            {
                "letter": "C",
                "text": "A thread can only be RUNNING or STOPPED"
            },
            {
                "letter": "D",
                "text": "Thread states are not defined in Java"
            }
        ],
        "correct": "B",
        "explanation": "Java defines six thread states."
    },
    {
        "title": "ThreadCreation - Q0037",
        "text": "Which method returns the state of a thread",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "getState()"
            },
            {
                "letter": "B",
                "text": "state()"
            },
            {
                "letter": "C",
                "text": "threadState()"
            },
            {
                "letter": "D",
                "text": "status()"
            }
        ],
        "correct": "A",
        "explanation": "getState() returns the state of a thread."
    },
    {
        "title": "ThreadCreation - Q0038",
        "text": "Which of the following is true about the default thread priority",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "It is 0"
            },
            {
                "letter": "B",
                "text": "It is 1"
            },
            {
                "letter": "C",
                "text": "It is 5"
            },
            {
                "letter": "D",
                "text": "It is 10"
            }
        ],
        "correct": "C",
        "explanation": "The default thread priority is 5 (NORM_PRIORITY)."
    },
    {
        "title": "ThreadCreation - Q0039",
        "text": "Which of the following is true about creating threads using lambda expressions",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "It is not allowed"
            },
            {
                "letter": "B",
                "text": "It can be done by passing a lambda to the Thread constructor"
            },
            {
                "letter": "C",
                "text": "It requires implementing Callable"
            },
            {
                "letter": "D",
                "text": "It requires overriding start()"
            }
        ],
        "correct": "B",
        "explanation": "A lambda can be passed to the Thread constructor as a Runnable."
    },
    {
        "title": "ThreadCreation - Q0040",
        "text": "Which of the following is true about thread IDs",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "They are assigned manually"
            },
            {
                "letter": "B",
                "text": "They are assigned by the JVM"
            },
            {
                "letter": "C",
                "text": "They must be unique across JVMs"
            },
            {
                "letter": "D",
                "text": "They are always sequential"
            }
        ],
        "correct": "B",
        "explanation": "Thread IDs are assigned by the JVM."
    },
    {
        "title": "ThreadCreation - Q0041",
        "text": "Which method returns the ID of a thread",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "getThreadId()"
            },
            {
                "letter": "B",
                "text": "getId()"
            },
            {
                "letter": "C",
                "text": "id()"
            },
            {
                "letter": "D",
                "text": "threadId()"
            }
        ],
        "correct": "B",
        "explanation": "getId() returns the ID of a thread."
    },
    {
        "title": "ThreadCreation - Q0042",
        "text": "Which of the following is true about thread interruption",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "It forcibly stops the thread"
            },
            {
                "letter": "B",
                "text": "It sets the interrupt flag of the thread"
            },
            {
                "letter": "C",
                "text": "It deletes the thread"
            },
            {
                "letter": "D",
                "text": "It restarts the thread"
            }
        ],
        "correct": "B",
        "explanation": "interrupt() sets the interrupt flag of the thread."
    },
    {
        "title": "ThreadCreation - Q0043",
        "text": "Which method checks if a thread has been interrupted",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "isInterrupted()"
            },
            {
                "letter": "B",
                "text": "checkInterrupt()"
            },
            {
                "letter": "C",
                "text": "interrupted()"
            },
            {
                "letter": "D",
                "text": "hasInterrupted()"
            }
        ],
        "correct": "A",
        "explanation": "isInterrupted() checks if a thread has been interrupted."
    },
    {
        "title": "ThreadCreation - Q0044",
        "text": "Which static method clears the interrupt flag when checking it",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "isInterrupted()"
            },
            {
                "letter": "B",
                "text": "interrupted()"
            },
            {
                "letter": "C",
                "text": "checkInterrupt()"
            },
            {
                "letter": "D",
                "text": "clearInterrupt()"
            }
        ],
        "correct": "B",
        "explanation": "Thread.interrupted() checks and clears the interrupt flag."
    },
    {
        "title": "ThreadCreation - Q0045",
        "text": "Which of the following is true about thread lifecycle",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "A thread can be restarted after termination"
            },
            {
                "letter": "B",
                "text": "A thread cannot be restarted once terminated"
            },
            {
                "letter": "C",
                "text": "A thread can only be in NEW or RUNNING state"
            },
            {
                "letter": "D",
                "text": "Thread lifecycle is not defined in Java"
            }
        ],
        "correct": "B",
        "explanation": "A thread cannot be restarted once terminated."
    },
    {
        "title": "ThreadCreation - Q0046",
        "text": "Which of the following is true about creating threads with Callable",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "Callable must be passed to a Thread constructor"
            },
            {
                "letter": "B",
                "text": "Callable must be submitted to an ExecutorService"
            },
            {
                "letter": "C",
                "text": "Callable must override run()"
            },
            {
                "letter": "D",
                "text": "Callable cannot return values"
            }
        ],
        "correct": "B",
        "explanation": "Callable tasks are submitted to an ExecutorService."
    },
    {
        "title": "ThreadCreation - Q0047",
        "text": "Which of the following is true about FutureTask",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "It is used to wrap a Callable or Runnable"
            },
            {
                "letter": "B",
                "text": "It is used to stop threads"
            },
            {
                "letter": "C",
                "text": "It is used to pause threads"
            },
            {
                "letter": "D",
                "text": "It is used to restart threads"
            }
        ],
        "correct": "A",
        "explanation": "FutureTask wraps a Callable or Runnable and can be executed by a thread."
    },
    {
        "title": "ThreadCreation - Q0048",
        "text": "Which of the following is true about ScheduledExecutorService",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "It can schedule tasks to run after a delay or periodically"
            },
            {
                "letter": "B",
                "text": "It can only run tasks immediately"
            },
            {
                "letter": "C",
                "text": "It cannot execute Runnable tasks"
            },
            {
                "letter": "D",
                "text": "It is deprecated"
            }
        ],
        "correct": "A",
        "explanation": "ScheduledExecutorService can schedule tasks with delay or periodically."
    },
    {
        "title": "ThreadCreation - Q0049",
        "text": "Which of the following is true about creating threads with anonymous classes",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "It is not allowed"
            },
            {
                "letter": "B",
                "text": "It can be done by creating an anonymous Runnable or Thread subclass"
            },
            {
                "letter": "C",
                "text": "It requires implementing Callable"
            },
            {
                "letter": "D",
                "text": "It requires overriding start()"
            }
        ],
        "correct": "B",
        "explanation": "Threads can be created using anonymous Runnable or Thread subclasses."
    },
    {
        "title": "ThreadCreation - Q0050",
        "text": "Which of the following is true about thread creation in Java",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "Threads can only be created by extending Thread"
            },
            {
                "letter": "B",
                "text": "Threads can be created by extending Thread, implementing Runnable, or using Executor framework"
            },
            {
                "letter": "C",
                "text": "Threads can only be created using Executor framework"
            },
            {
                "letter": "D",
                "text": "Threads cannot be created by the user"
            }
        ],
        "correct": "B",
        "explanation": "Threads can be created by extending Thread, implementing Runnable, or using Executor framework."
    },
    {
        "title": "Lifecycle - Q0001",
        "text": "[Lifecycle] Which of the following is the first state of a thread in Java?",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "RUNNABLE"
            },
            {
                "letter": "B",
                "text": "NEW"
            },
            {
                "letter": "C",
                "text": "WAITING"
            },
            {
                "letter": "D",
                "text": "TERMINATED"
            }
        ],
        "correct": "B",
        "explanation": "When a thread object is created, it is in the NEW state."
    },
    {
        "title": "Lifecycle - Q0002",
        "text": "[Lifecycle] Which method transitions a thread from NEW to RUNNABLE state?",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "run()"
            },
            {
                "letter": "B",
                "text": "start()"
            },
            {
                "letter": "C",
                "text": "sleep()"
            },
            {
                "letter": "D",
                "text": "yield()"
            }
        ],
        "correct": "B",
        "explanation": "Calling start() moves a thread from NEW to RUNNABLE."
    },
    {
        "title": "Lifecycle - Q0003",
        "text": "[Lifecycle] Which state indicates that a thread is ready to run but waiting for CPU?",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "RUNNABLE"
            },
            {
                "letter": "B",
                "text": "RUNNING"
            },
            {
                "letter": "C",
                "text": "WAITING"
            },
            {
                "letter": "D",
                "text": "BLOCKED"
            }
        ],
        "correct": "A",
        "explanation": "RUNNABLE means the thread is ready but waiting for CPU scheduling."
    },
    {
        "title": "Lifecycle - Q0004",
        "text": "[Lifecycle] Which state indicates that a thread is actively executing?",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "RUNNABLE"
            },
            {
                "letter": "B",
                "text": "RUNNING"
            },
            {
                "letter": "C",
                "text": "WAITING"
            },
            {
                "letter": "D",
                "text": "NEW"
            }
        ],
        "correct": "B",
        "explanation": "RUNNING means the thread is actively executing instructions."
    },
    {
        "title": "Lifecycle - Q0005",
        "text": "[Lifecycle] Which state occurs when a thread is waiting indefinitely for another thread to signal?",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "WAITING"
            },
            {
                "letter": "B",
                "text": "TIMED_WAITING"
            },
            {
                "letter": "C",
                "text": "BLOCKED"
            },
            {
                "letter": "D",
                "text": "TERMINATED"
            }
        ],
        "correct": "A",
        "explanation": "WAITING means the thread waits indefinitely until notified."
    },
    {
        "title": "Lifecycle - Q0006",
        "text": "[Lifecycle] Which state occurs when a thread waits for a specified time?",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "WAITING"
            },
            {
                "letter": "B",
                "text": "TIMED_WAITING"
            },
            {
                "letter": "C",
                "text": "BLOCKED"
            },
            {
                "letter": "D",
                "text": "RUNNABLE"
            }
        ],
        "correct": "B",
        "explanation": "TIMED_WAITING means the thread waits for a specified time."
    },
    {
        "title": "Lifecycle - Q0007",
        "text": "[Lifecycle] Which state occurs when a thread is waiting to acquire a monitor lock?",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "WAITING"
            },
            {
                "letter": "B",
                "text": "BLOCKED"
            },
            {
                "letter": "C",
                "text": "RUNNABLE"
            },
            {
                "letter": "D",
                "text": "TERMINATED"
            }
        ],
        "correct": "B",
        "explanation": "BLOCKED means the thread is waiting to acquire a monitor lock."
    },
    {
        "title": "Lifecycle - Q0008",
        "text": "[Lifecycle] Which state indicates that a thread has finished execution?",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "WAITING"
            },
            {
                "letter": "B",
                "text": "RUNNABLE"
            },
            {
                "letter": "C",
                "text": "TERMINATED"
            },
            {
                "letter": "D",
                "text": "BLOCKED"
            }
        ],
        "correct": "C",
        "explanation": "TERMINATED means the thread has finished execution."
    },
    {
        "title": "Lifecycle - Q0009",
        "text": "[Lifecycle] Which method causes a thread to sleep for a given time?",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "wait()"
            },
            {
                "letter": "B",
                "text": "sleep()"
            },
            {
                "letter": "C",
                "text": "yield()"
            },
            {
                "letter": "D",
                "text": "join()"
            }
        ],
        "correct": "B",
        "explanation": "sleep() pauses the thread for a specified time."
    },
    {
        "title": "Lifecycle - Q0010",
        "text": "[Lifecycle] Which method allows one thread to wait for another to finish?",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "sleep()"
            },
            {
                "letter": "B",
                "text": "join()"
            },
            {
                "letter": "C",
                "text": "yield()"
            },
            {
                "letter": "D",
                "text": "notify()"
            }
        ],
        "correct": "B",
        "explanation": "join() makes one thread wait until another finishes."
    },
    {
        "title": "Lifecycle - Q0011",
        "text": "[Lifecycle] Which method is used to notify a waiting thread?",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "notify()"
            },
            {
                "letter": "B",
                "text": "signal()"
            },
            {
                "letter": "C",
                "text": "wake()"
            },
            {
                "letter": "D",
                "text": "resume()"
            }
        ],
        "correct": "A",
        "explanation": "notify() wakes up one waiting thread."
    },
    {
        "title": "Lifecycle - Q0012",
        "text": "[Lifecycle] Which method wakes up all waiting threads?",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "notify()"
            },
            {
                "letter": "B",
                "text": "notifyAll()"
            },
            {
                "letter": "C",
                "text": "wakeAll()"
            },
            {
                "letter": "D",
                "text": "resumeAll()"
            }
        ],
        "correct": "B",
        "explanation": "notifyAll() wakes up all waiting threads."
    },
    {
        "title": "Lifecycle - Q0013",
        "text": "[Lifecycle] Which method temporarily pauses the current thread and allows others to execute?",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "sleep()"
            },
            {
                "letter": "B",
                "text": "yield()"
            },
            {
                "letter": "C",
                "text": "wait()"
            },
            {
                "letter": "D",
                "text": "join()"
            }
        ],
        "correct": "B",
        "explanation": "yield() hints the scheduler to pause the current thread."
    },
    {
        "title": "Lifecycle - Q0014",
        "text": "[Lifecycle] Which method is used to check if a thread is alive?",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "isRunning()"
            },
            {
                "letter": "B",
                "text": "isAlive()"
            },
            {
                "letter": "C",
                "text": "alive()"
            },
            {
                "letter": "D",
                "text": "status()"
            }
        ],
        "correct": "B",
        "explanation": "isAlive() checks if a thread is still running."
    },
    {
        "title": "Lifecycle - Q0015",
        "text": "[Lifecycle] Which method is used to stop a thread safely?",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "stop()"
            },
            {
                "letter": "B",
                "text": "destroy()"
            },
            {
                "letter": "C",
                "text": "interrupt()"
            },
            {
                "letter": "D",
                "text": "exit()"
            }
        ],
        "correct": "C",
        "explanation": "interrupt() is the safe way to request a thread to stop."
    },
    {
        "title": "Lifecycle - Q0016",
        "text": "[Lifecycle] Which state does a thread enter after calling sleep()?",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "WAITING"
            },
            {
                "letter": "B",
                "text": "TIMED_WAITING"
            },
            {
                "letter": "C",
                "text": "BLOCKED"
            },
            {
                "letter": "D",
                "text": "TERMINATED"
            }
        ],
        "correct": "B",
        "explanation": "sleep() puts the thread into TIMED_WAITING."
    },
    {
        "title": "Lifecycle - Q0017",
        "text": "[Lifecycle] Which state does a thread enter after calling join()?",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "WAITING or TIMED_WAITING"
            },
            {
                "letter": "B",
                "text": "BLOCKED"
            },
            {
                "letter": "C",
                "text": "RUNNABLE"
            },
            {
                "letter": "D",
                "text": "TERMINATED"
            }
        ],
        "correct": "A",
        "explanation": "join() puts the thread into WAITING or TIMED_WAITING depending on overload."
    },
    {
        "title": "Lifecycle - Q0018",
        "text": "[Lifecycle] Which state does a thread enter when waiting for a lock?",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "WAITING"
            },
            {
                "letter": "B",
                "text": "BLOCKED"
            },
            {
                "letter": "C",
                "text": "RUNNABLE"
            },
            {
                "letter": "D",
                "text": "NEW"
            }
        ],
        "correct": "B",
        "explanation": "BLOCKED means waiting for a monitor lock."
    },
    {
        "title": "Lifecycle - Q0019",
        "text": "[Lifecycle] Which state does a thread enter after finishing execution?",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "RUNNABLE"
            },
            {
                "letter": "B",
                "text": "WAITING"
            },
            {
                "letter": "C",
                "text": "TERMINATED"
            },
            {
                "letter": "D",
                "text": "BLOCKED"
            }
        ],
        "correct": "C",
        "explanation": "TERMINATED means the thread has finished execution."
    },
    {
        "title": "Lifecycle - Q0020",
        "text": "[Lifecycle] Which method is used to get the current state of a thread?",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "getState()"
            },
            {
                "letter": "B",
                "text": "state()"
            },
            {
                "letter": "C",
                "text": "status()"
            },
            {
                "letter": "D",
                "text": "threadState()"
            }
        ],
        "correct": "A",
        "explanation": "getState() returns the current state of a thread."
    },
    {
        "title": "Lifecycle - Q0021",
        "text": "[Lifecycle] Which of the following is NOT a valid thread state in Java?",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "NEW"
            },
            {
                "letter": "B",
                "text": "RUNNABLE"
            },
            {
                "letter": "C",
                "text": "SUSPENDED"
            },
            {
                "letter": "D",
                "text": "TERMINATED"
            }
        ],
        "correct": "C",
        "explanation": "SUSPENDED is not a valid state in modern Java; it was deprecated long ago."
    },
    {
        "title": "Lifecycle - Q0022",
        "text": "[Lifecycle] Which method is used to voluntarily give up CPU control?",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "yield()"
            },
            {
                "letter": "B",
                "text": "sleep()"
            },
            {
                "letter": "C",
                "text": "wait()"
            },
            {
                "letter": "D",
                "text": "pause()"
            }
        ],
        "correct": "A",
        "explanation": "yield() hints the scheduler to give other threads a chance to run."
    },
    {
        "title": "Lifecycle - Q0023",
        "text": "[Lifecycle] Which method is used to pause a thread until another thread completes?",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "join()"
            },
            {
                "letter": "B",
                "text": "sleep()"
            },
            {
                "letter": "C",
                "text": "wait()"
            },
            {
                "letter": "D",
                "text": "yield()"
            }
        ],
        "correct": "A",
        "explanation": "join() makes the current thread wait until another thread finishes."
    },
    {
        "title": "Lifecycle - Q0024",
        "text": "[Lifecycle] Which method is used to check if a thread has finished execution?",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "isAlive()"
            },
            {
                "letter": "B",
                "text": "isFinished()"
            },
            {
                "letter": "C",
                "text": "isTerminated()"
            },
            {
                "letter": "D",
                "text": "done()"
            }
        ],
        "correct": "A",
        "explanation": "isAlive() returns false if the thread has finished execution."
    },
    {
        "title": "Lifecycle - Q0025",
        "text": "[Lifecycle] Which method is used to interrupt a thread?",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "stop()"
            },
            {
                "letter": "B",
                "text": "interrupt()"
            },
            {
                "letter": "C",
                "text": "terminate()"
            },
            {
                "letter": "D",
                "text": "exit()"
            }
        ],
        "correct": "B",
        "explanation": "interrupt() sets the interrupt flag of the thread."
    },
    {
        "title": "Lifecycle - Q0026",
        "text": "[Lifecycle] Which method clears the interrupt flag when checking it?",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "isInterrupted()"
            },
            {
                "letter": "B",
                "text": "interrupted()"
            },
            {
                "letter": "C",
                "text": "clearInterrupt()"
            },
            {
                "letter": "D",
                "text": "reset()"
            }
        ],
        "correct": "B",
        "explanation": "Thread.interrupted() checks and clears the interrupt flag."
    },
    {
        "title": "Lifecycle - Q0027",
        "text": "[Lifecycle] Which method is used to check if a thread has been interrupted without clearing the flag?",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "isInterrupted()"
            },
            {
                "letter": "B",
                "text": "interrupted()"
            },
            {
                "letter": "C",
                "text": "checkInterrupt()"
            },
            {
                "letter": "D",
                "text": "hasInterrupted()"
            }
        ],
        "correct": "A",
        "explanation": "isInterrupted() checks the interrupt status without clearing it."
    },
    {
        "title": "Lifecycle - Q0028",
        "text": "[Lifecycle] Which of the following is true about daemon threads?",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "They prevent JVM shutdown"
            },
            {
                "letter": "B",
                "text": "They run in the background and do not prevent JVM shutdown"
            },
            {
                "letter": "C",
                "text": "They are created by default"
            },
            {
                "letter": "D",
                "text": "They cannot be created by the user"
            }
        ],
        "correct": "B",
        "explanation": "Daemon threads run in the background and do not block JVM exit."
    },
    {
        "title": "Lifecycle - Q0029",
        "text": "[Lifecycle] Which method is used to mark a thread as daemon?",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "setDaemon()"
            },
            {
                "letter": "B",
                "text": "makeDaemon()"
            },
            {
                "letter": "C",
                "text": "daemon()"
            },
            {
                "letter": "D",
                "text": "setBackground()"
            }
        ],
        "correct": "A",
        "explanation": "setDaemon(true) marks a thread as daemon."
    },
    {
        "title": "Lifecycle - Q0030",
        "text": "[Lifecycle] Which method checks if a thread is a daemon?",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "isDaemon()"
            },
            {
                "letter": "B",
                "text": "checkDaemon()"
            },
            {
                "letter": "C",
                "text": "daemon()"
            },
            {
                "letter": "D",
                "text": "isBackground()"
            }
        ],
        "correct": "A",
        "explanation": "isDaemon() checks if a thread is a daemon."
    },
    {
        "title": "Lifecycle - Q0031",
        "text": "[Lifecycle] Which method is used to get the current thread?",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "Thread.current()"
            },
            {
                "letter": "B",
                "text": "Thread.get()"
            },
            {
                "letter": "C",
                "text": "Thread.currentThread()"
            },
            {
                "letter": "D",
                "text": "Thread.this()"
            }
        ],
        "correct": "C",
        "explanation": "Thread.currentThread() returns the current thread."
    },
    {
        "title": "Lifecycle - Q0032",
        "text": "[Lifecycle] Which method is used to get the name of a thread?",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "getThreadName()"
            },
            {
                "letter": "B",
                "text": "getName()"
            },
            {
                "letter": "C",
                "text": "name()"
            },
            {
                "letter": "D",
                "text": "threadName()"
            }
        ],
        "correct": "B",
        "explanation": "getName() returns the name of the thread."
    },
    {
        "title": "Lifecycle - Q0033",
        "text": "[Lifecycle] Which method is used to set the name of a thread?",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "setThreadName()"
            },
            {
                "letter": "B",
                "text": "setName()"
            },
            {
                "letter": "C",
                "text": "name()"
            },
            {
                "letter": "D",
                "text": "threadName()"
            }
        ],
        "correct": "B",
        "explanation": "setName() sets the name of the thread."
    },
    {
        "title": "Lifecycle - Q0034",
        "text": "[Lifecycle] Which method is used to get the ID of a thread?",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "getThreadId()"
            },
            {
                "letter": "B",
                "text": "getId()"
            },
            {
                "letter": "C",
                "text": "id()"
            },
            {
                "letter": "D",
                "text": "threadId()"
            }
        ],
        "correct": "B",
        "explanation": "getId() returns the ID of a thread."
    },
    {
        "title": "Lifecycle - Q0035",
        "text": "[Lifecycle] Which method is used to get the priority of a thread?",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "getPriority()"
            },
            {
                "letter": "B",
                "text": "priority()"
            },
            {
                "letter": "C",
                "text": "level()"
            },
            {
                "letter": "D",
                "text": "importance()"
            }
        ],
        "correct": "A",
        "explanation": "getPriority() returns the priority of a thread."
    },
    {
        "title": "Lifecycle - Q0036",
        "text": "[Lifecycle] Which method is used to set the priority of a thread?",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "setPriority()"
            },
            {
                "letter": "B",
                "text": "priority()"
            },
            {
                "letter": "C",
                "text": "setLevel()"
            },
            {
                "letter": "D",
                "text": "setImportance()"
            }
        ],
        "correct": "A",
        "explanation": "setPriority() sets the priority of a thread."
    },
    {
        "title": "Lifecycle - Q0037",
        "text": "[Lifecycle] What is the default priority of a thread?",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "1"
            },
            {
                "letter": "B",
                "text": "5"
            },
            {
                "letter": "C",
                "text": "7"
            },
            {
                "letter": "D",
                "text": "10"
            }
        ],
        "correct": "B",
        "explanation": "The default priority is 5 (NORM_PRIORITY)."
    },
    {
        "title": "Lifecycle - Q0038",
        "text": "[Lifecycle] Which method is used to get the state of a thread?",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "getState()"
            },
            {
                "letter": "B",
                "text": "state()"
            },
            {
                "letter": "C",
                "text": "status()"
            },
            {
                "letter": "D",
                "text": "threadState()"
            }
        ],
        "correct": "A",
        "explanation": "getState() returns the current state of a thread."
    },
    {
        "title": "Lifecycle - Q0039",
        "text": "[Lifecycle] Which of the following is NOT a valid Thread.State enum?",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "NEW"
            },
            {
                "letter": "B",
                "text": "RUNNABLE"
            },
            {
                "letter": "C",
                "text": "WAITING"
            },
            {
                "letter": "D",
                "text": "STOPPED"
            }
        ],
        "correct": "D",
        "explanation": "STOPPED is not a valid Thread.State enum."
    },
    {
        "title": "Lifecycle - Q0040",
        "text": "[Lifecycle] Which method is used to check if a thread is alive?",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "isAlive()"
            },
            {
                "letter": "B",
                "text": "alive()"
            },
            {
                "letter": "C",
                "text": "running()"
            },
            {
                "letter": "D",
                "text": "status()"
            }
        ],
        "correct": "A",
        "explanation": "isAlive() checks if a thread is still running."
    },
    {
        "title": "Lifecycle - Q0041",
        "text": "[Lifecycle] Which method is used to make a thread wait until notified?",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "wait()"
            },
            {
                "letter": "B",
                "text": "sleep()"
            },
            {
                "letter": "C",
                "text": "pause()"
            },
            {
                "letter": "D",
                "text": "yield()"
            }
        ],
        "correct": "A",
        "explanation": "wait() makes a thread wait until notified."
    },
    {
        "title": "Lifecycle - Q0042",
        "text": "[Lifecycle] Which method is used to wake up a waiting thread?",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "notify()"
            },
            {
                "letter": "B",
                "text": "wake()"
            },
            {
                "letter": "C",
                "text": "resume()"
            },
            {
                "letter": "D",
                "text": "signal()"
            }
        ],
        "correct": "A",
        "explanation": "notify() wakes up one waiting thread."
    },
    {
        "title": "Lifecycle - Q0043",
        "text": "[Lifecycle] Which method is used to wake up all waiting threads?",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "notifyAll()"
            },
            {
                "letter": "B",
                "text": "wakeAll()"
            },
            {
                "letter": "C",
                "text": "resumeAll()"
            },
            {
                "letter": "D",
                "text": "signalAll()"
            }
        ],
        "correct": "A",
        "explanation": "notifyAll() wakes up all waiting threads."
    },
    {
        "title": "Lifecycle - Q0044",
        "text": "[Lifecycle] Which method is used to pause a thread for a specific time?",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "sleep()"
            },
            {
                "letter": "B",
                "text": "wait()"
            },
            {
                "letter": "C",
                "text": "yield()"
            },
            {
                "letter": "D",
                "text": "pause()"
            }
        ],
        "correct": "A",
        "explanation": "sleep() pauses a thread for a specified time."
    },
    {
        "title": "Lifecycle - Q0045",
        "text": "[Lifecycle] Which method is used to make a thread wait for another thread to finish?",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "join()"
            },
            {
                "letter": "B",
                "text": "sleep()"
            },
            {
                "letter": "C",
                "text": "wait()"
            },
            {
                "letter": "D",
                "text": "yield()"
            }
        ],
        "correct": "A",
        "explanation": "join() makes one thread wait until another finishes."
    },
    {
        "title": "Lifecycle - Q0046",
        "text": "[Lifecycle] Which method is used to voluntarily give up CPU control?",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "yield()"
            },
            {
                "letter": "B",
                "text": "sleep()"
            },
            {
                "letter": "C",
                "text": "wait()"
            },
            {
                "letter": "D",
                "text": "pause()"
            }
        ],
        "correct": "A",
        "explanation": "yield() hints the scheduler to give other threads a chance to run."
    },
    {
        "title": "Lifecycle - Q0047",
        "text": "[Lifecycle] Which method is used to stop a thread safely?",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "stop()"
            },
            {
                "letter": "B",
                "text": "destroy()"
            },
            {
                "letter": "C",
                "text": "interrupt()"
            },
            {
                "letter": "D",
                "text": "exit()"
            }
        ],
        "correct": "C",
        "explanation": "interrupt() is the safe way to request a thread to stop."
    },
    {
        "title": "Lifecycle - Q0048",
        "text": "[Lifecycle] Which state does a thread enter after calling sleep()?",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "WAITING"
            },
            {
                "letter": "B",
                "text": "TIMED_WAITING"
            },
            {
                "letter": "C",
                "text": "BLOCKED"
            },
            {
                "letter": "D",
                "text": "TERMINATED"
            }
        ],
        "correct": "B",
        "explanation": "sleep() puts the thread into TIMED_WAITING."
    },
    {
        "title": "Lifecycle - Q0049",
        "text": "[Lifecycle] Which state does a thread enter after calling join()?",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "WAITING or TIMED_WAITING"
            },
            {
                "letter": "B",
                "text": "BLOCKED"
            },
            {
                "letter": "C",
                "text": "RUNNABLE"
            },
            {
                "letter": "D",
                "text": "TERMINATED"
            }
        ],
        "correct": "A",
        "explanation": "join() puts the thread into WAITING or TIMED_WAITING depending on overload."
    },
    {
        "title": "Lifecycle - Q0050",
        "text": "[Lifecycle] Which state does a thread enter after finishing execution?",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "RUNNABLE"
            },
            {
                "letter": "B",
                "text": "WAITING"
            },
            {
                "letter": "C",
                "text": "TERMINATED"
            },
            {
                "letter": "D",
                "text": "BLOCKED"
            }
        ],
        "correct": "C",
        "explanation": "TERMINATED means the thread has finished execution."
    },
    {
        "title": "Synchronization - Q0001",
        "text": "[Synchronization] What is synchronization in Java?",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "A mechanism to stop threads"
            },
            {
                "letter": "B",
                "text": "A mechanism to control access to shared resources"
            },
            {
                "letter": "C",
                "text": "A mechanism to create threads"
            },
            {
                "letter": "D",
                "text": "A mechanism to terminate JVM"
            }
        ],
        "correct": "B",
        "explanation": "Synchronization ensures that only one thread accesses a shared resource at a time."
    },
    {
        "title": "Synchronization - Q0002",
        "text": "[Synchronization] Which keyword is used to synchronize methods or blocks in Java?",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "sync"
            },
            {
                "letter": "B",
                "text": "synchronized"
            },
            {
                "letter": "C",
                "text": "lock"
            },
            {
                "letter": "D",
                "text": "atomic"
            }
        ],
        "correct": "B",
        "explanation": "The 'synchronized' keyword is used to synchronize methods or blocks."
    },
    {
        "title": "Synchronization - Q0003",
        "text": "[Synchronization] Which of the following can be synchronized?",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "Methods only"
            },
            {
                "letter": "B",
                "text": "Blocks only"
            },
            {
                "letter": "C",
                "text": "Both methods and blocks"
            },
            {
                "letter": "D",
                "text": "Classes only"
            }
        ],
        "correct": "C",
        "explanation": "Both methods and blocks can be synchronized in Java."
    },
    {
        "title": "Synchronization - Q0004",
        "text": "[Synchronization] What is the default lock used in synchronized methods?",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "Class object"
            },
            {
                "letter": "B",
                "text": "Object instance"
            },
            {
                "letter": "C",
                "text": "Thread object"
            },
            {
                "letter": "D",
                "text": "Monitor object"
            }
        ],
        "correct": "B",
        "explanation": "For instance methods, the lock is the object instance."
    },
    {
        "title": "Synchronization - Q0005",
        "text": "[Synchronization] What is the lock used for static synchronized methods?",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "Object instance"
            },
            {
                "letter": "B",
                "text": "Thread object"
            },
            {
                "letter": "C",
                "text": "Class object"
            },
            {
                "letter": "D",
                "text": "Monitor object"
            }
        ],
        "correct": "C",
        "explanation": "Static synchronized methods use the class object as the lock."
    },
    {
        "title": "Synchronization - Q0006",
        "text": "[Synchronization] Which of the following is true about synchronized blocks?",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "They can lock on any object"
            },
            {
                "letter": "B",
                "text": "They can only lock on 'this'"
            },
            {
                "letter": "C",
                "text": "They cannot be nested"
            },
            {
                "letter": "D",
                "text": "They cannot be used in static methods"
            }
        ],
        "correct": "A",
        "explanation": "Synchronized blocks can lock on any object reference."
    },
    {
        "title": "Synchronization - Q0007",
        "text": "[Synchronization] Which of the following is NOT a problem solved by synchronization?",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "Race conditions"
            },
            {
                "letter": "B",
                "text": "Data inconsistency"
            },
            {
                "letter": "C",
                "text": "Deadlocks"
            },
            {
                "letter": "D",
                "text": "Thread interference"
            }
        ],
        "correct": "C",
        "explanation": "Synchronization can cause deadlocks but does not solve them."
    },
    {
        "title": "Synchronization - Q0008",
        "text": "[Synchronization] Which method is used to make a thread wait inside a synchronized block?",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "sleep()"
            },
            {
                "letter": "B",
                "text": "wait()"
            },
            {
                "letter": "C",
                "text": "pause()"
            },
            {
                "letter": "D",
                "text": "yield()"
            }
        ],
        "correct": "B",
        "explanation": "wait() is used inside synchronized blocks to make a thread wait."
    },
    {
        "title": "Synchronization - Q0009",
        "text": "[Synchronization] Which method is used to wake up a single waiting thread?",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "notify()"
            },
            {
                "letter": "B",
                "text": "notifyAll()"
            },
            {
                "letter": "C",
                "text": "signal()"
            },
            {
                "letter": "D",
                "text": "resume()"
            }
        ],
        "correct": "A",
        "explanation": "notify() wakes up one waiting thread."
    },
    {
        "title": "Synchronization - Q0010",
        "text": "[Synchronization] Which method is used to wake up all waiting threads?",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "notify()"
            },
            {
                "letter": "B",
                "text": "notifyAll()"
            },
            {
                "letter": "C",
                "text": "signalAll()"
            },
            {
                "letter": "D",
                "text": "resumeAll()"
            }
        ],
        "correct": "B",
        "explanation": "notifyAll() wakes up all waiting threads."
    },
    {
        "title": "Synchronization - Q0011",
        "text": "[Synchronization] Which package provides Lock and ReentrantLock classes?",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "java.lang"
            },
            {
                "letter": "B",
                "text": "java.util.concurrent.locks"
            },
            {
                "letter": "C",
                "text": "java.util.concurrent"
            },
            {
                "letter": "D",
                "text": "java.thread"
            }
        ],
        "correct": "B",
        "explanation": "Lock and ReentrantLock are in java.util.concurrent.locks."
    },
    {
        "title": "Synchronization - Q0012",
        "text": "[Synchronization] Which interface is implemented by ReentrantLock?",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "Lock"
            },
            {
                "letter": "B",
                "text": "Runnable"
            },
            {
                "letter": "C",
                "text": "Callable"
            },
            {
                "letter": "D",
                "text": "ThreadSafe"
            }
        ],
        "correct": "A",
        "explanation": "ReentrantLock implements the Lock interface."
    },
    {
        "title": "Synchronization - Q0013",
        "text": "[Synchronization] Which method of Lock is used to acquire a lock?",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "lock()"
            },
            {
                "letter": "B",
                "text": "acquire()"
            },
            {
                "letter": "C",
                "text": "get()"
            },
            {
                "letter": "D",
                "text": "obtain()"
            }
        ],
        "correct": "A",
        "explanation": "lock() is used to acquire a lock."
    },
    {
        "title": "Synchronization - Q0014",
        "text": "[Synchronization] Which method of Lock is used to release a lock?",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "unlock()"
            },
            {
                "letter": "B",
                "text": "release()"
            },
            {
                "letter": "C",
                "text": "free()"
            },
            {
                "letter": "D",
                "text": "exit()"
            }
        ],
        "correct": "A",
        "explanation": "unlock() is used to release a lock."
    },
    {
        "title": "Synchronization - Q0015",
        "text": "[Synchronization] Which of the following is true about synchronized collections?",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "They are created using Collections.synchronizedXXX()"
            },
            {
                "letter": "B",
                "text": "They are created using Thread.synchronized()"
            },
            {
                "letter": "C",
                "text": "They are created using Lock.synchronized()"
            },
            {
                "letter": "D",
                "text": "They are created using Atomic classes"
            }
        ],
        "correct": "A",
        "explanation": "Collections.synchronizedXXX() creates synchronized collections."
    },
    {
        "title": "Synchronization - Q0016",
        "text": "[Synchronization] Which of the following is NOT a concurrent collection?",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "ConcurrentHashMap"
            },
            {
                "letter": "B",
                "text": "CopyOnWriteArrayList"
            },
            {
                "letter": "C",
                "text": "Vector"
            },
            {
                "letter": "D",
                "text": "ConcurrentLinkedQueue"
            }
        ],
        "correct": "C",
        "explanation": "Vector is synchronized but not part of java.util.concurrent."
    },
    {
        "title": "Synchronization - Q0017",
        "text": "[Synchronization] Which class provides atomic operations on integers?",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "AtomicInteger"
            },
            {
                "letter": "B",
                "text": "Integer"
            },
            {
                "letter": "C",
                "text": "AtomicNumber"
            },
            {
                "letter": "D",
                "text": "ConcurrentInteger"
            }
        ],
        "correct": "A",
        "explanation": "AtomicInteger provides atomic operations on integers."
    },
    {
        "title": "Synchronization - Q0018",
        "text": "[Synchronization] Which of the following is true about volatile variables?",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "They guarantee atomicity"
            },
            {
                "letter": "B",
                "text": "They guarantee visibility across threads"
            },
            {
                "letter": "C",
                "text": "They guarantee ordering of operations"
            },
            {
                "letter": "D",
                "text": "They guarantee mutual exclusion"
            }
        ],
        "correct": "B",
        "explanation": "Volatile ensures visibility but not atomicity."
    },
    {
        "title": "Synchronization - Q0019",
        "text": "[Synchronization] Which of the following is NOT a synchronization utility in java.util.concurrent?",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "Semaphore"
            },
            {
                "letter": "B",
                "text": "CountDownLatch"
            },
            {
                "letter": "C",
                "text": "CyclicBarrier"
            },
            {
                "letter": "D",
                "text": "ThreadGroup"
            }
        ],
        "correct": "D",
        "explanation": "ThreadGroup is not a synchronization utility."
    },
    {
        "title": "Synchronization - Q0020",
        "text": "[Synchronization] Which synchronization utility allows a fixed number of threads to access a resource?",
        "code": "",
        "options": [
            {
                "letter": "A",
                "text": "Semaphore"
            },
            {
                "letter": "B",
                "text": "CountDownLatch"
            },
            {
                "letter": "C",
                "text": "CyclicBarrier"
            },
            {
                "letter": "D",
                "text": "Exchanger"
            }
        ],
        "correct": "A",
        "explanation": "Semaphore controls the number of threads accessing a resource."
    }
]
