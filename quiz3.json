[
  {
    "title": "Syntax - Q0001",
    "text": "[Syntax] Which of the following is a valid Java identifier?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "myVar2"
      },
      {
        "letter": "B",
        "text": "2ndVar"
      },
      {
        "letter": "C",
        "text": "class"
      },
      {
        "letter": "D",
        "text": "my-var"
      }
    ],
    "correct": "A",
    "explanation": "Identifiers must not start with a digit and cannot contain hyphens or be Java keywords."
  },
  {
    "title": "Syntax - Q0002",
    "text": "[Syntax] What is wrong with the code snippet above?",
    "code": "int x = 5\nint y = 6;",
    "options": [
      {
        "letter": "A",
        "text": "Too many semicolons"
      },
      {
        "letter": "B",
        "text": "Missing semicolon after first declaration"
      },
      {
        "letter": "C",
        "text": "Wrong variable names"
      },
      {
        "letter": "D",
        "text": "Using int instead of Integer"
      }
    ],
    "correct": "B",
    "explanation": "Java statements must end with a semicolon; the first line is missing it."
  },
  {
    "title": "Syntax - Q0003",
    "text": "[Syntax] Which keyword is used to create a new object in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "create"
      },
      {
        "letter": "B",
        "text": "instantiate"
      },
      {
        "letter": "C",
        "text": "new"
      },
      {
        "letter": "D",
        "text": "make"
      }
    ],
    "correct": "C",
    "explanation": "The 'new' keyword allocates a new object and calls its constructor."
  },
  {
    "title": "Syntax - Q0004",
    "text": "[Syntax] Which access modifier allows visibility only within the same package?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "default (no modifier)"
      },
      {
        "letter": "B",
        "text": "private"
      },
      {
        "letter": "C",
        "text": "protected"
      },
      {
        "letter": "D",
        "text": "public"
      }
    ],
    "correct": "A",
    "explanation": "When no access modifier is specified, the member has package-private (default) access."
  },
  {
    "title": "Syntax - Q0005",
    "text": "[Syntax] Which method is the entry point of a standard Java application?",
    "code": "public class Main {\n    public static void main(String[] args) {\n        System.out.println(\"Hello World\");\n    }\n}",
    "options": [
      {
        "letter": "A",
        "text": "static void main()"
      },
      {
        "letter": "B",
        "text": "public void main()"
      },
      {
        "letter": "C",
        "text": "public static void main(String[] args)"
      },
      {
        "letter": "D",
        "text": "void main(String[])"
      }
    ],
    "correct": "C",
    "explanation": "The JVM looks for the 'public static void main(String[] args)' method as the program entry point."
  },
  {
    "title": "Syntax - Q0006",
    "text": "[Syntax] Which of the following is a valid Java identifier?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "2ndVar"
      },
      {
        "letter": "B",
        "text": "myVar2"
      },
      {
        "letter": "C",
        "text": "class"
      },
      {
        "letter": "D",
        "text": "my-var"
      }
    ],
    "correct": "B",
    "explanation": "Identifiers must not start with a digit and cannot contain hyphens or be Java keywords."
  },
  {
    "title": "Syntax - Q0007",
    "text": "[Syntax] What is wrong with the code snippet above?",
    "code": "int x = 5\nint y = 6;",
    "options": [
      {
        "letter": "A",
        "text": "Missing semicolon after first declaration"
      },
      {
        "letter": "B",
        "text": "Using int instead of Integer"
      },
      {
        "letter": "C",
        "text": "Too many semicolons"
      },
      {
        "letter": "D",
        "text": "Wrong variable names"
      }
    ],
    "correct": "A",
    "explanation": "Java statements must end with a semicolon; the first line is missing it."
  },
  {
    "title": "Syntax - Q0008",
    "text": "[Syntax] Which keyword is used to create a new object in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "instantiate"
      },
      {
        "letter": "B",
        "text": "create"
      },
      {
        "letter": "C",
        "text": "make"
      },
      {
        "letter": "D",
        "text": "new"
      }
    ],
    "correct": "D",
    "explanation": "The 'new' keyword allocates a new object and calls its constructor."
  },
  {
    "title": "Syntax - Q0009",
    "text": "[Syntax] Which access modifier allows visibility only within the same package?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "private"
      },
      {
        "letter": "B",
        "text": "default (no modifier)"
      },
      {
        "letter": "C",
        "text": "protected"
      },
      {
        "letter": "D",
        "text": "public"
      }
    ],
    "correct": "B",
    "explanation": "When no access modifier is specified, the member has package-private (default) access."
  },
  {
    "title": "Syntax - Q0010",
    "text": "[Syntax] Which method is the entry point of a standard Java application?",
    "code": "public class Main {\n    public static void main(String[] args) {\n        System.out.println(\"Hello World\");\n    }\n}",
    "options": [
      {
        "letter": "A",
        "text": "public static void main(String[] args)"
      },
      {
        "letter": "B",
        "text": "public void main()"
      },
      {
        "letter": "C",
        "text": "static void main()"
      },
      {
        "letter": "D",
        "text": "void main(String[])"
      }
    ],
    "correct": "A",
    "explanation": "The JVM looks for the 'public static void main(String[] args)' method as the program entry point."
  },
  {
    "title": "Syntax - Q0011",
    "text": "[Syntax] Which of the following is a valid Java identifier?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "class"
      },
      {
        "letter": "B",
        "text": "my-var"
      },
      {
        "letter": "C",
        "text": "2ndVar"
      },
      {
        "letter": "D",
        "text": "myVar2"
      }
    ],
    "correct": "D",
    "explanation": "Identifiers must not start with a digit and cannot contain hyphens or be Java keywords."
  },
  {
    "title": "Syntax - Q0012",
    "text": "[Syntax] What is wrong with the code snippet above?",
    "code": "int x = 5\nint y = 6;",
    "options": [
      {
        "letter": "A",
        "text": "Too many semicolons"
      },
      {
        "letter": "B",
        "text": "Wrong variable names"
      },
      {
        "letter": "C",
        "text": "Using int instead of Integer"
      },
      {
        "letter": "D",
        "text": "Missing semicolon after first declaration"
      }
    ],
    "correct": "D",
    "explanation": "Java statements must end with a semicolon; the first line is missing it."
  },
  {
    "title": "Syntax - Q0013",
    "text": "[Syntax] Which keyword is used to create a new object in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "instantiate"
      },
      {
        "letter": "B",
        "text": "make"
      },
      {
        "letter": "C",
        "text": "new"
      },
      {
        "letter": "D",
        "text": "create"
      }
    ],
    "correct": "C",
    "explanation": "The 'new' keyword allocates a new object and calls its constructor."
  },
  {
    "title": "Syntax - Q0014",
    "text": "[Syntax] Which access modifier allows visibility only within the same package?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "protected"
      },
      {
        "letter": "B",
        "text": "private"
      },
      {
        "letter": "C",
        "text": "public"
      },
      {
        "letter": "D",
        "text": "default (no modifier)"
      }
    ],
    "correct": "D",
    "explanation": "When no access modifier is specified, the member has package-private (default) access."
  },
  {
    "title": "Syntax - Q0015",
    "text": "[Syntax] Which method is the entry point of a standard Java application?",
    "code": "public class Main {\n    public static void main(String[] args) {\n        System.out.println(\"Hello World\");\n    }\n}",
    "options": [
      {
        "letter": "A",
        "text": "static void main()"
      },
      {
        "letter": "B",
        "text": "public static void main(String[] args)"
      },
      {
        "letter": "C",
        "text": "public void main()"
      },
      {
        "letter": "D",
        "text": "void main(String[])"
      }
    ],
    "correct": "B",
    "explanation": "The JVM looks for the 'public static void main(String[] args)' method as the program entry point."
  },
  {
    "title": "Syntax - Q0016",
    "text": "[Syntax] Which of the following is a valid Java identifier?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "myVar2"
      },
      {
        "letter": "B",
        "text": "class"
      },
      {
        "letter": "C",
        "text": "2ndVar"
      },
      {
        "letter": "D",
        "text": "my-var"
      }
    ],
    "correct": "A",
    "explanation": "Identifiers must not start with a digit and cannot contain hyphens or be Java keywords."
  },
  {
    "title": "Syntax - Q0017",
    "text": "[Syntax] What is wrong with the code snippet above?",
    "code": "int x = 5\nint y = 6;",
    "options": [
      {
        "letter": "A",
        "text": "Missing semicolon after first declaration"
      },
      {
        "letter": "B",
        "text": "Using int instead of Integer"
      },
      {
        "letter": "C",
        "text": "Too many semicolons"
      },
      {
        "letter": "D",
        "text": "Wrong variable names"
      }
    ],
    "correct": "A",
    "explanation": "Java statements must end with a semicolon; the first line is missing it."
  },
  {
    "title": "Syntax - Q0018",
    "text": "[Syntax] Which keyword is used to create a new object in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "new"
      },
      {
        "letter": "B",
        "text": "make"
      },
      {
        "letter": "C",
        "text": "create"
      },
      {
        "letter": "D",
        "text": "instantiate"
      }
    ],
    "correct": "A",
    "explanation": "The 'new' keyword allocates a new object and calls its constructor."
  },
  {
    "title": "Syntax - Q0019",
    "text": "[Syntax] Which access modifier allows visibility only within the same package?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "protected"
      },
      {
        "letter": "B",
        "text": "private"
      },
      {
        "letter": "C",
        "text": "default (no modifier)"
      },
      {
        "letter": "D",
        "text": "public"
      }
    ],
    "correct": "C",
    "explanation": "When no access modifier is specified, the member has package-private (default) access."
  },
  {
    "title": "Syntax - Q0020",
    "text": "[Syntax] Which method is the entry point of a standard Java application?",
    "code": "public class Main {\n    public static void main(String[] args) {\n        System.out.println(\"Hello World\");\n    }\n}",
    "options": [
      {
        "letter": "A",
        "text": "void main(String[])"
      },
      {
        "letter": "B",
        "text": "public static void main(String[] args)"
      },
      {
        "letter": "C",
        "text": "public void main()"
      },
      {
        "letter": "D",
        "text": "static void main()"
      }
    ],
    "correct": "B",
    "explanation": "The JVM looks for the 'public static void main(String[] args)' method as the program entry point."
  },
  {
    "title": "Syntax - Q0021",
    "text": "[Syntax] Which of the following is a valid Java identifier?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "2ndVar"
      },
      {
        "letter": "B",
        "text": "class"
      },
      {
        "letter": "C",
        "text": "myVar2"
      },
      {
        "letter": "D",
        "text": "my-var"
      }
    ],
    "correct": "C",
    "explanation": "Identifiers must not start with a digit and cannot contain hyphens or be Java keywords."
  },
  {
    "title": "Syntax - Q0022",
    "text": "[Syntax] What is wrong with the code snippet above?",
    "code": "int x = 5\nint y = 6;",
    "options": [
      {
        "letter": "A",
        "text": "Missing semicolon after first declaration"
      },
      {
        "letter": "B",
        "text": "Too many semicolons"
      },
      {
        "letter": "C",
        "text": "Wrong variable names"
      },
      {
        "letter": "D",
        "text": "Using int instead of Integer"
      }
    ],
    "correct": "A",
    "explanation": "Java statements must end with a semicolon; the first line is missing it."
  },
  {
    "title": "Syntax - Q0023",
    "text": "[Syntax] Which keyword is used to create a new object in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "new"
      },
      {
        "letter": "B",
        "text": "instantiate"
      },
      {
        "letter": "C",
        "text": "create"
      },
      {
        "letter": "D",
        "text": "make"
      }
    ],
    "correct": "A",
    "explanation": "The 'new' keyword allocates a new object and calls its constructor."
  },
  {
    "title": "Syntax - Q0024",
    "text": "[Syntax] Which access modifier allows visibility only within the same package?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "public"
      },
      {
        "letter": "B",
        "text": "private"
      },
      {
        "letter": "C",
        "text": "protected"
      },
      {
        "letter": "D",
        "text": "default (no modifier)"
      }
    ],
    "correct": "D",
    "explanation": "When no access modifier is specified, the member has package-private (default) access."
  },
  {
    "title": "Syntax - Q0025",
    "text": "[Syntax] Which method is the entry point of a standard Java application?",
    "code": "public class Main {\n    public static void main(String[] args) {\n        System.out.println(\"Hello World\");\n    }\n}",
    "options": [
      {
        "letter": "A",
        "text": "public void main()"
      },
      {
        "letter": "B",
        "text": "public static void main(String[] args)"
      },
      {
        "letter": "C",
        "text": "static void main()"
      },
      {
        "letter": "D",
        "text": "void main(String[])"
      }
    ],
    "correct": "B",
    "explanation": "The JVM looks for the 'public static void main(String[] args)' method as the program entry point."
  },
  {
    "title": "Syntax - Q0026",
    "text": "[Syntax] Which of the following is a valid Java identifier?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "my-var"
      },
      {
        "letter": "B",
        "text": "myVar2"
      },
      {
        "letter": "C",
        "text": "2ndVar"
      },
      {
        "letter": "D",
        "text": "class"
      }
    ],
    "correct": "B",
    "explanation": "Identifiers must not start with a digit and cannot contain hyphens or be Java keywords."
  },
  {
    "title": "Syntax - Q0027",
    "text": "[Syntax] What is wrong with the code snippet above?",
    "code": "int x = 5\nint y = 6;",
    "options": [
      {
        "letter": "A",
        "text": "Missing semicolon after first declaration"
      },
      {
        "letter": "B",
        "text": "Using int instead of Integer"
      },
      {
        "letter": "C",
        "text": "Wrong variable names"
      },
      {
        "letter": "D",
        "text": "Too many semicolons"
      }
    ],
    "correct": "A",
    "explanation": "Java statements must end with a semicolon; the first line is missing it."
  },
  {
    "title": "Syntax - Q0028",
    "text": "[Syntax] Which keyword is used to create a new object in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "new"
      },
      {
        "letter": "B",
        "text": "instantiate"
      },
      {
        "letter": "C",
        "text": "make"
      },
      {
        "letter": "D",
        "text": "create"
      }
    ],
    "correct": "A",
    "explanation": "The 'new' keyword allocates a new object and calls its constructor."
  },
  {
    "title": "Syntax - Q0029",
    "text": "[Syntax] Which access modifier allows visibility only within the same package?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "private"
      },
      {
        "letter": "B",
        "text": "protected"
      },
      {
        "letter": "C",
        "text": "default (no modifier)"
      },
      {
        "letter": "D",
        "text": "public"
      }
    ],
    "correct": "C",
    "explanation": "When no access modifier is specified, the member has package-private (default) access."
  },
  {
    "title": "Syntax - Q0030",
    "text": "[Syntax] Which method is the entry point of a standard Java application?",
    "code": "public class Main {\n    public static void main(String[] args) {\n        System.out.println(\"Hello World\");\n    }\n}",
    "options": [
      {
        "letter": "A",
        "text": "static void main()"
      },
      {
        "letter": "B",
        "text": "public static void main(String[] args)"
      },
      {
        "letter": "C",
        "text": "void main(String[])"
      },
      {
        "letter": "D",
        "text": "public void main()"
      }
    ],
    "correct": "B",
    "explanation": "The JVM looks for the 'public static void main(String[] args)' method as the program entry point."
  },
  {
    "title": "Syntax - Q0031",
    "text": "[Syntax] Which of the following is a valid Java identifier?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "myVar2"
      },
      {
        "letter": "B",
        "text": "2ndVar"
      },
      {
        "letter": "C",
        "text": "class"
      },
      {
        "letter": "D",
        "text": "my-var"
      }
    ],
    "correct": "A",
    "explanation": "Identifiers must not start with a digit and cannot contain hyphens or be Java keywords."
  },
  {
    "title": "Syntax - Q0032",
    "text": "[Syntax] What is wrong with the code snippet above?",
    "code": "int x = 5\nint y = 6;",
    "options": [
      {
        "letter": "A",
        "text": "Too many semicolons"
      },
      {
        "letter": "B",
        "text": "Wrong variable names"
      },
      {
        "letter": "C",
        "text": "Using int instead of Integer"
      },
      {
        "letter": "D",
        "text": "Missing semicolon after first declaration"
      }
    ],
    "correct": "D",
    "explanation": "Java statements must end with a semicolon; the first line is missing it."
  },
  {
    "title": "Syntax - Q0033",
    "text": "[Syntax] Which keyword is used to create a new object in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "instantiate"
      },
      {
        "letter": "B",
        "text": "make"
      },
      {
        "letter": "C",
        "text": "create"
      },
      {
        "letter": "D",
        "text": "new"
      }
    ],
    "correct": "D",
    "explanation": "The 'new' keyword allocates a new object and calls its constructor."
  },
  {
    "title": "Syntax - Q0034",
    "text": "[Syntax] Which access modifier allows visibility only within the same package?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "default (no modifier)"
      },
      {
        "letter": "B",
        "text": "protected"
      },
      {
        "letter": "C",
        "text": "public"
      },
      {
        "letter": "D",
        "text": "private"
      }
    ],
    "correct": "A",
    "explanation": "When no access modifier is specified, the member has package-private (default) access."
  },
  {
    "title": "Syntax - Q0035",
    "text": "[Syntax] Which method is the entry point of a standard Java application?",
    "code": "public class Main {\n    public static void main(String[] args) {\n        System.out.println(\"Hello World\");\n    }\n}",
    "options": [
      {
        "letter": "A",
        "text": "public void main()"
      },
      {
        "letter": "B",
        "text": "void main(String[])"
      },
      {
        "letter": "C",
        "text": "public static void main(String[] args)"
      },
      {
        "letter": "D",
        "text": "static void main()"
      }
    ],
    "correct": "C",
    "explanation": "The JVM looks for the 'public static void main(String[] args)' method as the program entry point."
  },
  {
    "title": "Syntax - Q0036",
    "text": "[Syntax] Which of the following is a valid Java identifier?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "2ndVar"
      },
      {
        "letter": "B",
        "text": "my-var"
      },
      {
        "letter": "C",
        "text": "myVar2"
      },
      {
        "letter": "D",
        "text": "class"
      }
    ],
    "correct": "C",
    "explanation": "Identifiers must not start with a digit and cannot contain hyphens or be Java keywords."
  },
  {
    "title": "Syntax - Q0037",
    "text": "[Syntax] What is wrong with the code snippet above?",
    "code": "int x = 5\nint y = 6;",
    "options": [
      {
        "letter": "A",
        "text": "Too many semicolons"
      },
      {
        "letter": "B",
        "text": "Wrong variable names"
      },
      {
        "letter": "C",
        "text": "Using int instead of Integer"
      },
      {
        "letter": "D",
        "text": "Missing semicolon after first declaration"
      }
    ],
    "correct": "D",
    "explanation": "Java statements must end with a semicolon; the first line is missing it."
  },
  {
    "title": "Syntax - Q0038",
    "text": "[Syntax] Which keyword is used to create a new object in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "create"
      },
      {
        "letter": "B",
        "text": "new"
      },
      {
        "letter": "C",
        "text": "instantiate"
      },
      {
        "letter": "D",
        "text": "make"
      }
    ],
    "correct": "B",
    "explanation": "The 'new' keyword allocates a new object and calls its constructor."
  },
  {
    "title": "Syntax - Q0039",
    "text": "[Syntax] Which access modifier allows visibility only within the same package?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "default (no modifier)"
      },
      {
        "letter": "B",
        "text": "private"
      },
      {
        "letter": "C",
        "text": "protected"
      },
      {
        "letter": "D",
        "text": "public"
      }
    ],
    "correct": "A",
    "explanation": "When no access modifier is specified, the member has package-private (default) access."
  },
  {
    "title": "Syntax - Q0040",
    "text": "[Syntax] Which method is the entry point of a standard Java application?",
    "code": "public class Main {\n    public static void main(String[] args) {\n        System.out.println(\"Hello World\");\n    }\n}",
    "options": [
      {
        "letter": "A",
        "text": "static void main()"
      },
      {
        "letter": "B",
        "text": "public static void main(String[] args)"
      },
      {
        "letter": "C",
        "text": "public void main()"
      },
      {
        "letter": "D",
        "text": "void main(String[])"
      }
    ],
    "correct": "B",
    "explanation": "The JVM looks for the 'public static void main(String[] args)' method as the program entry point."
  },
  {
    "title": "Syntax - Q0041",
    "text": "[Syntax] Which of the following is a valid Java identifier?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "2ndVar"
      },
      {
        "letter": "B",
        "text": "my-var"
      },
      {
        "letter": "C",
        "text": "class"
      },
      {
        "letter": "D",
        "text": "myVar2"
      }
    ],
    "correct": "D",
    "explanation": "Identifiers must not start with a digit and cannot contain hyphens or be Java keywords."
  },
  {
    "title": "Syntax - Q0042",
    "text": "[Syntax] What is wrong with the code snippet above?",
    "code": "int x = 5\nint y = 6;",
    "options": [
      {
        "letter": "A",
        "text": "Wrong variable names"
      },
      {
        "letter": "B",
        "text": "Using int instead of Integer"
      },
      {
        "letter": "C",
        "text": "Missing semicolon after first declaration"
      },
      {
        "letter": "D",
        "text": "Too many semicolons"
      }
    ],
    "correct": "C",
    "explanation": "Java statements must end with a semicolon; the first line is missing it."
  },
  {
    "title": "Syntax - Q0043",
    "text": "[Syntax] Which keyword is used to create a new object in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "create"
      },
      {
        "letter": "B",
        "text": "make"
      },
      {
        "letter": "C",
        "text": "new"
      },
      {
        "letter": "D",
        "text": "instantiate"
      }
    ],
    "correct": "C",
    "explanation": "The 'new' keyword allocates a new object and calls its constructor."
  },
  {
    "title": "Syntax - Q0044",
    "text": "[Syntax] Which access modifier allows visibility only within the same package?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "private"
      },
      {
        "letter": "B",
        "text": "default (no modifier)"
      },
      {
        "letter": "C",
        "text": "public"
      },
      {
        "letter": "D",
        "text": "protected"
      }
    ],
    "correct": "B",
    "explanation": "When no access modifier is specified, the member has package-private (default) access."
  },
  {
    "title": "Syntax - Q0045",
    "text": "[Syntax] Which method is the entry point of a standard Java application?",
    "code": "public class Main {\n    public static void main(String[] args) {\n        System.out.println(\"Hello World\");\n    }\n}",
    "options": [
      {
        "letter": "A",
        "text": "static void main()"
      },
      {
        "letter": "B",
        "text": "public static void main(String[] args)"
      },
      {
        "letter": "C",
        "text": "void main(String[])"
      },
      {
        "letter": "D",
        "text": "public void main()"
      }
    ],
    "correct": "B",
    "explanation": "The JVM looks for the 'public static void main(String[] args)' method as the program entry point."
  },
  {
    "title": "Syntax - Q0046",
    "text": "[Syntax] Which of the following is a valid Java identifier?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "class"
      },
      {
        "letter": "B",
        "text": "myVar2"
      },
      {
        "letter": "C",
        "text": "2ndVar"
      },
      {
        "letter": "D",
        "text": "my-var"
      }
    ],
    "correct": "B",
    "explanation": "Identifiers must not start with a digit and cannot contain hyphens or be Java keywords."
  },
  {
    "title": "Syntax - Q0047",
    "text": "[Syntax] What is wrong with the code snippet above?",
    "code": "int x = 5\nint y = 6;",
    "options": [
      {
        "letter": "A",
        "text": "Missing semicolon after first declaration"
      },
      {
        "letter": "B",
        "text": "Too many semicolons"
      },
      {
        "letter": "C",
        "text": "Wrong variable names"
      },
      {
        "letter": "D",
        "text": "Using int instead of Integer"
      }
    ],
    "correct": "A",
    "explanation": "Java statements must end with a semicolon; the first line is missing it."
  },
  {
    "title": "Syntax - Q0048",
    "text": "[Syntax] Which keyword is used to create a new object in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "new"
      },
      {
        "letter": "B",
        "text": "create"
      },
      {
        "letter": "C",
        "text": "instantiate"
      },
      {
        "letter": "D",
        "text": "make"
      }
    ],
    "correct": "A",
    "explanation": "The 'new' keyword allocates a new object and calls its constructor."
  },
  {
    "title": "Syntax - Q0049",
    "text": "[Syntax] Which access modifier allows visibility only within the same package?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "public"
      },
      {
        "letter": "B",
        "text": "protected"
      },
      {
        "letter": "C",
        "text": "private"
      },
      {
        "letter": "D",
        "text": "default (no modifier)"
      }
    ],
    "correct": "D",
    "explanation": "When no access modifier is specified, the member has package-private (default) access."
  },
  {
    "title": "Syntax - Q0050",
    "text": "[Syntax] Which method is the entry point of a standard Java application?",
    "code": "public class Main {\n    public static void main(String[] args) {\n        System.out.println(\"Hello World\");\n    }\n}",
    "options": [
      {
        "letter": "A",
        "text": "public void main()"
      },
      {
        "letter": "B",
        "text": "static void main()"
      },
      {
        "letter": "C",
        "text": "void main(String[])"
      },
      {
        "letter": "D",
        "text": "public static void main(String[] args)"
      }
    ],
    "correct": "D",
    "explanation": "The JVM looks for the 'public static void main(String[] args)' method as the program entry point."
  },
  {
    "title": "Syntax - Q0051",
    "text": "[Syntax] Which of the following is a valid Java identifier?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "my-var"
      },
      {
        "letter": "B",
        "text": "2ndVar"
      },
      {
        "letter": "C",
        "text": "myVar2"
      },
      {
        "letter": "D",
        "text": "class"
      }
    ],
    "correct": "C",
    "explanation": "Identifiers must not start with a digit and cannot contain hyphens or be Java keywords."
  },
  {
    "title": "Syntax - Q0052",
    "text": "[Syntax] What is wrong with the code snippet above?",
    "code": "int x = 5\nint y = 6;",
    "options": [
      {
        "letter": "A",
        "text": "Missing semicolon after first declaration"
      },
      {
        "letter": "B",
        "text": "Using int instead of Integer"
      },
      {
        "letter": "C",
        "text": "Too many semicolons"
      },
      {
        "letter": "D",
        "text": "Wrong variable names"
      }
    ],
    "correct": "A",
    "explanation": "Java statements must end with a semicolon; the first line is missing it."
  },
  {
    "title": "Syntax - Q0053",
    "text": "[Syntax] Which keyword is used to create a new object in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "create"
      },
      {
        "letter": "B",
        "text": "instantiate"
      },
      {
        "letter": "C",
        "text": "make"
      },
      {
        "letter": "D",
        "text": "new"
      }
    ],
    "correct": "D",
    "explanation": "The 'new' keyword allocates a new object and calls its constructor."
  },
  {
    "title": "Syntax - Q0054",
    "text": "[Syntax] Which access modifier allows visibility only within the same package?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "private"
      },
      {
        "letter": "B",
        "text": "public"
      },
      {
        "letter": "C",
        "text": "default (no modifier)"
      },
      {
        "letter": "D",
        "text": "protected"
      }
    ],
    "correct": "C",
    "explanation": "When no access modifier is specified, the member has package-private (default) access."
  },
  {
    "title": "Syntax - Q0055",
    "text": "[Syntax] Which method is the entry point of a standard Java application?",
    "code": "public class Main {\n    public static void main(String[] args) {\n        System.out.println(\"Hello World\");\n    }\n}",
    "options": [
      {
        "letter": "A",
        "text": "public void main()"
      },
      {
        "letter": "B",
        "text": "void main(String[])"
      },
      {
        "letter": "C",
        "text": "public static void main(String[] args)"
      },
      {
        "letter": "D",
        "text": "static void main()"
      }
    ],
    "correct": "C",
    "explanation": "The JVM looks for the 'public static void main(String[] args)' method as the program entry point."
  },
  {
    "title": "Syntax - Q0056",
    "text": "[Syntax] Which of the following is a valid Java identifier?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "my-var"
      },
      {
        "letter": "B",
        "text": "class"
      },
      {
        "letter": "C",
        "text": "myVar2"
      },
      {
        "letter": "D",
        "text": "2ndVar"
      }
    ],
    "correct": "C",
    "explanation": "Identifiers must not start with a digit and cannot contain hyphens or be Java keywords."
  },
  {
    "title": "Syntax - Q0057",
    "text": "[Syntax] What is wrong with the code snippet above?",
    "code": "int x = 5\nint y = 6;",
    "options": [
      {
        "letter": "A",
        "text": "Wrong variable names"
      },
      {
        "letter": "B",
        "text": "Too many semicolons"
      },
      {
        "letter": "C",
        "text": "Using int instead of Integer"
      },
      {
        "letter": "D",
        "text": "Missing semicolon after first declaration"
      }
    ],
    "correct": "D",
    "explanation": "Java statements must end with a semicolon; the first line is missing it."
  },
  {
    "title": "Syntax - Q0058",
    "text": "[Syntax] Which keyword is used to create a new object in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "instantiate"
      },
      {
        "letter": "B",
        "text": "make"
      },
      {
        "letter": "C",
        "text": "new"
      },
      {
        "letter": "D",
        "text": "create"
      }
    ],
    "correct": "C",
    "explanation": "The 'new' keyword allocates a new object and calls its constructor."
  },
  {
    "title": "Syntax - Q0059",
    "text": "[Syntax] Which access modifier allows visibility only within the same package?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "protected"
      },
      {
        "letter": "B",
        "text": "private"
      },
      {
        "letter": "C",
        "text": "default (no modifier)"
      },
      {
        "letter": "D",
        "text": "public"
      }
    ],
    "correct": "C",
    "explanation": "When no access modifier is specified, the member has package-private (default) access."
  },
  {
    "title": "Syntax - Q0060",
    "text": "[Syntax] Which method is the entry point of a standard Java application?",
    "code": "public class Main {\n    public static void main(String[] args) {\n        System.out.println(\"Hello World\");\n    }\n}",
    "options": [
      {
        "letter": "A",
        "text": "static void main()"
      },
      {
        "letter": "B",
        "text": "void main(String[])"
      },
      {
        "letter": "C",
        "text": "public static void main(String[] args)"
      },
      {
        "letter": "D",
        "text": "public void main()"
      }
    ],
    "correct": "C",
    "explanation": "The JVM looks for the 'public static void main(String[] args)' method as the program entry point."
  },
  {
    "title": "Syntax - Q0061",
    "text": "[Syntax] Which of the following is a valid Java identifier?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "myVar2"
      },
      {
        "letter": "B",
        "text": "2ndVar"
      },
      {
        "letter": "C",
        "text": "class"
      },
      {
        "letter": "D",
        "text": "my-var"
      }
    ],
    "correct": "A",
    "explanation": "Identifiers must not start with a digit and cannot contain hyphens or be Java keywords."
  },
  {
    "title": "Syntax - Q0062",
    "text": "[Syntax] What is wrong with the code snippet above?",
    "code": "int x = 5\nint y = 6;",
    "options": [
      {
        "letter": "A",
        "text": "Too many semicolons"
      },
      {
        "letter": "B",
        "text": "Wrong variable names"
      },
      {
        "letter": "C",
        "text": "Using int instead of Integer"
      },
      {
        "letter": "D",
        "text": "Missing semicolon after first declaration"
      }
    ],
    "correct": "D",
    "explanation": "Java statements must end with a semicolon; the first line is missing it."
  },
  {
    "title": "Syntax - Q0063",
    "text": "[Syntax] Which keyword is used to create a new object in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "make"
      },
      {
        "letter": "B",
        "text": "create"
      },
      {
        "letter": "C",
        "text": "new"
      },
      {
        "letter": "D",
        "text": "instantiate"
      }
    ],
    "correct": "C",
    "explanation": "The 'new' keyword allocates a new object and calls its constructor."
  },
  {
    "title": "Syntax - Q0064",
    "text": "[Syntax] Which access modifier allows visibility only within the same package?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "public"
      },
      {
        "letter": "B",
        "text": "protected"
      },
      {
        "letter": "C",
        "text": "private"
      },
      {
        "letter": "D",
        "text": "default (no modifier)"
      }
    ],
    "correct": "D",
    "explanation": "When no access modifier is specified, the member has package-private (default) access."
  },
  {
    "title": "Syntax - Q0065",
    "text": "[Syntax] Which method is the entry point of a standard Java application?",
    "code": "public class Main {\n    public static void main(String[] args) {\n        System.out.println(\"Hello World\");\n    }\n}",
    "options": [
      {
        "letter": "A",
        "text": "void main(String[])"
      },
      {
        "letter": "B",
        "text": "static void main()"
      },
      {
        "letter": "C",
        "text": "public void main()"
      },
      {
        "letter": "D",
        "text": "public static void main(String[] args)"
      }
    ],
    "correct": "D",
    "explanation": "The JVM looks for the 'public static void main(String[] args)' method as the program entry point."
  },
  {
    "title": "Syntax - Q0066",
    "text": "[Syntax] Which of the following is a valid Java identifier?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "2ndVar"
      },
      {
        "letter": "B",
        "text": "class"
      },
      {
        "letter": "C",
        "text": "myVar2"
      },
      {
        "letter": "D",
        "text": "my-var"
      }
    ],
    "correct": "C",
    "explanation": "Identifiers must not start with a digit and cannot contain hyphens or be Java keywords."
  },
  {
    "title": "Syntax - Q0067",
    "text": "[Syntax] What is wrong with the code snippet above?",
    "code": "int x = 5\nint y = 6;",
    "options": [
      {
        "letter": "A",
        "text": "Too many semicolons"
      },
      {
        "letter": "B",
        "text": "Missing semicolon after first declaration"
      },
      {
        "letter": "C",
        "text": "Wrong variable names"
      },
      {
        "letter": "D",
        "text": "Using int instead of Integer"
      }
    ],
    "correct": "B",
    "explanation": "Java statements must end with a semicolon; the first line is missing it."
  },
  {
    "title": "Syntax - Q0068",
    "text": "[Syntax] Which keyword is used to create a new object in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "make"
      },
      {
        "letter": "B",
        "text": "instantiate"
      },
      {
        "letter": "C",
        "text": "create"
      },
      {
        "letter": "D",
        "text": "new"
      }
    ],
    "correct": "D",
    "explanation": "The 'new' keyword allocates a new object and calls its constructor."
  },
  {
    "title": "Syntax - Q0069",
    "text": "[Syntax] Which access modifier allows visibility only within the same package?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "default (no modifier)"
      },
      {
        "letter": "B",
        "text": "protected"
      },
      {
        "letter": "C",
        "text": "private"
      },
      {
        "letter": "D",
        "text": "public"
      }
    ],
    "correct": "A",
    "explanation": "When no access modifier is specified, the member has package-private (default) access."
  },
  {
    "title": "Syntax - Q0070",
    "text": "[Syntax] Which method is the entry point of a standard Java application?",
    "code": "public class Main {\n    public static void main(String[] args) {\n        System.out.println(\"Hello World\");\n    }\n}",
    "options": [
      {
        "letter": "A",
        "text": "public static void main(String[] args)"
      },
      {
        "letter": "B",
        "text": "void main(String[])"
      },
      {
        "letter": "C",
        "text": "public void main()"
      },
      {
        "letter": "D",
        "text": "static void main()"
      }
    ],
    "correct": "A",
    "explanation": "The JVM looks for the 'public static void main(String[] args)' method as the program entry point."
  },
  {
    "title": "Syntax - Q0071",
    "text": "[Syntax] Which of the following is a valid Java identifier?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "myVar2"
      },
      {
        "letter": "B",
        "text": "2ndVar"
      },
      {
        "letter": "C",
        "text": "my-var"
      },
      {
        "letter": "D",
        "text": "class"
      }
    ],
    "correct": "A",
    "explanation": "Identifiers must not start with a digit and cannot contain hyphens or be Java keywords."
  },
  {
    "title": "Syntax - Q0072",
    "text": "[Syntax] What is wrong with the code snippet above?",
    "code": "int x = 5\nint y = 6;",
    "options": [
      {
        "letter": "A",
        "text": "Using int instead of Integer"
      },
      {
        "letter": "B",
        "text": "Missing semicolon after first declaration"
      },
      {
        "letter": "C",
        "text": "Wrong variable names"
      },
      {
        "letter": "D",
        "text": "Too many semicolons"
      }
    ],
    "correct": "B",
    "explanation": "Java statements must end with a semicolon; the first line is missing it."
  },
  {
    "title": "Syntax - Q0073",
    "text": "[Syntax] Which keyword is used to create a new object in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "make"
      },
      {
        "letter": "B",
        "text": "instantiate"
      },
      {
        "letter": "C",
        "text": "create"
      },
      {
        "letter": "D",
        "text": "new"
      }
    ],
    "correct": "D",
    "explanation": "The 'new' keyword allocates a new object and calls its constructor."
  },
  {
    "title": "Syntax - Q0074",
    "text": "[Syntax] Which access modifier allows visibility only within the same package?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "default (no modifier)"
      },
      {
        "letter": "B",
        "text": "public"
      },
      {
        "letter": "C",
        "text": "private"
      },
      {
        "letter": "D",
        "text": "protected"
      }
    ],
    "correct": "A",
    "explanation": "When no access modifier is specified, the member has package-private (default) access."
  },
  {
    "title": "Syntax - Q0075",
    "text": "[Syntax] Which method is the entry point of a standard Java application?",
    "code": "public class Main {\n    public static void main(String[] args) {\n        System.out.println(\"Hello World\");\n    }\n}",
    "options": [
      {
        "letter": "A",
        "text": "public static void main(String[] args)"
      },
      {
        "letter": "B",
        "text": "void main(String[])"
      },
      {
        "letter": "C",
        "text": "static void main()"
      },
      {
        "letter": "D",
        "text": "public void main()"
      }
    ],
    "correct": "A",
    "explanation": "The JVM looks for the 'public static void main(String[] args)' method as the program entry point."
  },
  {
    "title": "Syntax - Q0076",
    "text": "[Syntax] Which of the following is a valid Java identifier?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "my-var"
      },
      {
        "letter": "B",
        "text": "2ndVar"
      },
      {
        "letter": "C",
        "text": "class"
      },
      {
        "letter": "D",
        "text": "myVar2"
      }
    ],
    "correct": "D",
    "explanation": "Identifiers must not start with a digit and cannot contain hyphens or be Java keywords."
  },
  {
    "title": "Syntax - Q0077",
    "text": "[Syntax] What is wrong with the code snippet above?",
    "code": "int x = 5\nint y = 6;",
    "options": [
      {
        "letter": "A",
        "text": "Using int instead of Integer"
      },
      {
        "letter": "B",
        "text": "Missing semicolon after first declaration"
      },
      {
        "letter": "C",
        "text": "Wrong variable names"
      },
      {
        "letter": "D",
        "text": "Too many semicolons"
      }
    ],
    "correct": "B",
    "explanation": "Java statements must end with a semicolon; the first line is missing it."
  },
  {
    "title": "Syntax - Q0078",
    "text": "[Syntax] Which keyword is used to create a new object in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "make"
      },
      {
        "letter": "B",
        "text": "create"
      },
      {
        "letter": "C",
        "text": "instantiate"
      },
      {
        "letter": "D",
        "text": "new"
      }
    ],
    "correct": "D",
    "explanation": "The 'new' keyword allocates a new object and calls its constructor."
  },
  {
    "title": "Syntax - Q0079",
    "text": "[Syntax] Which access modifier allows visibility only within the same package?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "default (no modifier)"
      },
      {
        "letter": "B",
        "text": "public"
      },
      {
        "letter": "C",
        "text": "protected"
      },
      {
        "letter": "D",
        "text": "private"
      }
    ],
    "correct": "A",
    "explanation": "When no access modifier is specified, the member has package-private (default) access."
  },
  {
    "title": "Syntax - Q0080",
    "text": "[Syntax] Which method is the entry point of a standard Java application?",
    "code": "public class Main {\n    public static void main(String[] args) {\n        System.out.println(\"Hello World\");\n    }\n}",
    "options": [
      {
        "letter": "A",
        "text": "public static void main(String[] args)"
      },
      {
        "letter": "B",
        "text": "void main(String[])"
      },
      {
        "letter": "C",
        "text": "public void main()"
      },
      {
        "letter": "D",
        "text": "static void main()"
      }
    ],
    "correct": "A",
    "explanation": "The JVM looks for the 'public static void main(String[] args)' method as the program entry point."
  },
  {
    "title": "Syntax - Q0081",
    "text": "[Syntax] Which of the following is a valid Java identifier?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "my-var"
      },
      {
        "letter": "B",
        "text": "2ndVar"
      },
      {
        "letter": "C",
        "text": "myVar2"
      },
      {
        "letter": "D",
        "text": "class"
      }
    ],
    "correct": "C",
    "explanation": "Identifiers must not start with a digit and cannot contain hyphens or be Java keywords."
  },
  {
    "title": "Syntax - Q0082",
    "text": "[Syntax] What is wrong with the code snippet above?",
    "code": "int x = 5\nint y = 6;",
    "options": [
      {
        "letter": "A",
        "text": "Too many semicolons"
      },
      {
        "letter": "B",
        "text": "Using int instead of Integer"
      },
      {
        "letter": "C",
        "text": "Wrong variable names"
      },
      {
        "letter": "D",
        "text": "Missing semicolon after first declaration"
      }
    ],
    "correct": "D",
    "explanation": "Java statements must end with a semicolon; the first line is missing it."
  },
  {
    "title": "Syntax - Q0083",
    "text": "[Syntax] Which keyword is used to create a new object in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "new"
      },
      {
        "letter": "B",
        "text": "make"
      },
      {
        "letter": "C",
        "text": "instantiate"
      },
      {
        "letter": "D",
        "text": "create"
      }
    ],
    "correct": "A",
    "explanation": "The 'new' keyword allocates a new object and calls its constructor."
  },
  {
    "title": "Syntax - Q0084",
    "text": "[Syntax] Which access modifier allows visibility only within the same package?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "private"
      },
      {
        "letter": "B",
        "text": "default (no modifier)"
      },
      {
        "letter": "C",
        "text": "public"
      },
      {
        "letter": "D",
        "text": "protected"
      }
    ],
    "correct": "B",
    "explanation": "When no access modifier is specified, the member has package-private (default) access."
  },
  {
    "title": "Syntax - Q0085",
    "text": "[Syntax] Which method is the entry point of a standard Java application?",
    "code": "public class Main {\n    public static void main(String[] args) {\n        System.out.println(\"Hello World\");\n    }\n}",
    "options": [
      {
        "letter": "A",
        "text": "public void main()"
      },
      {
        "letter": "B",
        "text": "static void main()"
      },
      {
        "letter": "C",
        "text": "public static void main(String[] args)"
      },
      {
        "letter": "D",
        "text": "void main(String[])"
      }
    ],
    "correct": "C",
    "explanation": "The JVM looks for the 'public static void main(String[] args)' method as the program entry point."
  },
  {
    "title": "Syntax - Q0086",
    "text": "[Syntax] Which of the following is a valid Java identifier?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "class"
      },
      {
        "letter": "B",
        "text": "2ndVar"
      },
      {
        "letter": "C",
        "text": "my-var"
      },
      {
        "letter": "D",
        "text": "myVar2"
      }
    ],
    "correct": "D",
    "explanation": "Identifiers must not start with a digit and cannot contain hyphens or be Java keywords."
  },
  {
    "title": "Syntax - Q0087",
    "text": "[Syntax] What is wrong with the code snippet above?",
    "code": "int x = 5\nint y = 6;",
    "options": [
      {
        "letter": "A",
        "text": "Missing semicolon after first declaration"
      },
      {
        "letter": "B",
        "text": "Using int instead of Integer"
      },
      {
        "letter": "C",
        "text": "Wrong variable names"
      },
      {
        "letter": "D",
        "text": "Too many semicolons"
      }
    ],
    "correct": "A",
    "explanation": "Java statements must end with a semicolon; the first line is missing it."
  },
  {
    "title": "Syntax - Q0088",
    "text": "[Syntax] Which keyword is used to create a new object in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "create"
      },
      {
        "letter": "B",
        "text": "new"
      },
      {
        "letter": "C",
        "text": "instantiate"
      },
      {
        "letter": "D",
        "text": "make"
      }
    ],
    "correct": "B",
    "explanation": "The 'new' keyword allocates a new object and calls its constructor."
  },
  {
    "title": "Syntax - Q0089",
    "text": "[Syntax] Which access modifier allows visibility only within the same package?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "public"
      },
      {
        "letter": "B",
        "text": "private"
      },
      {
        "letter": "C",
        "text": "default (no modifier)"
      },
      {
        "letter": "D",
        "text": "protected"
      }
    ],
    "correct": "C",
    "explanation": "When no access modifier is specified, the member has package-private (default) access."
  },
  {
    "title": "Syntax - Q0090",
    "text": "[Syntax] Which method is the entry point of a standard Java application?",
    "code": "public class Main {\n    public static void main(String[] args) {\n        System.out.println(\"Hello World\");\n    }\n}",
    "options": [
      {
        "letter": "A",
        "text": "public static void main(String[] args)"
      },
      {
        "letter": "B",
        "text": "void main(String[])"
      },
      {
        "letter": "C",
        "text": "static void main()"
      },
      {
        "letter": "D",
        "text": "public void main()"
      }
    ],
    "correct": "A",
    "explanation": "The JVM looks for the 'public static void main(String[] args)' method as the program entry point."
  },
  {
    "title": "Syntax - Q0091",
    "text": "[Syntax] Which of the following is a valid Java identifier?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "2ndVar"
      },
      {
        "letter": "B",
        "text": "myVar2"
      },
      {
        "letter": "C",
        "text": "my-var"
      },
      {
        "letter": "D",
        "text": "class"
      }
    ],
    "correct": "B",
    "explanation": "Identifiers must not start with a digit and cannot contain hyphens or be Java keywords."
  },
  {
    "title": "Syntax - Q0092",
    "text": "[Syntax] What is wrong with the code snippet above?",
    "code": "int x = 5\nint y = 6;",
    "options": [
      {
        "letter": "A",
        "text": "Using int instead of Integer"
      },
      {
        "letter": "B",
        "text": "Too many semicolons"
      },
      {
        "letter": "C",
        "text": "Wrong variable names"
      },
      {
        "letter": "D",
        "text": "Missing semicolon after first declaration"
      }
    ],
    "correct": "D",
    "explanation": "Java statements must end with a semicolon; the first line is missing it."
  },
  {
    "title": "Syntax - Q0093",
    "text": "[Syntax] Which keyword is used to create a new object in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "make"
      },
      {
        "letter": "B",
        "text": "instantiate"
      },
      {
        "letter": "C",
        "text": "new"
      },
      {
        "letter": "D",
        "text": "create"
      }
    ],
    "correct": "C",
    "explanation": "The 'new' keyword allocates a new object and calls its constructor."
  },
  {
    "title": "Syntax - Q0094",
    "text": "[Syntax] Which access modifier allows visibility only within the same package?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "protected"
      },
      {
        "letter": "B",
        "text": "default (no modifier)"
      },
      {
        "letter": "C",
        "text": "public"
      },
      {
        "letter": "D",
        "text": "private"
      }
    ],
    "correct": "B",
    "explanation": "When no access modifier is specified, the member has package-private (default) access."
  },
  {
    "title": "Syntax - Q0095",
    "text": "[Syntax] Which method is the entry point of a standard Java application?",
    "code": "public class Main {\n    public static void main(String[] args) {\n        System.out.println(\"Hello World\");\n    }\n}",
    "options": [
      {
        "letter": "A",
        "text": "static void main()"
      },
      {
        "letter": "B",
        "text": "void main(String[])"
      },
      {
        "letter": "C",
        "text": "public static void main(String[] args)"
      },
      {
        "letter": "D",
        "text": "public void main()"
      }
    ],
    "correct": "C",
    "explanation": "The JVM looks for the 'public static void main(String[] args)' method as the program entry point."
  },
  {
    "title": "Syntax - Q0096",
    "text": "[Syntax] Which of the following is a valid Java identifier?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "myVar2"
      },
      {
        "letter": "B",
        "text": "my-var"
      },
      {
        "letter": "C",
        "text": "class"
      },
      {
        "letter": "D",
        "text": "2ndVar"
      }
    ],
    "correct": "A",
    "explanation": "Identifiers must not start with a digit and cannot contain hyphens or be Java keywords."
  },
  {
    "title": "Syntax - Q0097",
    "text": "[Syntax] What is wrong with the code snippet above?",
    "code": "int x = 5\nint y = 6;",
    "options": [
      {
        "letter": "A",
        "text": "Too many semicolons"
      },
      {
        "letter": "B",
        "text": "Using int instead of Integer"
      },
      {
        "letter": "C",
        "text": "Missing semicolon after first declaration"
      },
      {
        "letter": "D",
        "text": "Wrong variable names"
      }
    ],
    "correct": "C",
    "explanation": "Java statements must end with a semicolon; the first line is missing it."
  },
  {
    "title": "Syntax - Q0098",
    "text": "[Syntax] Which keyword is used to create a new object in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "new"
      },
      {
        "letter": "B",
        "text": "make"
      },
      {
        "letter": "C",
        "text": "instantiate"
      },
      {
        "letter": "D",
        "text": "create"
      }
    ],
    "correct": "A",
    "explanation": "The 'new' keyword allocates a new object and calls its constructor."
  },
  {
    "title": "Syntax - Q0099",
    "text": "[Syntax] Which access modifier allows visibility only within the same package?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "default (no modifier)"
      },
      {
        "letter": "B",
        "text": "public"
      },
      {
        "letter": "C",
        "text": "private"
      },
      {
        "letter": "D",
        "text": "protected"
      }
    ],
    "correct": "A",
    "explanation": "When no access modifier is specified, the member has package-private (default) access."
  },
  {
    "title": "Syntax - Q0100",
    "text": "[Syntax] Which method is the entry point of a standard Java application?",
    "code": "public class Main {\n    public static void main(String[] args) {\n        System.out.println(\"Hello World\");\n    }\n}",
    "options": [
      {
        "letter": "A",
        "text": "void main(String[])"
      },
      {
        "letter": "B",
        "text": "public static void main(String[] args)"
      },
      {
        "letter": "C",
        "text": "static void main()"
      },
      {
        "letter": "D",
        "text": "public void main()"
      }
    ],
    "correct": "B",
    "explanation": "The JVM looks for the 'public static void main(String[] args)' method as the program entry point."
  },
  {
    "title": "Syntax - Q0101",
    "text": "[Syntax] Which of the following is a valid Java identifier?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "myVar2"
      },
      {
        "letter": "B",
        "text": "class"
      },
      {
        "letter": "C",
        "text": "2ndVar"
      },
      {
        "letter": "D",
        "text": "my-var"
      }
    ],
    "correct": "A",
    "explanation": "Identifiers must not start with a digit and cannot contain hyphens or be Java keywords."
  },
  {
    "title": "Syntax - Q0102",
    "text": "[Syntax] What is wrong with the code snippet above?",
    "code": "int x = 5\nint y = 6;",
    "options": [
      {
        "letter": "A",
        "text": "Wrong variable names"
      },
      {
        "letter": "B",
        "text": "Using int instead of Integer"
      },
      {
        "letter": "C",
        "text": "Missing semicolon after first declaration"
      },
      {
        "letter": "D",
        "text": "Too many semicolons"
      }
    ],
    "correct": "C",
    "explanation": "Java statements must end with a semicolon; the first line is missing it."
  },
  {
    "title": "Syntax - Q0103",
    "text": "[Syntax] Which keyword is used to create a new object in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "instantiate"
      },
      {
        "letter": "B",
        "text": "make"
      },
      {
        "letter": "C",
        "text": "create"
      },
      {
        "letter": "D",
        "text": "new"
      }
    ],
    "correct": "D",
    "explanation": "The 'new' keyword allocates a new object and calls its constructor."
  },
  {
    "title": "Syntax - Q0104",
    "text": "[Syntax] Which access modifier allows visibility only within the same package?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "protected"
      },
      {
        "letter": "B",
        "text": "default (no modifier)"
      },
      {
        "letter": "C",
        "text": "private"
      },
      {
        "letter": "D",
        "text": "public"
      }
    ],
    "correct": "B",
    "explanation": "When no access modifier is specified, the member has package-private (default) access."
  },
  {
    "title": "Syntax - Q0105",
    "text": "[Syntax] Which method is the entry point of a standard Java application?",
    "code": "public class Main {\n    public static void main(String[] args) {\n        System.out.println(\"Hello World\");\n    }\n}",
    "options": [
      {
        "letter": "A",
        "text": "public static void main(String[] args)"
      },
      {
        "letter": "B",
        "text": "static void main()"
      },
      {
        "letter": "C",
        "text": "void main(String[])"
      },
      {
        "letter": "D",
        "text": "public void main()"
      }
    ],
    "correct": "A",
    "explanation": "The JVM looks for the 'public static void main(String[] args)' method as the program entry point."
  },
  {
    "title": "Syntax - Q0106",
    "text": "[Syntax] Which of the following is a valid Java identifier?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "my-var"
      },
      {
        "letter": "B",
        "text": "class"
      },
      {
        "letter": "C",
        "text": "myVar2"
      },
      {
        "letter": "D",
        "text": "2ndVar"
      }
    ],
    "correct": "C",
    "explanation": "Identifiers must not start with a digit and cannot contain hyphens or be Java keywords."
  },
  {
    "title": "Syntax - Q0107",
    "text": "[Syntax] What is wrong with the code snippet above?",
    "code": "int x = 5\nint y = 6;",
    "options": [
      {
        "letter": "A",
        "text": "Too many semicolons"
      },
      {
        "letter": "B",
        "text": "Missing semicolon after first declaration"
      },
      {
        "letter": "C",
        "text": "Using int instead of Integer"
      },
      {
        "letter": "D",
        "text": "Wrong variable names"
      }
    ],
    "correct": "B",
    "explanation": "Java statements must end with a semicolon; the first line is missing it."
  },
  {
    "title": "Syntax - Q0108",
    "text": "[Syntax] Which keyword is used to create a new object in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "instantiate"
      },
      {
        "letter": "B",
        "text": "create"
      },
      {
        "letter": "C",
        "text": "make"
      },
      {
        "letter": "D",
        "text": "new"
      }
    ],
    "correct": "D",
    "explanation": "The 'new' keyword allocates a new object and calls its constructor."
  },
  {
    "title": "Syntax - Q0109",
    "text": "[Syntax] Which access modifier allows visibility only within the same package?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "private"
      },
      {
        "letter": "B",
        "text": "public"
      },
      {
        "letter": "C",
        "text": "protected"
      },
      {
        "letter": "D",
        "text": "default (no modifier)"
      }
    ],
    "correct": "D",
    "explanation": "When no access modifier is specified, the member has package-private (default) access."
  },
  {
    "title": "Syntax - Q0110",
    "text": "[Syntax] Which method is the entry point of a standard Java application?",
    "code": "public class Main {\n    public static void main(String[] args) {\n        System.out.println(\"Hello World\");\n    }\n}",
    "options": [
      {
        "letter": "A",
        "text": "void main(String[])"
      },
      {
        "letter": "B",
        "text": "public void main()"
      },
      {
        "letter": "C",
        "text": "public static void main(String[] args)"
      },
      {
        "letter": "D",
        "text": "static void main()"
      }
    ],
    "correct": "C",
    "explanation": "The JVM looks for the 'public static void main(String[] args)' method as the program entry point."
  },
  {
    "title": "Syntax - Q0111",
    "text": "[Syntax] Which of the following is a valid Java identifier?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "2ndVar"
      },
      {
        "letter": "B",
        "text": "myVar2"
      },
      {
        "letter": "C",
        "text": "class"
      },
      {
        "letter": "D",
        "text": "my-var"
      }
    ],
    "correct": "B",
    "explanation": "Identifiers must not start with a digit and cannot contain hyphens or be Java keywords."
  },
  {
    "title": "Syntax - Q0112",
    "text": "[Syntax] What is wrong with the code snippet above?",
    "code": "int x = 5\nint y = 6;",
    "options": [
      {
        "letter": "A",
        "text": "Too many semicolons"
      },
      {
        "letter": "B",
        "text": "Using int instead of Integer"
      },
      {
        "letter": "C",
        "text": "Missing semicolon after first declaration"
      },
      {
        "letter": "D",
        "text": "Wrong variable names"
      }
    ],
    "correct": "C",
    "explanation": "Java statements must end with a semicolon; the first line is missing it."
  },
  {
    "title": "Syntax - Q0113",
    "text": "[Syntax] Which keyword is used to create a new object in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "new"
      },
      {
        "letter": "B",
        "text": "make"
      },
      {
        "letter": "C",
        "text": "instantiate"
      },
      {
        "letter": "D",
        "text": "create"
      }
    ],
    "correct": "A",
    "explanation": "The 'new' keyword allocates a new object and calls its constructor."
  },
  {
    "title": "Syntax - Q0114",
    "text": "[Syntax] Which access modifier allows visibility only within the same package?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "protected"
      },
      {
        "letter": "B",
        "text": "default (no modifier)"
      },
      {
        "letter": "C",
        "text": "private"
      },
      {
        "letter": "D",
        "text": "public"
      }
    ],
    "correct": "B",
    "explanation": "When no access modifier is specified, the member has package-private (default) access."
  },
  {
    "title": "Syntax - Q0115",
    "text": "[Syntax] Which method is the entry point of a standard Java application?",
    "code": "public class Main {\n    public static void main(String[] args) {\n        System.out.println(\"Hello World\");\n    }\n}",
    "options": [
      {
        "letter": "A",
        "text": "public void main()"
      },
      {
        "letter": "B",
        "text": "public static void main(String[] args)"
      },
      {
        "letter": "C",
        "text": "static void main()"
      },
      {
        "letter": "D",
        "text": "void main(String[])"
      }
    ],
    "correct": "B",
    "explanation": "The JVM looks for the 'public static void main(String[] args)' method as the program entry point."
  },
  {
    "title": "Syntax - Q0116",
    "text": "[Syntax] Which of the following is a valid Java identifier?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "my-var"
      },
      {
        "letter": "B",
        "text": "class"
      },
      {
        "letter": "C",
        "text": "2ndVar"
      },
      {
        "letter": "D",
        "text": "myVar2"
      }
    ],
    "correct": "D",
    "explanation": "Identifiers must not start with a digit and cannot contain hyphens or be Java keywords."
  },
  {
    "title": "Syntax - Q0117",
    "text": "[Syntax] What is wrong with the code snippet above?",
    "code": "int x = 5\nint y = 6;",
    "options": [
      {
        "letter": "A",
        "text": "Wrong variable names"
      },
      {
        "letter": "B",
        "text": "Missing semicolon after first declaration"
      },
      {
        "letter": "C",
        "text": "Using int instead of Integer"
      },
      {
        "letter": "D",
        "text": "Too many semicolons"
      }
    ],
    "correct": "B",
    "explanation": "Java statements must end with a semicolon; the first line is missing it."
  },
  {
    "title": "Syntax - Q0118",
    "text": "[Syntax] Which keyword is used to create a new object in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "instantiate"
      },
      {
        "letter": "B",
        "text": "new"
      },
      {
        "letter": "C",
        "text": "make"
      },
      {
        "letter": "D",
        "text": "create"
      }
    ],
    "correct": "B",
    "explanation": "The 'new' keyword allocates a new object and calls its constructor."
  },
  {
    "title": "Syntax - Q0119",
    "text": "[Syntax] Which access modifier allows visibility only within the same package?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "private"
      },
      {
        "letter": "B",
        "text": "protected"
      },
      {
        "letter": "C",
        "text": "default (no modifier)"
      },
      {
        "letter": "D",
        "text": "public"
      }
    ],
    "correct": "C",
    "explanation": "When no access modifier is specified, the member has package-private (default) access."
  },
  {
    "title": "Syntax - Q0120",
    "text": "[Syntax] Which method is the entry point of a standard Java application?",
    "code": "public class Main {\n    public static void main(String[] args) {\n        System.out.println(\"Hello World\");\n    }\n}",
    "options": [
      {
        "letter": "A",
        "text": "void main(String[])"
      },
      {
        "letter": "B",
        "text": "static void main()"
      },
      {
        "letter": "C",
        "text": "public void main()"
      },
      {
        "letter": "D",
        "text": "public static void main(String[] args)"
      }
    ],
    "correct": "D",
    "explanation": "The JVM looks for the 'public static void main(String[] args)' method as the program entry point."
  },
  {
    "title": "Syntax - Q0121",
    "text": "[Syntax] Which of the following is a valid Java identifier?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "myVar2"
      },
      {
        "letter": "B",
        "text": "my-var"
      },
      {
        "letter": "C",
        "text": "2ndVar"
      },
      {
        "letter": "D",
        "text": "class"
      }
    ],
    "correct": "A",
    "explanation": "Identifiers must not start with a digit and cannot contain hyphens or be Java keywords."
  },
  {
    "title": "Syntax - Q0122",
    "text": "[Syntax] What is wrong with the code snippet above?",
    "code": "int x = 5\nint y = 6;",
    "options": [
      {
        "letter": "A",
        "text": "Using int instead of Integer"
      },
      {
        "letter": "B",
        "text": "Too many semicolons"
      },
      {
        "letter": "C",
        "text": "Missing semicolon after first declaration"
      },
      {
        "letter": "D",
        "text": "Wrong variable names"
      }
    ],
    "correct": "C",
    "explanation": "Java statements must end with a semicolon; the first line is missing it."
  },
  {
    "title": "Syntax - Q0123",
    "text": "[Syntax] Which keyword is used to create a new object in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "new"
      },
      {
        "letter": "B",
        "text": "create"
      },
      {
        "letter": "C",
        "text": "make"
      },
      {
        "letter": "D",
        "text": "instantiate"
      }
    ],
    "correct": "A",
    "explanation": "The 'new' keyword allocates a new object and calls its constructor."
  },
  {
    "title": "Syntax - Q0124",
    "text": "[Syntax] Which access modifier allows visibility only within the same package?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "default (no modifier)"
      },
      {
        "letter": "B",
        "text": "public"
      },
      {
        "letter": "C",
        "text": "protected"
      },
      {
        "letter": "D",
        "text": "private"
      }
    ],
    "correct": "A",
    "explanation": "When no access modifier is specified, the member has package-private (default) access."
  },
  {
    "title": "Syntax - Q0125",
    "text": "[Syntax] Which method is the entry point of a standard Java application?",
    "code": "public class Main {\n    public static void main(String[] args) {\n        System.out.println(\"Hello World\");\n    }\n}",
    "options": [
      {
        "letter": "A",
        "text": "void main(String[])"
      },
      {
        "letter": "B",
        "text": "static void main()"
      },
      {
        "letter": "C",
        "text": "public void main()"
      },
      {
        "letter": "D",
        "text": "public static void main(String[] args)"
      }
    ],
    "correct": "D",
    "explanation": "The JVM looks for the 'public static void main(String[] args)' method as the program entry point."
  },
  {
    "title": "Syntax - Q0126",
    "text": "[Syntax] Which of the following is a valid Java identifier?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "myVar2"
      },
      {
        "letter": "B",
        "text": "my-var"
      },
      {
        "letter": "C",
        "text": "class"
      },
      {
        "letter": "D",
        "text": "2ndVar"
      }
    ],
    "correct": "A",
    "explanation": "Identifiers must not start with a digit and cannot contain hyphens or be Java keywords."
  },
  {
    "title": "Syntax - Q0127",
    "text": "[Syntax] What is wrong with the code snippet above?",
    "code": "int x = 5\nint y = 6;",
    "options": [
      {
        "letter": "A",
        "text": "Using int instead of Integer"
      },
      {
        "letter": "B",
        "text": "Wrong variable names"
      },
      {
        "letter": "C",
        "text": "Missing semicolon after first declaration"
      },
      {
        "letter": "D",
        "text": "Too many semicolons"
      }
    ],
    "correct": "C",
    "explanation": "Java statements must end with a semicolon; the first line is missing it."
  },
  {
    "title": "Syntax - Q0128",
    "text": "[Syntax] Which keyword is used to create a new object in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "create"
      },
      {
        "letter": "B",
        "text": "instantiate"
      },
      {
        "letter": "C",
        "text": "make"
      },
      {
        "letter": "D",
        "text": "new"
      }
    ],
    "correct": "D",
    "explanation": "The 'new' keyword allocates a new object and calls its constructor."
  },
  {
    "title": "Syntax - Q0129",
    "text": "[Syntax] Which access modifier allows visibility only within the same package?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "public"
      },
      {
        "letter": "B",
        "text": "private"
      },
      {
        "letter": "C",
        "text": "protected"
      },
      {
        "letter": "D",
        "text": "default (no modifier)"
      }
    ],
    "correct": "D",
    "explanation": "When no access modifier is specified, the member has package-private (default) access."
  },
  {
    "title": "Syntax - Q0130",
    "text": "[Syntax] Which method is the entry point of a standard Java application?",
    "code": "public class Main {\n    public static void main(String[] args) {\n        System.out.println(\"Hello World\");\n    }\n}",
    "options": [
      {
        "letter": "A",
        "text": "static void main()"
      },
      {
        "letter": "B",
        "text": "public void main()"
      },
      {
        "letter": "C",
        "text": "public static void main(String[] args)"
      },
      {
        "letter": "D",
        "text": "void main(String[])"
      }
    ],
    "correct": "C",
    "explanation": "The JVM looks for the 'public static void main(String[] args)' method as the program entry point."
  },
  {
    "title": "Syntax - Q0131",
    "text": "[Syntax] Which of the following is a valid Java identifier?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "my-var"
      },
      {
        "letter": "B",
        "text": "class"
      },
      {
        "letter": "C",
        "text": "2ndVar"
      },
      {
        "letter": "D",
        "text": "myVar2"
      }
    ],
    "correct": "D",
    "explanation": "Identifiers must not start with a digit and cannot contain hyphens or be Java keywords."
  },
  {
    "title": "Syntax - Q0132",
    "text": "[Syntax] What is wrong with the code snippet above?",
    "code": "int x = 5\nint y = 6;",
    "options": [
      {
        "letter": "A",
        "text": "Using int instead of Integer"
      },
      {
        "letter": "B",
        "text": "Too many semicolons"
      },
      {
        "letter": "C",
        "text": "Wrong variable names"
      },
      {
        "letter": "D",
        "text": "Missing semicolon after first declaration"
      }
    ],
    "correct": "D",
    "explanation": "Java statements must end with a semicolon; the first line is missing it."
  },
  {
    "title": "Syntax - Q0133",
    "text": "[Syntax] Which keyword is used to create a new object in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "make"
      },
      {
        "letter": "B",
        "text": "instantiate"
      },
      {
        "letter": "C",
        "text": "new"
      },
      {
        "letter": "D",
        "text": "create"
      }
    ],
    "correct": "C",
    "explanation": "The 'new' keyword allocates a new object and calls its constructor."
  },
  {
    "title": "Syntax - Q0134",
    "text": "[Syntax] Which access modifier allows visibility only within the same package?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "default (no modifier)"
      },
      {
        "letter": "B",
        "text": "private"
      },
      {
        "letter": "C",
        "text": "public"
      },
      {
        "letter": "D",
        "text": "protected"
      }
    ],
    "correct": "A",
    "explanation": "When no access modifier is specified, the member has package-private (default) access."
  },
  {
    "title": "Syntax - Q0135",
    "text": "[Syntax] Which method is the entry point of a standard Java application?",
    "code": "public class Main {\n    public static void main(String[] args) {\n        System.out.println(\"Hello World\");\n    }\n}",
    "options": [
      {
        "letter": "A",
        "text": "public void main()"
      },
      {
        "letter": "B",
        "text": "void main(String[])"
      },
      {
        "letter": "C",
        "text": "static void main()"
      },
      {
        "letter": "D",
        "text": "public static void main(String[] args)"
      }
    ],
    "correct": "D",
    "explanation": "The JVM looks for the 'public static void main(String[] args)' method as the program entry point."
  },
  {
    "title": "Syntax - Q0136",
    "text": "[Syntax] Which of the following is a valid Java identifier?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "class"
      },
      {
        "letter": "B",
        "text": "my-var"
      },
      {
        "letter": "C",
        "text": "myVar2"
      },
      {
        "letter": "D",
        "text": "2ndVar"
      }
    ],
    "correct": "C",
    "explanation": "Identifiers must not start with a digit and cannot contain hyphens or be Java keywords."
  },
  {
    "title": "Syntax - Q0137",
    "text": "[Syntax] What is wrong with the code snippet above?",
    "code": "int x = 5\nint y = 6;",
    "options": [
      {
        "letter": "A",
        "text": "Using int instead of Integer"
      },
      {
        "letter": "B",
        "text": "Missing semicolon after first declaration"
      },
      {
        "letter": "C",
        "text": "Wrong variable names"
      },
      {
        "letter": "D",
        "text": "Too many semicolons"
      }
    ],
    "correct": "B",
    "explanation": "Java statements must end with a semicolon; the first line is missing it."
  },
  {
    "title": "Syntax - Q0138",
    "text": "[Syntax] Which keyword is used to create a new object in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "instantiate"
      },
      {
        "letter": "B",
        "text": "new"
      },
      {
        "letter": "C",
        "text": "create"
      },
      {
        "letter": "D",
        "text": "make"
      }
    ],
    "correct": "B",
    "explanation": "The 'new' keyword allocates a new object and calls its constructor."
  },
  {
    "title": "Syntax - Q0139",
    "text": "[Syntax] Which access modifier allows visibility only within the same package?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "private"
      },
      {
        "letter": "B",
        "text": "default (no modifier)"
      },
      {
        "letter": "C",
        "text": "protected"
      },
      {
        "letter": "D",
        "text": "public"
      }
    ],
    "correct": "B",
    "explanation": "When no access modifier is specified, the member has package-private (default) access."
  },
  {
    "title": "Syntax - Q0140",
    "text": "[Syntax] Which method is the entry point of a standard Java application?",
    "code": "public class Main {\n    public static void main(String[] args) {\n        System.out.println(\"Hello World\");\n    }\n}",
    "options": [
      {
        "letter": "A",
        "text": "public static void main(String[] args)"
      },
      {
        "letter": "B",
        "text": "public void main()"
      },
      {
        "letter": "C",
        "text": "void main(String[])"
      },
      {
        "letter": "D",
        "text": "static void main()"
      }
    ],
    "correct": "A",
    "explanation": "The JVM looks for the 'public static void main(String[] args)' method as the program entry point."
  },
  {
    "title": "Syntax - Q0141",
    "text": "[Syntax] Which of the following is a valid Java identifier?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "myVar2"
      },
      {
        "letter": "B",
        "text": "class"
      },
      {
        "letter": "C",
        "text": "2ndVar"
      },
      {
        "letter": "D",
        "text": "my-var"
      }
    ],
    "correct": "A",
    "explanation": "Identifiers must not start with a digit and cannot contain hyphens or be Java keywords."
  },
  {
    "title": "Syntax - Q0142",
    "text": "[Syntax] What is wrong with the code snippet above?",
    "code": "int x = 5\nint y = 6;",
    "options": [
      {
        "letter": "A",
        "text": "Using int instead of Integer"
      },
      {
        "letter": "B",
        "text": "Too many semicolons"
      },
      {
        "letter": "C",
        "text": "Wrong variable names"
      },
      {
        "letter": "D",
        "text": "Missing semicolon after first declaration"
      }
    ],
    "correct": "D",
    "explanation": "Java statements must end with a semicolon; the first line is missing it."
  },
  {
    "title": "Syntax - Q0143",
    "text": "[Syntax] Which keyword is used to create a new object in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "create"
      },
      {
        "letter": "B",
        "text": "make"
      },
      {
        "letter": "C",
        "text": "instantiate"
      },
      {
        "letter": "D",
        "text": "new"
      }
    ],
    "correct": "D",
    "explanation": "The 'new' keyword allocates a new object and calls its constructor."
  },
  {
    "title": "Data Types - Q0144",
    "text": "[Data Types] What is the size of an int in Java (in bits)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "16 bits"
      },
      {
        "letter": "B",
        "text": "8 bits"
      },
      {
        "letter": "C",
        "text": "32 bits"
      },
      {
        "letter": "D",
        "text": "64 bits"
      }
    ],
    "correct": "C",
    "explanation": "Java's int is a 32-bit signed two's complement integer."
  },
  {
    "title": "Data Types - Q0145",
    "text": "[Data Types] Which type would you use to store single characters?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "byte"
      },
      {
        "letter": "B",
        "text": "String"
      },
      {
        "letter": "C",
        "text": "Character[]"
      },
      {
        "letter": "D",
        "text": "char"
      }
    ],
    "correct": "D",
    "explanation": "The 'char' type stores a single 16-bit Unicode character."
  },
  {
    "title": "Data Types - Q0146",
    "text": "[Data Types] Which of these is a floating-point type?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "double"
      },
      {
        "letter": "B",
        "text": "char"
      },
      {
        "letter": "C",
        "text": "int"
      },
      {
        "letter": "D",
        "text": "boolean"
      }
    ],
    "correct": "A",
    "explanation": "double and float are floating-point types; double is 64-bit."
  },
  {
    "title": "Data Types - Q0147",
    "text": "[Data Types] Which literal denotes a long integer in Java?",
    "code": "long n = 1000L;",
    "options": [
      {
        "letter": "A",
        "text": "No suffix required"
      },
      {
        "letter": "B",
        "text": "Suffix with l (lowercase) is forbidden"
      },
      {
        "letter": "C",
        "text": "Use 'long()' function"
      },
      {
        "letter": "D",
        "text": "Suffix with L (e.g., 1000L)"
      }
    ],
    "correct": "D",
    "explanation": "Use L or l to denote long literals; uppercase L avoids confusion with digit '1'."
  },
  {
    "title": "Data Types - Q0148",
    "text": "[Data Types] What is the boolean default value for instance variables?",
    "code": "class A { boolean flag; }",
    "options": [
      {
        "letter": "A",
        "text": "false"
      },
      {
        "letter": "B",
        "text": "true"
      },
      {
        "letter": "C",
        "text": "0"
      },
      {
        "letter": "D",
        "text": "null"
      }
    ],
    "correct": "A",
    "explanation": "Instance boolean variables default to false."
  },
  {
    "title": "Data Types - Q0149",
    "text": "[Data Types] Which type can hold decimal numbers with highest precision (useful for currency)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "double"
      },
      {
        "letter": "B",
        "text": "BigDecimal"
      },
      {
        "letter": "C",
        "text": "long"
      },
      {
        "letter": "D",
        "text": "float"
      }
    ],
    "correct": "B",
    "explanation": "BigDecimal provides arbitrary-precision decimal numbers, preferred for currency."
  },
  {
    "title": "Data Types - Q0150",
    "text": "[Data Types] What is the size of an int in Java (in bits)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "16 bits"
      },
      {
        "letter": "B",
        "text": "32 bits"
      },
      {
        "letter": "C",
        "text": "8 bits"
      },
      {
        "letter": "D",
        "text": "64 bits"
      }
    ],
    "correct": "B",
    "explanation": "Java's int is a 32-bit signed two's complement integer."
  },
  {
    "title": "Data Types - Q0151",
    "text": "[Data Types] Which type would you use to store single characters?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Character[]"
      },
      {
        "letter": "B",
        "text": "char"
      },
      {
        "letter": "C",
        "text": "byte"
      },
      {
        "letter": "D",
        "text": "String"
      }
    ],
    "correct": "B",
    "explanation": "The 'char' type stores a single 16-bit Unicode character."
  },
  {
    "title": "Data Types - Q0152",
    "text": "[Data Types] Which of these is a floating-point type?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "boolean"
      },
      {
        "letter": "B",
        "text": "double"
      },
      {
        "letter": "C",
        "text": "int"
      },
      {
        "letter": "D",
        "text": "char"
      }
    ],
    "correct": "B",
    "explanation": "double and float are floating-point types; double is 64-bit."
  },
  {
    "title": "Data Types - Q0153",
    "text": "[Data Types] Which literal denotes a long integer in Java?",
    "code": "long n = 1000L;",
    "options": [
      {
        "letter": "A",
        "text": "No suffix required"
      },
      {
        "letter": "B",
        "text": "Suffix with l (lowercase) is forbidden"
      },
      {
        "letter": "C",
        "text": "Use 'long()' function"
      },
      {
        "letter": "D",
        "text": "Suffix with L (e.g., 1000L)"
      }
    ],
    "correct": "D",
    "explanation": "Use L or l to denote long literals; uppercase L avoids confusion with digit '1'."
  },
  {
    "title": "Data Types - Q0154",
    "text": "[Data Types] What is the boolean default value for instance variables?",
    "code": "class A { boolean flag; }",
    "options": [
      {
        "letter": "A",
        "text": "0"
      },
      {
        "letter": "B",
        "text": "true"
      },
      {
        "letter": "C",
        "text": "false"
      },
      {
        "letter": "D",
        "text": "null"
      }
    ],
    "correct": "C",
    "explanation": "Instance boolean variables default to false."
  },
  {
    "title": "Data Types - Q0155",
    "text": "[Data Types] Which type can hold decimal numbers with highest precision (useful for currency)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "BigDecimal"
      },
      {
        "letter": "B",
        "text": "long"
      },
      {
        "letter": "C",
        "text": "double"
      },
      {
        "letter": "D",
        "text": "float"
      }
    ],
    "correct": "A",
    "explanation": "BigDecimal provides arbitrary-precision decimal numbers, preferred for currency."
  },
  {
    "title": "Data Types - Q0156",
    "text": "[Data Types] What is the size of an int in Java (in bits)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "8 bits"
      },
      {
        "letter": "B",
        "text": "16 bits"
      },
      {
        "letter": "C",
        "text": "64 bits"
      },
      {
        "letter": "D",
        "text": "32 bits"
      }
    ],
    "correct": "D",
    "explanation": "Java's int is a 32-bit signed two's complement integer."
  },
  {
    "title": "Data Types - Q0157",
    "text": "[Data Types] Which type would you use to store single characters?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "byte"
      },
      {
        "letter": "B",
        "text": "Character[]"
      },
      {
        "letter": "C",
        "text": "String"
      },
      {
        "letter": "D",
        "text": "char"
      }
    ],
    "correct": "D",
    "explanation": "The 'char' type stores a single 16-bit Unicode character."
  },
  {
    "title": "Data Types - Q0158",
    "text": "[Data Types] Which of these is a floating-point type?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "int"
      },
      {
        "letter": "B",
        "text": "char"
      },
      {
        "letter": "C",
        "text": "double"
      },
      {
        "letter": "D",
        "text": "boolean"
      }
    ],
    "correct": "C",
    "explanation": "double and float are floating-point types; double is 64-bit."
  },
  {
    "title": "Data Types - Q0159",
    "text": "[Data Types] Which literal denotes a long integer in Java?",
    "code": "long n = 1000L;",
    "options": [
      {
        "letter": "A",
        "text": "No suffix required"
      },
      {
        "letter": "B",
        "text": "Use 'long()' function"
      },
      {
        "letter": "C",
        "text": "Suffix with l (lowercase) is forbidden"
      },
      {
        "letter": "D",
        "text": "Suffix with L (e.g., 1000L)"
      }
    ],
    "correct": "D",
    "explanation": "Use L or l to denote long literals; uppercase L avoids confusion with digit '1'."
  },
  {
    "title": "Data Types - Q0160",
    "text": "[Data Types] What is the boolean default value for instance variables?",
    "code": "class A { boolean flag; }",
    "options": [
      {
        "letter": "A",
        "text": "false"
      },
      {
        "letter": "B",
        "text": "0"
      },
      {
        "letter": "C",
        "text": "null"
      },
      {
        "letter": "D",
        "text": "true"
      }
    ],
    "correct": "A",
    "explanation": "Instance boolean variables default to false."
  },
  {
    "title": "Data Types - Q0161",
    "text": "[Data Types] Which type can hold decimal numbers with highest precision (useful for currency)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "double"
      },
      {
        "letter": "B",
        "text": "BigDecimal"
      },
      {
        "letter": "C",
        "text": "long"
      },
      {
        "letter": "D",
        "text": "float"
      }
    ],
    "correct": "B",
    "explanation": "BigDecimal provides arbitrary-precision decimal numbers, preferred for currency."
  },
  {
    "title": "Data Types - Q0162",
    "text": "[Data Types] What is the size of an int in Java (in bits)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "16 bits"
      },
      {
        "letter": "B",
        "text": "8 bits"
      },
      {
        "letter": "C",
        "text": "32 bits"
      },
      {
        "letter": "D",
        "text": "64 bits"
      }
    ],
    "correct": "C",
    "explanation": "Java's int is a 32-bit signed two's complement integer."
  },
  {
    "title": "Data Types - Q0163",
    "text": "[Data Types] Which type would you use to store single characters?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "byte"
      },
      {
        "letter": "B",
        "text": "Character[]"
      },
      {
        "letter": "C",
        "text": "String"
      },
      {
        "letter": "D",
        "text": "char"
      }
    ],
    "correct": "D",
    "explanation": "The 'char' type stores a single 16-bit Unicode character."
  },
  {
    "title": "Data Types - Q0164",
    "text": "[Data Types] Which of these is a floating-point type?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "boolean"
      },
      {
        "letter": "B",
        "text": "double"
      },
      {
        "letter": "C",
        "text": "int"
      },
      {
        "letter": "D",
        "text": "char"
      }
    ],
    "correct": "B",
    "explanation": "double and float are floating-point types; double is 64-bit."
  },
  {
    "title": "Data Types - Q0165",
    "text": "[Data Types] Which literal denotes a long integer in Java?",
    "code": "long n = 1000L;",
    "options": [
      {
        "letter": "A",
        "text": "Use 'long()' function"
      },
      {
        "letter": "B",
        "text": "Suffix with l (lowercase) is forbidden"
      },
      {
        "letter": "C",
        "text": "No suffix required"
      },
      {
        "letter": "D",
        "text": "Suffix with L (e.g., 1000L)"
      }
    ],
    "correct": "D",
    "explanation": "Use L or l to denote long literals; uppercase L avoids confusion with digit '1'."
  },
  {
    "title": "Data Types - Q0166",
    "text": "[Data Types] What is the boolean default value for instance variables?",
    "code": "class A { boolean flag; }",
    "options": [
      {
        "letter": "A",
        "text": "null"
      },
      {
        "letter": "B",
        "text": "true"
      },
      {
        "letter": "C",
        "text": "0"
      },
      {
        "letter": "D",
        "text": "false"
      }
    ],
    "correct": "D",
    "explanation": "Instance boolean variables default to false."
  },
  {
    "title": "Data Types - Q0167",
    "text": "[Data Types] Which type can hold decimal numbers with highest precision (useful for currency)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "BigDecimal"
      },
      {
        "letter": "B",
        "text": "float"
      },
      {
        "letter": "C",
        "text": "long"
      },
      {
        "letter": "D",
        "text": "double"
      }
    ],
    "correct": "A",
    "explanation": "BigDecimal provides arbitrary-precision decimal numbers, preferred for currency."
  },
  {
    "title": "Data Types - Q0168",
    "text": "[Data Types] What is the size of an int in Java (in bits)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "32 bits"
      },
      {
        "letter": "B",
        "text": "16 bits"
      },
      {
        "letter": "C",
        "text": "64 bits"
      },
      {
        "letter": "D",
        "text": "8 bits"
      }
    ],
    "correct": "A",
    "explanation": "Java's int is a 32-bit signed two's complement integer."
  },
  {
    "title": "Data Types - Q0169",
    "text": "[Data Types] Which type would you use to store single characters?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "char"
      },
      {
        "letter": "B",
        "text": "String"
      },
      {
        "letter": "C",
        "text": "Character[]"
      },
      {
        "letter": "D",
        "text": "byte"
      }
    ],
    "correct": "A",
    "explanation": "The 'char' type stores a single 16-bit Unicode character."
  },
  {
    "title": "Data Types - Q0170",
    "text": "[Data Types] Which of these is a floating-point type?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "double"
      },
      {
        "letter": "B",
        "text": "char"
      },
      {
        "letter": "C",
        "text": "boolean"
      },
      {
        "letter": "D",
        "text": "int"
      }
    ],
    "correct": "A",
    "explanation": "double and float are floating-point types; double is 64-bit."
  },
  {
    "title": "Data Types - Q0171",
    "text": "[Data Types] Which literal denotes a long integer in Java?",
    "code": "long n = 1000L;",
    "options": [
      {
        "letter": "A",
        "text": "Use 'long()' function"
      },
      {
        "letter": "B",
        "text": "Suffix with l (lowercase) is forbidden"
      },
      {
        "letter": "C",
        "text": "Suffix with L (e.g., 1000L)"
      },
      {
        "letter": "D",
        "text": "No suffix required"
      }
    ],
    "correct": "C",
    "explanation": "Use L or l to denote long literals; uppercase L avoids confusion with digit '1'."
  },
  {
    "title": "Data Types - Q0172",
    "text": "[Data Types] What is the boolean default value for instance variables?",
    "code": "class A { boolean flag; }",
    "options": [
      {
        "letter": "A",
        "text": "false"
      },
      {
        "letter": "B",
        "text": "null"
      },
      {
        "letter": "C",
        "text": "true"
      },
      {
        "letter": "D",
        "text": "0"
      }
    ],
    "correct": "A",
    "explanation": "Instance boolean variables default to false."
  },
  {
    "title": "Data Types - Q0173",
    "text": "[Data Types] Which type can hold decimal numbers with highest precision (useful for currency)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "double"
      },
      {
        "letter": "B",
        "text": "long"
      },
      {
        "letter": "C",
        "text": "BigDecimal"
      },
      {
        "letter": "D",
        "text": "float"
      }
    ],
    "correct": "C",
    "explanation": "BigDecimal provides arbitrary-precision decimal numbers, preferred for currency."
  },
  {
    "title": "Data Types - Q0174",
    "text": "[Data Types] What is the size of an int in Java (in bits)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "64 bits"
      },
      {
        "letter": "B",
        "text": "8 bits"
      },
      {
        "letter": "C",
        "text": "16 bits"
      },
      {
        "letter": "D",
        "text": "32 bits"
      }
    ],
    "correct": "D",
    "explanation": "Java's int is a 32-bit signed two's complement integer."
  },
  {
    "title": "Data Types - Q0175",
    "text": "[Data Types] Which type would you use to store single characters?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "char"
      },
      {
        "letter": "B",
        "text": "String"
      },
      {
        "letter": "C",
        "text": "Character[]"
      },
      {
        "letter": "D",
        "text": "byte"
      }
    ],
    "correct": "A",
    "explanation": "The 'char' type stores a single 16-bit Unicode character."
  },
  {
    "title": "Data Types - Q0176",
    "text": "[Data Types] Which of these is a floating-point type?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "char"
      },
      {
        "letter": "B",
        "text": "int"
      },
      {
        "letter": "C",
        "text": "boolean"
      },
      {
        "letter": "D",
        "text": "double"
      }
    ],
    "correct": "D",
    "explanation": "double and float are floating-point types; double is 64-bit."
  },
  {
    "title": "Data Types - Q0177",
    "text": "[Data Types] Which literal denotes a long integer in Java?",
    "code": "long n = 1000L;",
    "options": [
      {
        "letter": "A",
        "text": "Use 'long()' function"
      },
      {
        "letter": "B",
        "text": "No suffix required"
      },
      {
        "letter": "C",
        "text": "Suffix with l (lowercase) is forbidden"
      },
      {
        "letter": "D",
        "text": "Suffix with L (e.g., 1000L)"
      }
    ],
    "correct": "D",
    "explanation": "Use L or l to denote long literals; uppercase L avoids confusion with digit '1'."
  },
  {
    "title": "Data Types - Q0178",
    "text": "[Data Types] What is the boolean default value for instance variables?",
    "code": "class A { boolean flag; }",
    "options": [
      {
        "letter": "A",
        "text": "false"
      },
      {
        "letter": "B",
        "text": "null"
      },
      {
        "letter": "C",
        "text": "0"
      },
      {
        "letter": "D",
        "text": "true"
      }
    ],
    "correct": "A",
    "explanation": "Instance boolean variables default to false."
  },
  {
    "title": "Data Types - Q0179",
    "text": "[Data Types] Which type can hold decimal numbers with highest precision (useful for currency)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "double"
      },
      {
        "letter": "B",
        "text": "float"
      },
      {
        "letter": "C",
        "text": "long"
      },
      {
        "letter": "D",
        "text": "BigDecimal"
      }
    ],
    "correct": "D",
    "explanation": "BigDecimal provides arbitrary-precision decimal numbers, preferred for currency."
  },
  {
    "title": "Data Types - Q0180",
    "text": "[Data Types] What is the size of an int in Java (in bits)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "32 bits"
      },
      {
        "letter": "B",
        "text": "64 bits"
      },
      {
        "letter": "C",
        "text": "16 bits"
      },
      {
        "letter": "D",
        "text": "8 bits"
      }
    ],
    "correct": "A",
    "explanation": "Java's int is a 32-bit signed two's complement integer."
  },
  {
    "title": "Data Types - Q0181",
    "text": "[Data Types] Which type would you use to store single characters?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Character[]"
      },
      {
        "letter": "B",
        "text": "byte"
      },
      {
        "letter": "C",
        "text": "char"
      },
      {
        "letter": "D",
        "text": "String"
      }
    ],
    "correct": "C",
    "explanation": "The 'char' type stores a single 16-bit Unicode character."
  },
  {
    "title": "Data Types - Q0182",
    "text": "[Data Types] Which of these is a floating-point type?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "char"
      },
      {
        "letter": "B",
        "text": "boolean"
      },
      {
        "letter": "C",
        "text": "double"
      },
      {
        "letter": "D",
        "text": "int"
      }
    ],
    "correct": "C",
    "explanation": "double and float are floating-point types; double is 64-bit."
  },
  {
    "title": "Data Types - Q0183",
    "text": "[Data Types] Which literal denotes a long integer in Java?",
    "code": "long n = 1000L;",
    "options": [
      {
        "letter": "A",
        "text": "Suffix with L (e.g., 1000L)"
      },
      {
        "letter": "B",
        "text": "Suffix with l (lowercase) is forbidden"
      },
      {
        "letter": "C",
        "text": "Use 'long()' function"
      },
      {
        "letter": "D",
        "text": "No suffix required"
      }
    ],
    "correct": "A",
    "explanation": "Use L or l to denote long literals; uppercase L avoids confusion with digit '1'."
  },
  {
    "title": "Data Types - Q0184",
    "text": "[Data Types] What is the boolean default value for instance variables?",
    "code": "class A { boolean flag; }",
    "options": [
      {
        "letter": "A",
        "text": "0"
      },
      {
        "letter": "B",
        "text": "null"
      },
      {
        "letter": "C",
        "text": "false"
      },
      {
        "letter": "D",
        "text": "true"
      }
    ],
    "correct": "C",
    "explanation": "Instance boolean variables default to false."
  },
  {
    "title": "Data Types - Q0185",
    "text": "[Data Types] Which type can hold decimal numbers with highest precision (useful for currency)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "BigDecimal"
      },
      {
        "letter": "B",
        "text": "double"
      },
      {
        "letter": "C",
        "text": "float"
      },
      {
        "letter": "D",
        "text": "long"
      }
    ],
    "correct": "A",
    "explanation": "BigDecimal provides arbitrary-precision decimal numbers, preferred for currency."
  },
  {
    "title": "Data Types - Q0186",
    "text": "[Data Types] What is the size of an int in Java (in bits)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "8 bits"
      },
      {
        "letter": "B",
        "text": "64 bits"
      },
      {
        "letter": "C",
        "text": "32 bits"
      },
      {
        "letter": "D",
        "text": "16 bits"
      }
    ],
    "correct": "C",
    "explanation": "Java's int is a 32-bit signed two's complement integer."
  },
  {
    "title": "Data Types - Q0187",
    "text": "[Data Types] Which type would you use to store single characters?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "String"
      },
      {
        "letter": "B",
        "text": "Character[]"
      },
      {
        "letter": "C",
        "text": "char"
      },
      {
        "letter": "D",
        "text": "byte"
      }
    ],
    "correct": "C",
    "explanation": "The 'char' type stores a single 16-bit Unicode character."
  },
  {
    "title": "Data Types - Q0188",
    "text": "[Data Types] Which of these is a floating-point type?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "boolean"
      },
      {
        "letter": "B",
        "text": "int"
      },
      {
        "letter": "C",
        "text": "char"
      },
      {
        "letter": "D",
        "text": "double"
      }
    ],
    "correct": "D",
    "explanation": "double and float are floating-point types; double is 64-bit."
  },
  {
    "title": "Data Types - Q0189",
    "text": "[Data Types] Which literal denotes a long integer in Java?",
    "code": "long n = 1000L;",
    "options": [
      {
        "letter": "A",
        "text": "Use 'long()' function"
      },
      {
        "letter": "B",
        "text": "Suffix with l (lowercase) is forbidden"
      },
      {
        "letter": "C",
        "text": "No suffix required"
      },
      {
        "letter": "D",
        "text": "Suffix with L (e.g., 1000L)"
      }
    ],
    "correct": "D",
    "explanation": "Use L or l to denote long literals; uppercase L avoids confusion with digit '1'."
  },
  {
    "title": "Data Types - Q0190",
    "text": "[Data Types] What is the boolean default value for instance variables?",
    "code": "class A { boolean flag; }",
    "options": [
      {
        "letter": "A",
        "text": "false"
      },
      {
        "letter": "B",
        "text": "true"
      },
      {
        "letter": "C",
        "text": "null"
      },
      {
        "letter": "D",
        "text": "0"
      }
    ],
    "correct": "A",
    "explanation": "Instance boolean variables default to false."
  },
  {
    "title": "Data Types - Q0191",
    "text": "[Data Types] Which type can hold decimal numbers with highest precision (useful for currency)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "float"
      },
      {
        "letter": "B",
        "text": "BigDecimal"
      },
      {
        "letter": "C",
        "text": "long"
      },
      {
        "letter": "D",
        "text": "double"
      }
    ],
    "correct": "B",
    "explanation": "BigDecimal provides arbitrary-precision decimal numbers, preferred for currency."
  },
  {
    "title": "Data Types - Q0192",
    "text": "[Data Types] What is the size of an int in Java (in bits)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "8 bits"
      },
      {
        "letter": "B",
        "text": "32 bits"
      },
      {
        "letter": "C",
        "text": "64 bits"
      },
      {
        "letter": "D",
        "text": "16 bits"
      }
    ],
    "correct": "B",
    "explanation": "Java's int is a 32-bit signed two's complement integer."
  },
  {
    "title": "Data Types - Q0193",
    "text": "[Data Types] Which type would you use to store single characters?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "byte"
      },
      {
        "letter": "B",
        "text": "Character[]"
      },
      {
        "letter": "C",
        "text": "char"
      },
      {
        "letter": "D",
        "text": "String"
      }
    ],
    "correct": "C",
    "explanation": "The 'char' type stores a single 16-bit Unicode character."
  },
  {
    "title": "Data Types - Q0194",
    "text": "[Data Types] Which of these is a floating-point type?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "int"
      },
      {
        "letter": "B",
        "text": "boolean"
      },
      {
        "letter": "C",
        "text": "char"
      },
      {
        "letter": "D",
        "text": "double"
      }
    ],
    "correct": "D",
    "explanation": "double and float are floating-point types; double is 64-bit."
  },
  {
    "title": "Data Types - Q0195",
    "text": "[Data Types] Which literal denotes a long integer in Java?",
    "code": "long n = 1000L;",
    "options": [
      {
        "letter": "A",
        "text": "No suffix required"
      },
      {
        "letter": "B",
        "text": "Use 'long()' function"
      },
      {
        "letter": "C",
        "text": "Suffix with l (lowercase) is forbidden"
      },
      {
        "letter": "D",
        "text": "Suffix with L (e.g., 1000L)"
      }
    ],
    "correct": "D",
    "explanation": "Use L or l to denote long literals; uppercase L avoids confusion with digit '1'."
  },
  {
    "title": "Data Types - Q0196",
    "text": "[Data Types] What is the boolean default value for instance variables?",
    "code": "class A { boolean flag; }",
    "options": [
      {
        "letter": "A",
        "text": "true"
      },
      {
        "letter": "B",
        "text": "false"
      },
      {
        "letter": "C",
        "text": "0"
      },
      {
        "letter": "D",
        "text": "null"
      }
    ],
    "correct": "B",
    "explanation": "Instance boolean variables default to false."
  },
  {
    "title": "Data Types - Q0197",
    "text": "[Data Types] Which type can hold decimal numbers with highest precision (useful for currency)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "BigDecimal"
      },
      {
        "letter": "B",
        "text": "float"
      },
      {
        "letter": "C",
        "text": "long"
      },
      {
        "letter": "D",
        "text": "double"
      }
    ],
    "correct": "A",
    "explanation": "BigDecimal provides arbitrary-precision decimal numbers, preferred for currency."
  },
  {
    "title": "Data Types - Q0198",
    "text": "[Data Types] What is the size of an int in Java (in bits)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "8 bits"
      },
      {
        "letter": "B",
        "text": "16 bits"
      },
      {
        "letter": "C",
        "text": "32 bits"
      },
      {
        "letter": "D",
        "text": "64 bits"
      }
    ],
    "correct": "C",
    "explanation": "Java's int is a 32-bit signed two's complement integer."
  },
  {
    "title": "Data Types - Q0199",
    "text": "[Data Types] Which type would you use to store single characters?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "byte"
      },
      {
        "letter": "B",
        "text": "String"
      },
      {
        "letter": "C",
        "text": "Character[]"
      },
      {
        "letter": "D",
        "text": "char"
      }
    ],
    "correct": "D",
    "explanation": "The 'char' type stores a single 16-bit Unicode character."
  },
  {
    "title": "Data Types - Q0200",
    "text": "[Data Types] Which of these is a floating-point type?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "double"
      },
      {
        "letter": "B",
        "text": "char"
      },
      {
        "letter": "C",
        "text": "boolean"
      },
      {
        "letter": "D",
        "text": "int"
      }
    ],
    "correct": "A",
    "explanation": "double and float are floating-point types; double is 64-bit."
  },
  {
    "title": "Data Types - Q0201",
    "text": "[Data Types] Which literal denotes a long integer in Java?",
    "code": "long n = 1000L;",
    "options": [
      {
        "letter": "A",
        "text": "No suffix required"
      },
      {
        "letter": "B",
        "text": "Suffix with l (lowercase) is forbidden"
      },
      {
        "letter": "C",
        "text": "Suffix with L (e.g., 1000L)"
      },
      {
        "letter": "D",
        "text": "Use 'long()' function"
      }
    ],
    "correct": "C",
    "explanation": "Use L or l to denote long literals; uppercase L avoids confusion with digit '1'."
  },
  {
    "title": "Data Types - Q0202",
    "text": "[Data Types] What is the boolean default value for instance variables?",
    "code": "class A { boolean flag; }",
    "options": [
      {
        "letter": "A",
        "text": "null"
      },
      {
        "letter": "B",
        "text": "0"
      },
      {
        "letter": "C",
        "text": "false"
      },
      {
        "letter": "D",
        "text": "true"
      }
    ],
    "correct": "C",
    "explanation": "Instance boolean variables default to false."
  },
  {
    "title": "Data Types - Q0203",
    "text": "[Data Types] Which type can hold decimal numbers with highest precision (useful for currency)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "double"
      },
      {
        "letter": "B",
        "text": "long"
      },
      {
        "letter": "C",
        "text": "BigDecimal"
      },
      {
        "letter": "D",
        "text": "float"
      }
    ],
    "correct": "C",
    "explanation": "BigDecimal provides arbitrary-precision decimal numbers, preferred for currency."
  },
  {
    "title": "Data Types - Q0204",
    "text": "[Data Types] What is the size of an int in Java (in bits)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "16 bits"
      },
      {
        "letter": "B",
        "text": "64 bits"
      },
      {
        "letter": "C",
        "text": "8 bits"
      },
      {
        "letter": "D",
        "text": "32 bits"
      }
    ],
    "correct": "D",
    "explanation": "Java's int is a 32-bit signed two's complement integer."
  },
  {
    "title": "Data Types - Q0205",
    "text": "[Data Types] Which type would you use to store single characters?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Character[]"
      },
      {
        "letter": "B",
        "text": "String"
      },
      {
        "letter": "C",
        "text": "char"
      },
      {
        "letter": "D",
        "text": "byte"
      }
    ],
    "correct": "C",
    "explanation": "The 'char' type stores a single 16-bit Unicode character."
  },
  {
    "title": "Data Types - Q0206",
    "text": "[Data Types] Which of these is a floating-point type?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "char"
      },
      {
        "letter": "B",
        "text": "double"
      },
      {
        "letter": "C",
        "text": "int"
      },
      {
        "letter": "D",
        "text": "boolean"
      }
    ],
    "correct": "B",
    "explanation": "double and float are floating-point types; double is 64-bit."
  },
  {
    "title": "Data Types - Q0207",
    "text": "[Data Types] Which literal denotes a long integer in Java?",
    "code": "long n = 1000L;",
    "options": [
      {
        "letter": "A",
        "text": "Suffix with l (lowercase) is forbidden"
      },
      {
        "letter": "B",
        "text": "Suffix with L (e.g., 1000L)"
      },
      {
        "letter": "C",
        "text": "Use 'long()' function"
      },
      {
        "letter": "D",
        "text": "No suffix required"
      }
    ],
    "correct": "B",
    "explanation": "Use L or l to denote long literals; uppercase L avoids confusion with digit '1'."
  },
  {
    "title": "Data Types - Q0208",
    "text": "[Data Types] What is the boolean default value for instance variables?",
    "code": "class A { boolean flag; }",
    "options": [
      {
        "letter": "A",
        "text": "false"
      },
      {
        "letter": "B",
        "text": "null"
      },
      {
        "letter": "C",
        "text": "0"
      },
      {
        "letter": "D",
        "text": "true"
      }
    ],
    "correct": "A",
    "explanation": "Instance boolean variables default to false."
  },
  {
    "title": "Data Types - Q0209",
    "text": "[Data Types] Which type can hold decimal numbers with highest precision (useful for currency)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "long"
      },
      {
        "letter": "B",
        "text": "double"
      },
      {
        "letter": "C",
        "text": "BigDecimal"
      },
      {
        "letter": "D",
        "text": "float"
      }
    ],
    "correct": "C",
    "explanation": "BigDecimal provides arbitrary-precision decimal numbers, preferred for currency."
  },
  {
    "title": "Data Types - Q0210",
    "text": "[Data Types] What is the size of an int in Java (in bits)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "32 bits"
      },
      {
        "letter": "B",
        "text": "64 bits"
      },
      {
        "letter": "C",
        "text": "16 bits"
      },
      {
        "letter": "D",
        "text": "8 bits"
      }
    ],
    "correct": "A",
    "explanation": "Java's int is a 32-bit signed two's complement integer."
  },
  {
    "title": "Data Types - Q0211",
    "text": "[Data Types] Which type would you use to store single characters?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Character[]"
      },
      {
        "letter": "B",
        "text": "String"
      },
      {
        "letter": "C",
        "text": "char"
      },
      {
        "letter": "D",
        "text": "byte"
      }
    ],
    "correct": "C",
    "explanation": "The 'char' type stores a single 16-bit Unicode character."
  },
  {
    "title": "Data Types - Q0212",
    "text": "[Data Types] Which of these is a floating-point type?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "boolean"
      },
      {
        "letter": "B",
        "text": "int"
      },
      {
        "letter": "C",
        "text": "double"
      },
      {
        "letter": "D",
        "text": "char"
      }
    ],
    "correct": "C",
    "explanation": "double and float are floating-point types; double is 64-bit."
  },
  {
    "title": "Data Types - Q0213",
    "text": "[Data Types] Which literal denotes a long integer in Java?",
    "code": "long n = 1000L;",
    "options": [
      {
        "letter": "A",
        "text": "No suffix required"
      },
      {
        "letter": "B",
        "text": "Suffix with l (lowercase) is forbidden"
      },
      {
        "letter": "C",
        "text": "Use 'long()' function"
      },
      {
        "letter": "D",
        "text": "Suffix with L (e.g., 1000L)"
      }
    ],
    "correct": "D",
    "explanation": "Use L or l to denote long literals; uppercase L avoids confusion with digit '1'."
  },
  {
    "title": "Data Types - Q0214",
    "text": "[Data Types] What is the boolean default value for instance variables?",
    "code": "class A { boolean flag; }",
    "options": [
      {
        "letter": "A",
        "text": "0"
      },
      {
        "letter": "B",
        "text": "true"
      },
      {
        "letter": "C",
        "text": "null"
      },
      {
        "letter": "D",
        "text": "false"
      }
    ],
    "correct": "D",
    "explanation": "Instance boolean variables default to false."
  },
  {
    "title": "Data Types - Q0215",
    "text": "[Data Types] Which type can hold decimal numbers with highest precision (useful for currency)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "double"
      },
      {
        "letter": "B",
        "text": "long"
      },
      {
        "letter": "C",
        "text": "float"
      },
      {
        "letter": "D",
        "text": "BigDecimal"
      }
    ],
    "correct": "D",
    "explanation": "BigDecimal provides arbitrary-precision decimal numbers, preferred for currency."
  },
  {
    "title": "Data Types - Q0216",
    "text": "[Data Types] What is the size of an int in Java (in bits)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "32 bits"
      },
      {
        "letter": "B",
        "text": "8 bits"
      },
      {
        "letter": "C",
        "text": "16 bits"
      },
      {
        "letter": "D",
        "text": "64 bits"
      }
    ],
    "correct": "A",
    "explanation": "Java's int is a 32-bit signed two's complement integer."
  },
  {
    "title": "Data Types - Q0217",
    "text": "[Data Types] Which type would you use to store single characters?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "byte"
      },
      {
        "letter": "B",
        "text": "char"
      },
      {
        "letter": "C",
        "text": "Character[]"
      },
      {
        "letter": "D",
        "text": "String"
      }
    ],
    "correct": "B",
    "explanation": "The 'char' type stores a single 16-bit Unicode character."
  },
  {
    "title": "Data Types - Q0218",
    "text": "[Data Types] Which of these is a floating-point type?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "int"
      },
      {
        "letter": "B",
        "text": "char"
      },
      {
        "letter": "C",
        "text": "double"
      },
      {
        "letter": "D",
        "text": "boolean"
      }
    ],
    "correct": "C",
    "explanation": "double and float are floating-point types; double is 64-bit."
  },
  {
    "title": "Data Types - Q0219",
    "text": "[Data Types] Which literal denotes a long integer in Java?",
    "code": "long n = 1000L;",
    "options": [
      {
        "letter": "A",
        "text": "Suffix with l (lowercase) is forbidden"
      },
      {
        "letter": "B",
        "text": "Use 'long()' function"
      },
      {
        "letter": "C",
        "text": "Suffix with L (e.g., 1000L)"
      },
      {
        "letter": "D",
        "text": "No suffix required"
      }
    ],
    "correct": "C",
    "explanation": "Use L or l to denote long literals; uppercase L avoids confusion with digit '1'."
  },
  {
    "title": "Data Types - Q0220",
    "text": "[Data Types] What is the boolean default value for instance variables?",
    "code": "class A { boolean flag; }",
    "options": [
      {
        "letter": "A",
        "text": "false"
      },
      {
        "letter": "B",
        "text": "true"
      },
      {
        "letter": "C",
        "text": "0"
      },
      {
        "letter": "D",
        "text": "null"
      }
    ],
    "correct": "A",
    "explanation": "Instance boolean variables default to false."
  },
  {
    "title": "Data Types - Q0221",
    "text": "[Data Types] Which type can hold decimal numbers with highest precision (useful for currency)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "float"
      },
      {
        "letter": "B",
        "text": "long"
      },
      {
        "letter": "C",
        "text": "BigDecimal"
      },
      {
        "letter": "D",
        "text": "double"
      }
    ],
    "correct": "C",
    "explanation": "BigDecimal provides arbitrary-precision decimal numbers, preferred for currency."
  },
  {
    "title": "Data Types - Q0222",
    "text": "[Data Types] What is the size of an int in Java (in bits)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "64 bits"
      },
      {
        "letter": "B",
        "text": "16 bits"
      },
      {
        "letter": "C",
        "text": "32 bits"
      },
      {
        "letter": "D",
        "text": "8 bits"
      }
    ],
    "correct": "C",
    "explanation": "Java's int is a 32-bit signed two's complement integer."
  },
  {
    "title": "Data Types - Q0223",
    "text": "[Data Types] Which type would you use to store single characters?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Character[]"
      },
      {
        "letter": "B",
        "text": "String"
      },
      {
        "letter": "C",
        "text": "char"
      },
      {
        "letter": "D",
        "text": "byte"
      }
    ],
    "correct": "C",
    "explanation": "The 'char' type stores a single 16-bit Unicode character."
  },
  {
    "title": "Data Types - Q0224",
    "text": "[Data Types] Which of these is a floating-point type?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "int"
      },
      {
        "letter": "B",
        "text": "boolean"
      },
      {
        "letter": "C",
        "text": "double"
      },
      {
        "letter": "D",
        "text": "char"
      }
    ],
    "correct": "C",
    "explanation": "double and float are floating-point types; double is 64-bit."
  },
  {
    "title": "Data Types - Q0225",
    "text": "[Data Types] Which literal denotes a long integer in Java?",
    "code": "long n = 1000L;",
    "options": [
      {
        "letter": "A",
        "text": "Suffix with L (e.g., 1000L)"
      },
      {
        "letter": "B",
        "text": "Suffix with l (lowercase) is forbidden"
      },
      {
        "letter": "C",
        "text": "Use 'long()' function"
      },
      {
        "letter": "D",
        "text": "No suffix required"
      }
    ],
    "correct": "A",
    "explanation": "Use L or l to denote long literals; uppercase L avoids confusion with digit '1'."
  },
  {
    "title": "Data Types - Q0226",
    "text": "[Data Types] What is the boolean default value for instance variables?",
    "code": "class A { boolean flag; }",
    "options": [
      {
        "letter": "A",
        "text": "true"
      },
      {
        "letter": "B",
        "text": "0"
      },
      {
        "letter": "C",
        "text": "null"
      },
      {
        "letter": "D",
        "text": "false"
      }
    ],
    "correct": "D",
    "explanation": "Instance boolean variables default to false."
  },
  {
    "title": "Data Types - Q0227",
    "text": "[Data Types] Which type can hold decimal numbers with highest precision (useful for currency)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "long"
      },
      {
        "letter": "B",
        "text": "BigDecimal"
      },
      {
        "letter": "C",
        "text": "double"
      },
      {
        "letter": "D",
        "text": "float"
      }
    ],
    "correct": "B",
    "explanation": "BigDecimal provides arbitrary-precision decimal numbers, preferred for currency."
  },
  {
    "title": "Data Types - Q0228",
    "text": "[Data Types] What is the size of an int in Java (in bits)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "32 bits"
      },
      {
        "letter": "B",
        "text": "8 bits"
      },
      {
        "letter": "C",
        "text": "64 bits"
      },
      {
        "letter": "D",
        "text": "16 bits"
      }
    ],
    "correct": "A",
    "explanation": "Java's int is a 32-bit signed two's complement integer."
  },
  {
    "title": "Data Types - Q0229",
    "text": "[Data Types] Which type would you use to store single characters?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "byte"
      },
      {
        "letter": "B",
        "text": "Character[]"
      },
      {
        "letter": "C",
        "text": "String"
      },
      {
        "letter": "D",
        "text": "char"
      }
    ],
    "correct": "D",
    "explanation": "The 'char' type stores a single 16-bit Unicode character."
  },
  {
    "title": "Data Types - Q0230",
    "text": "[Data Types] Which of these is a floating-point type?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "char"
      },
      {
        "letter": "B",
        "text": "boolean"
      },
      {
        "letter": "C",
        "text": "int"
      },
      {
        "letter": "D",
        "text": "double"
      }
    ],
    "correct": "D",
    "explanation": "double and float are floating-point types; double is 64-bit."
  },
  {
    "title": "Data Types - Q0231",
    "text": "[Data Types] Which literal denotes a long integer in Java?",
    "code": "long n = 1000L;",
    "options": [
      {
        "letter": "A",
        "text": "Suffix with L (e.g., 1000L)"
      },
      {
        "letter": "B",
        "text": "Suffix with l (lowercase) is forbidden"
      },
      {
        "letter": "C",
        "text": "No suffix required"
      },
      {
        "letter": "D",
        "text": "Use 'long()' function"
      }
    ],
    "correct": "A",
    "explanation": "Use L or l to denote long literals; uppercase L avoids confusion with digit '1'."
  },
  {
    "title": "Data Types - Q0232",
    "text": "[Data Types] What is the boolean default value for instance variables?",
    "code": "class A { boolean flag; }",
    "options": [
      {
        "letter": "A",
        "text": "0"
      },
      {
        "letter": "B",
        "text": "true"
      },
      {
        "letter": "C",
        "text": "false"
      },
      {
        "letter": "D",
        "text": "null"
      }
    ],
    "correct": "C",
    "explanation": "Instance boolean variables default to false."
  },
  {
    "title": "Data Types - Q0233",
    "text": "[Data Types] Which type can hold decimal numbers with highest precision (useful for currency)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "float"
      },
      {
        "letter": "B",
        "text": "long"
      },
      {
        "letter": "C",
        "text": "BigDecimal"
      },
      {
        "letter": "D",
        "text": "double"
      }
    ],
    "correct": "C",
    "explanation": "BigDecimal provides arbitrary-precision decimal numbers, preferred for currency."
  },
  {
    "title": "Data Types - Q0234",
    "text": "[Data Types] What is the size of an int in Java (in bits)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "64 bits"
      },
      {
        "letter": "B",
        "text": "16 bits"
      },
      {
        "letter": "C",
        "text": "8 bits"
      },
      {
        "letter": "D",
        "text": "32 bits"
      }
    ],
    "correct": "D",
    "explanation": "Java's int is a 32-bit signed two's complement integer."
  },
  {
    "title": "Data Types - Q0235",
    "text": "[Data Types] Which type would you use to store single characters?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "byte"
      },
      {
        "letter": "B",
        "text": "Character[]"
      },
      {
        "letter": "C",
        "text": "char"
      },
      {
        "letter": "D",
        "text": "String"
      }
    ],
    "correct": "C",
    "explanation": "The 'char' type stores a single 16-bit Unicode character."
  },
  {
    "title": "Data Types - Q0236",
    "text": "[Data Types] Which of these is a floating-point type?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "int"
      },
      {
        "letter": "B",
        "text": "boolean"
      },
      {
        "letter": "C",
        "text": "char"
      },
      {
        "letter": "D",
        "text": "double"
      }
    ],
    "correct": "D",
    "explanation": "double and float are floating-point types; double is 64-bit."
  },
  {
    "title": "Data Types - Q0237",
    "text": "[Data Types] Which literal denotes a long integer in Java?",
    "code": "long n = 1000L;",
    "options": [
      {
        "letter": "A",
        "text": "Suffix with l (lowercase) is forbidden"
      },
      {
        "letter": "B",
        "text": "Suffix with L (e.g., 1000L)"
      },
      {
        "letter": "C",
        "text": "Use 'long()' function"
      },
      {
        "letter": "D",
        "text": "No suffix required"
      }
    ],
    "correct": "B",
    "explanation": "Use L or l to denote long literals; uppercase L avoids confusion with digit '1'."
  },
  {
    "title": "Data Types - Q0238",
    "text": "[Data Types] What is the boolean default value for instance variables?",
    "code": "class A { boolean flag; }",
    "options": [
      {
        "letter": "A",
        "text": "null"
      },
      {
        "letter": "B",
        "text": "false"
      },
      {
        "letter": "C",
        "text": "true"
      },
      {
        "letter": "D",
        "text": "0"
      }
    ],
    "correct": "B",
    "explanation": "Instance boolean variables default to false."
  },
  {
    "title": "Data Types - Q0239",
    "text": "[Data Types] Which type can hold decimal numbers with highest precision (useful for currency)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "BigDecimal"
      },
      {
        "letter": "B",
        "text": "long"
      },
      {
        "letter": "C",
        "text": "float"
      },
      {
        "letter": "D",
        "text": "double"
      }
    ],
    "correct": "A",
    "explanation": "BigDecimal provides arbitrary-precision decimal numbers, preferred for currency."
  },
  {
    "title": "Data Types - Q0240",
    "text": "[Data Types] What is the size of an int in Java (in bits)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "32 bits"
      },
      {
        "letter": "B",
        "text": "8 bits"
      },
      {
        "letter": "C",
        "text": "64 bits"
      },
      {
        "letter": "D",
        "text": "16 bits"
      }
    ],
    "correct": "A",
    "explanation": "Java's int is a 32-bit signed two's complement integer."
  },
  {
    "title": "Data Types - Q0241",
    "text": "[Data Types] Which type would you use to store single characters?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "String"
      },
      {
        "letter": "B",
        "text": "Character[]"
      },
      {
        "letter": "C",
        "text": "byte"
      },
      {
        "letter": "D",
        "text": "char"
      }
    ],
    "correct": "D",
    "explanation": "The 'char' type stores a single 16-bit Unicode character."
  },
  {
    "title": "Data Types - Q0242",
    "text": "[Data Types] Which of these is a floating-point type?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "char"
      },
      {
        "letter": "B",
        "text": "double"
      },
      {
        "letter": "C",
        "text": "boolean"
      },
      {
        "letter": "D",
        "text": "int"
      }
    ],
    "correct": "B",
    "explanation": "double and float are floating-point types; double is 64-bit."
  },
  {
    "title": "Data Types - Q0243",
    "text": "[Data Types] Which literal denotes a long integer in Java?",
    "code": "long n = 1000L;",
    "options": [
      {
        "letter": "A",
        "text": "No suffix required"
      },
      {
        "letter": "B",
        "text": "Suffix with L (e.g., 1000L)"
      },
      {
        "letter": "C",
        "text": "Use 'long()' function"
      },
      {
        "letter": "D",
        "text": "Suffix with l (lowercase) is forbidden"
      }
    ],
    "correct": "B",
    "explanation": "Use L or l to denote long literals; uppercase L avoids confusion with digit '1'."
  },
  {
    "title": "Data Types - Q0244",
    "text": "[Data Types] What is the boolean default value for instance variables?",
    "code": "class A { boolean flag; }",
    "options": [
      {
        "letter": "A",
        "text": "0"
      },
      {
        "letter": "B",
        "text": "false"
      },
      {
        "letter": "C",
        "text": "true"
      },
      {
        "letter": "D",
        "text": "null"
      }
    ],
    "correct": "B",
    "explanation": "Instance boolean variables default to false."
  },
  {
    "title": "Data Types - Q0245",
    "text": "[Data Types] Which type can hold decimal numbers with highest precision (useful for currency)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "double"
      },
      {
        "letter": "B",
        "text": "float"
      },
      {
        "letter": "C",
        "text": "long"
      },
      {
        "letter": "D",
        "text": "BigDecimal"
      }
    ],
    "correct": "D",
    "explanation": "BigDecimal provides arbitrary-precision decimal numbers, preferred for currency."
  },
  {
    "title": "Data Types - Q0246",
    "text": "[Data Types] What is the size of an int in Java (in bits)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "16 bits"
      },
      {
        "letter": "B",
        "text": "64 bits"
      },
      {
        "letter": "C",
        "text": "8 bits"
      },
      {
        "letter": "D",
        "text": "32 bits"
      }
    ],
    "correct": "D",
    "explanation": "Java's int is a 32-bit signed two's complement integer."
  },
  {
    "title": "Data Types - Q0247",
    "text": "[Data Types] Which type would you use to store single characters?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "String"
      },
      {
        "letter": "B",
        "text": "byte"
      },
      {
        "letter": "C",
        "text": "char"
      },
      {
        "letter": "D",
        "text": "Character[]"
      }
    ],
    "correct": "C",
    "explanation": "The 'char' type stores a single 16-bit Unicode character."
  },
  {
    "title": "Data Types - Q0248",
    "text": "[Data Types] Which of these is a floating-point type?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "boolean"
      },
      {
        "letter": "B",
        "text": "int"
      },
      {
        "letter": "C",
        "text": "double"
      },
      {
        "letter": "D",
        "text": "char"
      }
    ],
    "correct": "C",
    "explanation": "double and float are floating-point types; double is 64-bit."
  },
  {
    "title": "Data Types - Q0249",
    "text": "[Data Types] Which literal denotes a long integer in Java?",
    "code": "long n = 1000L;",
    "options": [
      {
        "letter": "A",
        "text": "Suffix with l (lowercase) is forbidden"
      },
      {
        "letter": "B",
        "text": "Use 'long()' function"
      },
      {
        "letter": "C",
        "text": "Suffix with L (e.g., 1000L)"
      },
      {
        "letter": "D",
        "text": "No suffix required"
      }
    ],
    "correct": "C",
    "explanation": "Use L or l to denote long literals; uppercase L avoids confusion with digit '1'."
  },
  {
    "title": "Data Types - Q0250",
    "text": "[Data Types] What is the boolean default value for instance variables?",
    "code": "class A { boolean flag; }",
    "options": [
      {
        "letter": "A",
        "text": "0"
      },
      {
        "letter": "B",
        "text": "null"
      },
      {
        "letter": "C",
        "text": "false"
      },
      {
        "letter": "D",
        "text": "true"
      }
    ],
    "correct": "C",
    "explanation": "Instance boolean variables default to false."
  },
  {
    "title": "Data Types - Q0251",
    "text": "[Data Types] Which type can hold decimal numbers with highest precision (useful for currency)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "float"
      },
      {
        "letter": "B",
        "text": "double"
      },
      {
        "letter": "C",
        "text": "long"
      },
      {
        "letter": "D",
        "text": "BigDecimal"
      }
    ],
    "correct": "D",
    "explanation": "BigDecimal provides arbitrary-precision decimal numbers, preferred for currency."
  },
  {
    "title": "Data Types - Q0252",
    "text": "[Data Types] What is the size of an int in Java (in bits)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "64 bits"
      },
      {
        "letter": "B",
        "text": "32 bits"
      },
      {
        "letter": "C",
        "text": "16 bits"
      },
      {
        "letter": "D",
        "text": "8 bits"
      }
    ],
    "correct": "B",
    "explanation": "Java's int is a 32-bit signed two's complement integer."
  },
  {
    "title": "Data Types - Q0253",
    "text": "[Data Types] Which type would you use to store single characters?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "char"
      },
      {
        "letter": "B",
        "text": "Character[]"
      },
      {
        "letter": "C",
        "text": "byte"
      },
      {
        "letter": "D",
        "text": "String"
      }
    ],
    "correct": "A",
    "explanation": "The 'char' type stores a single 16-bit Unicode character."
  },
  {
    "title": "Data Types - Q0254",
    "text": "[Data Types] Which of these is a floating-point type?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "double"
      },
      {
        "letter": "B",
        "text": "int"
      },
      {
        "letter": "C",
        "text": "char"
      },
      {
        "letter": "D",
        "text": "boolean"
      }
    ],
    "correct": "A",
    "explanation": "double and float are floating-point types; double is 64-bit."
  },
  {
    "title": "Data Types - Q0255",
    "text": "[Data Types] Which literal denotes a long integer in Java?",
    "code": "long n = 1000L;",
    "options": [
      {
        "letter": "A",
        "text": "Use 'long()' function"
      },
      {
        "letter": "B",
        "text": "Suffix with l (lowercase) is forbidden"
      },
      {
        "letter": "C",
        "text": "Suffix with L (e.g., 1000L)"
      },
      {
        "letter": "D",
        "text": "No suffix required"
      }
    ],
    "correct": "C",
    "explanation": "Use L or l to denote long literals; uppercase L avoids confusion with digit '1'."
  },
  {
    "title": "Data Types - Q0256",
    "text": "[Data Types] What is the boolean default value for instance variables?",
    "code": "class A { boolean flag; }",
    "options": [
      {
        "letter": "A",
        "text": "true"
      },
      {
        "letter": "B",
        "text": "null"
      },
      {
        "letter": "C",
        "text": "false"
      },
      {
        "letter": "D",
        "text": "0"
      }
    ],
    "correct": "C",
    "explanation": "Instance boolean variables default to false."
  },
  {
    "title": "Data Types - Q0257",
    "text": "[Data Types] Which type can hold decimal numbers with highest precision (useful for currency)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "BigDecimal"
      },
      {
        "letter": "B",
        "text": "long"
      },
      {
        "letter": "C",
        "text": "double"
      },
      {
        "letter": "D",
        "text": "float"
      }
    ],
    "correct": "A",
    "explanation": "BigDecimal provides arbitrary-precision decimal numbers, preferred for currency."
  },
  {
    "title": "Data Types - Q0258",
    "text": "[Data Types] What is the size of an int in Java (in bits)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "64 bits"
      },
      {
        "letter": "B",
        "text": "32 bits"
      },
      {
        "letter": "C",
        "text": "16 bits"
      },
      {
        "letter": "D",
        "text": "8 bits"
      }
    ],
    "correct": "B",
    "explanation": "Java's int is a 32-bit signed two's complement integer."
  },
  {
    "title": "Data Types - Q0259",
    "text": "[Data Types] Which type would you use to store single characters?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "char"
      },
      {
        "letter": "B",
        "text": "Character[]"
      },
      {
        "letter": "C",
        "text": "byte"
      },
      {
        "letter": "D",
        "text": "String"
      }
    ],
    "correct": "A",
    "explanation": "The 'char' type stores a single 16-bit Unicode character."
  },
  {
    "title": "Data Types - Q0260",
    "text": "[Data Types] Which of these is a floating-point type?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "double"
      },
      {
        "letter": "B",
        "text": "boolean"
      },
      {
        "letter": "C",
        "text": "int"
      },
      {
        "letter": "D",
        "text": "char"
      }
    ],
    "correct": "A",
    "explanation": "double and float are floating-point types; double is 64-bit."
  },
  {
    "title": "Data Types - Q0261",
    "text": "[Data Types] Which literal denotes a long integer in Java?",
    "code": "long n = 1000L;",
    "options": [
      {
        "letter": "A",
        "text": "Suffix with l (lowercase) is forbidden"
      },
      {
        "letter": "B",
        "text": "Suffix with L (e.g., 1000L)"
      },
      {
        "letter": "C",
        "text": "No suffix required"
      },
      {
        "letter": "D",
        "text": "Use 'long()' function"
      }
    ],
    "correct": "B",
    "explanation": "Use L or l to denote long literals; uppercase L avoids confusion with digit '1'."
  },
  {
    "title": "Data Types - Q0262",
    "text": "[Data Types] What is the boolean default value for instance variables?",
    "code": "class A { boolean flag; }",
    "options": [
      {
        "letter": "A",
        "text": "false"
      },
      {
        "letter": "B",
        "text": "null"
      },
      {
        "letter": "C",
        "text": "true"
      },
      {
        "letter": "D",
        "text": "0"
      }
    ],
    "correct": "A",
    "explanation": "Instance boolean variables default to false."
  },
  {
    "title": "Data Types - Q0263",
    "text": "[Data Types] Which type can hold decimal numbers with highest precision (useful for currency)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "float"
      },
      {
        "letter": "B",
        "text": "BigDecimal"
      },
      {
        "letter": "C",
        "text": "long"
      },
      {
        "letter": "D",
        "text": "double"
      }
    ],
    "correct": "B",
    "explanation": "BigDecimal provides arbitrary-precision decimal numbers, preferred for currency."
  },
  {
    "title": "Data Types - Q0264",
    "text": "[Data Types] What is the size of an int in Java (in bits)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "8 bits"
      },
      {
        "letter": "B",
        "text": "16 bits"
      },
      {
        "letter": "C",
        "text": "64 bits"
      },
      {
        "letter": "D",
        "text": "32 bits"
      }
    ],
    "correct": "D",
    "explanation": "Java's int is a 32-bit signed two's complement integer."
  },
  {
    "title": "Data Types - Q0265",
    "text": "[Data Types] Which type would you use to store single characters?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Character[]"
      },
      {
        "letter": "B",
        "text": "char"
      },
      {
        "letter": "C",
        "text": "String"
      },
      {
        "letter": "D",
        "text": "byte"
      }
    ],
    "correct": "B",
    "explanation": "The 'char' type stores a single 16-bit Unicode character."
  },
  {
    "title": "Data Types - Q0266",
    "text": "[Data Types] Which of these is a floating-point type?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "char"
      },
      {
        "letter": "B",
        "text": "boolean"
      },
      {
        "letter": "C",
        "text": "int"
      },
      {
        "letter": "D",
        "text": "double"
      }
    ],
    "correct": "D",
    "explanation": "double and float are floating-point types; double is 64-bit."
  },
  {
    "title": "Data Types - Q0267",
    "text": "[Data Types] Which literal denotes a long integer in Java?",
    "code": "long n = 1000L;",
    "options": [
      {
        "letter": "A",
        "text": "Suffix with L (e.g., 1000L)"
      },
      {
        "letter": "B",
        "text": "Use 'long()' function"
      },
      {
        "letter": "C",
        "text": "No suffix required"
      },
      {
        "letter": "D",
        "text": "Suffix with l (lowercase) is forbidden"
      }
    ],
    "correct": "A",
    "explanation": "Use L or l to denote long literals; uppercase L avoids confusion with digit '1'."
  },
  {
    "title": "Data Types - Q0268",
    "text": "[Data Types] What is the boolean default value for instance variables?",
    "code": "class A { boolean flag; }",
    "options": [
      {
        "letter": "A",
        "text": "null"
      },
      {
        "letter": "B",
        "text": "false"
      },
      {
        "letter": "C",
        "text": "true"
      },
      {
        "letter": "D",
        "text": "0"
      }
    ],
    "correct": "B",
    "explanation": "Instance boolean variables default to false."
  },
  {
    "title": "Data Types - Q0269",
    "text": "[Data Types] Which type can hold decimal numbers with highest precision (useful for currency)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "BigDecimal"
      },
      {
        "letter": "B",
        "text": "double"
      },
      {
        "letter": "C",
        "text": "long"
      },
      {
        "letter": "D",
        "text": "float"
      }
    ],
    "correct": "A",
    "explanation": "BigDecimal provides arbitrary-precision decimal numbers, preferred for currency."
  },
  {
    "title": "Data Types - Q0270",
    "text": "[Data Types] What is the size of an int in Java (in bits)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "64 bits"
      },
      {
        "letter": "B",
        "text": "16 bits"
      },
      {
        "letter": "C",
        "text": "8 bits"
      },
      {
        "letter": "D",
        "text": "32 bits"
      }
    ],
    "correct": "D",
    "explanation": "Java's int is a 32-bit signed two's complement integer."
  },
  {
    "title": "Data Types - Q0271",
    "text": "[Data Types] Which type would you use to store single characters?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Character[]"
      },
      {
        "letter": "B",
        "text": "byte"
      },
      {
        "letter": "C",
        "text": "char"
      },
      {
        "letter": "D",
        "text": "String"
      }
    ],
    "correct": "C",
    "explanation": "The 'char' type stores a single 16-bit Unicode character."
  },
  {
    "title": "Data Types - Q0272",
    "text": "[Data Types] Which of these is a floating-point type?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "char"
      },
      {
        "letter": "B",
        "text": "double"
      },
      {
        "letter": "C",
        "text": "boolean"
      },
      {
        "letter": "D",
        "text": "int"
      }
    ],
    "correct": "B",
    "explanation": "double and float are floating-point types; double is 64-bit."
  },
  {
    "title": "Data Types - Q0273",
    "text": "[Data Types] Which literal denotes a long integer in Java?",
    "code": "long n = 1000L;",
    "options": [
      {
        "letter": "A",
        "text": "Use 'long()' function"
      },
      {
        "letter": "B",
        "text": "No suffix required"
      },
      {
        "letter": "C",
        "text": "Suffix with L (e.g., 1000L)"
      },
      {
        "letter": "D",
        "text": "Suffix with l (lowercase) is forbidden"
      }
    ],
    "correct": "C",
    "explanation": "Use L or l to denote long literals; uppercase L avoids confusion with digit '1'."
  },
  {
    "title": "Data Types - Q0274",
    "text": "[Data Types] What is the boolean default value for instance variables?",
    "code": "class A { boolean flag; }",
    "options": [
      {
        "letter": "A",
        "text": "true"
      },
      {
        "letter": "B",
        "text": "0"
      },
      {
        "letter": "C",
        "text": "null"
      },
      {
        "letter": "D",
        "text": "false"
      }
    ],
    "correct": "D",
    "explanation": "Instance boolean variables default to false."
  },
  {
    "title": "Data Types - Q0275",
    "text": "[Data Types] Which type can hold decimal numbers with highest precision (useful for currency)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "float"
      },
      {
        "letter": "B",
        "text": "BigDecimal"
      },
      {
        "letter": "C",
        "text": "long"
      },
      {
        "letter": "D",
        "text": "double"
      }
    ],
    "correct": "B",
    "explanation": "BigDecimal provides arbitrary-precision decimal numbers, preferred for currency."
  },
  {
    "title": "Data Types - Q0276",
    "text": "[Data Types] What is the size of an int in Java (in bits)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "8 bits"
      },
      {
        "letter": "B",
        "text": "16 bits"
      },
      {
        "letter": "C",
        "text": "64 bits"
      },
      {
        "letter": "D",
        "text": "32 bits"
      }
    ],
    "correct": "D",
    "explanation": "Java's int is a 32-bit signed two's complement integer."
  },
  {
    "title": "Data Types - Q0277",
    "text": "[Data Types] Which type would you use to store single characters?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "byte"
      },
      {
        "letter": "B",
        "text": "Character[]"
      },
      {
        "letter": "C",
        "text": "char"
      },
      {
        "letter": "D",
        "text": "String"
      }
    ],
    "correct": "C",
    "explanation": "The 'char' type stores a single 16-bit Unicode character."
  },
  {
    "title": "Data Types - Q0278",
    "text": "[Data Types] Which of these is a floating-point type?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "int"
      },
      {
        "letter": "B",
        "text": "boolean"
      },
      {
        "letter": "C",
        "text": "char"
      },
      {
        "letter": "D",
        "text": "double"
      }
    ],
    "correct": "D",
    "explanation": "double and float are floating-point types; double is 64-bit."
  },
  {
    "title": "Data Types - Q0279",
    "text": "[Data Types] Which literal denotes a long integer in Java?",
    "code": "long n = 1000L;",
    "options": [
      {
        "letter": "A",
        "text": "Suffix with L (e.g., 1000L)"
      },
      {
        "letter": "B",
        "text": "No suffix required"
      },
      {
        "letter": "C",
        "text": "Use 'long()' function"
      },
      {
        "letter": "D",
        "text": "Suffix with l (lowercase) is forbidden"
      }
    ],
    "correct": "A",
    "explanation": "Use L or l to denote long literals; uppercase L avoids confusion with digit '1'."
  },
  {
    "title": "Data Types - Q0280",
    "text": "[Data Types] What is the boolean default value for instance variables?",
    "code": "class A { boolean flag; }",
    "options": [
      {
        "letter": "A",
        "text": "true"
      },
      {
        "letter": "B",
        "text": "null"
      },
      {
        "letter": "C",
        "text": "false"
      },
      {
        "letter": "D",
        "text": "0"
      }
    ],
    "correct": "C",
    "explanation": "Instance boolean variables default to false."
  },
  {
    "title": "Data Types - Q0281",
    "text": "[Data Types] Which type can hold decimal numbers with highest precision (useful for currency)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "float"
      },
      {
        "letter": "B",
        "text": "long"
      },
      {
        "letter": "C",
        "text": "BigDecimal"
      },
      {
        "letter": "D",
        "text": "double"
      }
    ],
    "correct": "C",
    "explanation": "BigDecimal provides arbitrary-precision decimal numbers, preferred for currency."
  },
  {
    "title": "Data Types - Q0282",
    "text": "[Data Types] What is the size of an int in Java (in bits)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "64 bits"
      },
      {
        "letter": "B",
        "text": "32 bits"
      },
      {
        "letter": "C",
        "text": "8 bits"
      },
      {
        "letter": "D",
        "text": "16 bits"
      }
    ],
    "correct": "B",
    "explanation": "Java's int is a 32-bit signed two's complement integer."
  },
  {
    "title": "Data Types - Q0283",
    "text": "[Data Types] Which type would you use to store single characters?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "char"
      },
      {
        "letter": "B",
        "text": "Character[]"
      },
      {
        "letter": "C",
        "text": "byte"
      },
      {
        "letter": "D",
        "text": "String"
      }
    ],
    "correct": "A",
    "explanation": "The 'char' type stores a single 16-bit Unicode character."
  },
  {
    "title": "Data Types - Q0284",
    "text": "[Data Types] Which of these is a floating-point type?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "char"
      },
      {
        "letter": "B",
        "text": "boolean"
      },
      {
        "letter": "C",
        "text": "double"
      },
      {
        "letter": "D",
        "text": "int"
      }
    ],
    "correct": "C",
    "explanation": "double and float are floating-point types; double is 64-bit."
  },
  {
    "title": "Data Types - Q0285",
    "text": "[Data Types] Which literal denotes a long integer in Java?",
    "code": "long n = 1000L;",
    "options": [
      {
        "letter": "A",
        "text": "Suffix with L (e.g., 1000L)"
      },
      {
        "letter": "B",
        "text": "Use 'long()' function"
      },
      {
        "letter": "C",
        "text": "Suffix with l (lowercase) is forbidden"
      },
      {
        "letter": "D",
        "text": "No suffix required"
      }
    ],
    "correct": "A",
    "explanation": "Use L or l to denote long literals; uppercase L avoids confusion with digit '1'."
  },
  {
    "title": "Data Types - Q0286",
    "text": "[Data Types] What is the boolean default value for instance variables?",
    "code": "class A { boolean flag; }",
    "options": [
      {
        "letter": "A",
        "text": "false"
      },
      {
        "letter": "B",
        "text": "null"
      },
      {
        "letter": "C",
        "text": "true"
      },
      {
        "letter": "D",
        "text": "0"
      }
    ],
    "correct": "A",
    "explanation": "Instance boolean variables default to false."
  },
  {
    "title": "Variables - Q0287",
    "text": "[Variables] Which of these describes shadowing in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Overloading a variable"
      },
      {
        "letter": "B",
        "text": "Renaming a variable"
      },
      {
        "letter": "C",
        "text": "A local variable with same name as a class variable hides the class variable in that scope"
      },
      {
        "letter": "D",
        "text": "Deleting a variable"
      }
    ],
    "correct": "C",
    "explanation": "Shadowing occurs when a local variable masks a field with the same name."
  },
  {
    "title": "Variables - Q0288",
    "text": "[Variables] What is the scope of a local variable declared inside a method?",
    "code": "void foo() { int x = 0; }",
    "options": [
      {
        "letter": "A",
        "text": "Accessible to subclasses"
      },
      {
        "letter": "B",
        "text": "Class-wide"
      },
      {
        "letter": "C",
        "text": "Global"
      },
      {
        "letter": "D",
        "text": "Only within that method/block"
      }
    ],
    "correct": "D",
    "explanation": "Local variables are accessible only within the block or method they are declared in."
  },
  {
    "title": "Variables - Q0289",
    "text": "[Variables] Which of the following is a valid way to initialize a variable?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "a = 10;"
      },
      {
        "letter": "B",
        "text": "int = 10;"
      },
      {
        "letter": "C",
        "text": "int a = 10;"
      },
      {
        "letter": "D",
        "text": "int a;"
      }
    ],
    "correct": "C",
    "explanation": "Declaration with type and initialization is 'int a = 10;'."
  },
  {
    "title": "Variables - Q0290",
    "text": "[Variables] What will be printed for a static variable if not initialized explicitly?",
    "code": "static int count; public static void main(String[] args){ System.out.println(count); }",
    "options": [
      {
        "letter": "A",
        "text": "null"
      },
      {
        "letter": "B",
        "text": "0"
      },
      {
        "letter": "C",
        "text": "Compilation error"
      },
      {
        "letter": "D",
        "text": "undefined"
      }
    ],
    "correct": "B",
    "explanation": "Static (class) int variables default to 0."
  },
  {
    "title": "Variables - Q0291",
    "text": "[Variables] Which keyword makes a variable constant (cannot be reassigned)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "immutable"
      },
      {
        "letter": "B",
        "text": "static"
      },
      {
        "letter": "C",
        "text": "final"
      },
      {
        "letter": "D",
        "text": "const"
      }
    ],
    "correct": "C",
    "explanation": "final prevents reassignment of the variable after initialization."
  },
  {
    "title": "Variables - Q0292",
    "text": "[Variables] Which variable lives as long as the program runs and belongs to the class?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "instance variable"
      },
      {
        "letter": "B",
        "text": "local variable"
      },
      {
        "letter": "C",
        "text": "static variable"
      },
      {
        "letter": "D",
        "text": "parameter"
      }
    ],
    "correct": "C",
    "explanation": "Static variables are class-level and persist for the application's lifetime (class unloading aside)."
  },
  {
    "title": "Variables - Q0293",
    "text": "[Variables] Which of these describes shadowing in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Deleting a variable"
      },
      {
        "letter": "B",
        "text": "A local variable with same name as a class variable hides the class variable in that scope"
      },
      {
        "letter": "C",
        "text": "Overloading a variable"
      },
      {
        "letter": "D",
        "text": "Renaming a variable"
      }
    ],
    "correct": "B",
    "explanation": "Shadowing occurs when a local variable masks a field with the same name."
  },
  {
    "title": "Variables - Q0294",
    "text": "[Variables] What is the scope of a local variable declared inside a method?",
    "code": "void foo() { int x = 0; }",
    "options": [
      {
        "letter": "A",
        "text": "Class-wide"
      },
      {
        "letter": "B",
        "text": "Accessible to subclasses"
      },
      {
        "letter": "C",
        "text": "Only within that method/block"
      },
      {
        "letter": "D",
        "text": "Global"
      }
    ],
    "correct": "C",
    "explanation": "Local variables are accessible only within the block or method they are declared in."
  },
  {
    "title": "Variables - Q0295",
    "text": "[Variables] Which of the following is a valid way to initialize a variable?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "int = 10;"
      },
      {
        "letter": "B",
        "text": "a = 10;"
      },
      {
        "letter": "C",
        "text": "int a;"
      },
      {
        "letter": "D",
        "text": "int a = 10;"
      }
    ],
    "correct": "D",
    "explanation": "Declaration with type and initialization is 'int a = 10;'."
  },
  {
    "title": "Variables - Q0296",
    "text": "[Variables] What will be printed for a static variable if not initialized explicitly?",
    "code": "static int count; public static void main(String[] args){ System.out.println(count); }",
    "options": [
      {
        "letter": "A",
        "text": "Compilation error"
      },
      {
        "letter": "B",
        "text": "undefined"
      },
      {
        "letter": "C",
        "text": "0"
      },
      {
        "letter": "D",
        "text": "null"
      }
    ],
    "correct": "C",
    "explanation": "Static (class) int variables default to 0."
  },
  {
    "title": "Variables - Q0297",
    "text": "[Variables] Which keyword makes a variable constant (cannot be reassigned)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "final"
      },
      {
        "letter": "B",
        "text": "immutable"
      },
      {
        "letter": "C",
        "text": "const"
      },
      {
        "letter": "D",
        "text": "static"
      }
    ],
    "correct": "A",
    "explanation": "final prevents reassignment of the variable after initialization."
  },
  {
    "title": "Variables - Q0298",
    "text": "[Variables] Which variable lives as long as the program runs and belongs to the class?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "local variable"
      },
      {
        "letter": "B",
        "text": "parameter"
      },
      {
        "letter": "C",
        "text": "instance variable"
      },
      {
        "letter": "D",
        "text": "static variable"
      }
    ],
    "correct": "D",
    "explanation": "Static variables are class-level and persist for the application's lifetime (class unloading aside)."
  },
  {
    "title": "Variables - Q0299",
    "text": "[Variables] Which of these describes shadowing in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Overloading a variable"
      },
      {
        "letter": "B",
        "text": "A local variable with same name as a class variable hides the class variable in that scope"
      },
      {
        "letter": "C",
        "text": "Deleting a variable"
      },
      {
        "letter": "D",
        "text": "Renaming a variable"
      }
    ],
    "correct": "B",
    "explanation": "Shadowing occurs when a local variable masks a field with the same name."
  },
  {
    "title": "Variables - Q0300",
    "text": "[Variables] What is the scope of a local variable declared inside a method?",
    "code": "void foo() { int x = 0; }",
    "options": [
      {
        "letter": "A",
        "text": "Accessible to subclasses"
      },
      {
        "letter": "B",
        "text": "Only within that method/block"
      },
      {
        "letter": "C",
        "text": "Global"
      },
      {
        "letter": "D",
        "text": "Class-wide"
      }
    ],
    "correct": "B",
    "explanation": "Local variables are accessible only within the block or method they are declared in."
  },
  {
    "title": "Variables - Q0301",
    "text": "[Variables] Which of the following is a valid way to initialize a variable?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "int a = 10;"
      },
      {
        "letter": "B",
        "text": "int a;"
      },
      {
        "letter": "C",
        "text": "int = 10;"
      },
      {
        "letter": "D",
        "text": "a = 10;"
      }
    ],
    "correct": "A",
    "explanation": "Declaration with type and initialization is 'int a = 10;'."
  },
  {
    "title": "Variables - Q0302",
    "text": "[Variables] What will be printed for a static variable if not initialized explicitly?",
    "code": "static int count; public static void main(String[] args){ System.out.println(count); }",
    "options": [
      {
        "letter": "A",
        "text": "Compilation error"
      },
      {
        "letter": "B",
        "text": "0"
      },
      {
        "letter": "C",
        "text": "undefined"
      },
      {
        "letter": "D",
        "text": "null"
      }
    ],
    "correct": "B",
    "explanation": "Static (class) int variables default to 0."
  },
  {
    "title": "Variables - Q0303",
    "text": "[Variables] Which keyword makes a variable constant (cannot be reassigned)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "static"
      },
      {
        "letter": "B",
        "text": "const"
      },
      {
        "letter": "C",
        "text": "final"
      },
      {
        "letter": "D",
        "text": "immutable"
      }
    ],
    "correct": "C",
    "explanation": "final prevents reassignment of the variable after initialization."
  },
  {
    "title": "Variables - Q0304",
    "text": "[Variables] Which variable lives as long as the program runs and belongs to the class?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "instance variable"
      },
      {
        "letter": "B",
        "text": "static variable"
      },
      {
        "letter": "C",
        "text": "parameter"
      },
      {
        "letter": "D",
        "text": "local variable"
      }
    ],
    "correct": "B",
    "explanation": "Static variables are class-level and persist for the application's lifetime (class unloading aside)."
  },
  {
    "title": "Variables - Q0305",
    "text": "[Variables] Which of these describes shadowing in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Renaming a variable"
      },
      {
        "letter": "B",
        "text": "A local variable with same name as a class variable hides the class variable in that scope"
      },
      {
        "letter": "C",
        "text": "Deleting a variable"
      },
      {
        "letter": "D",
        "text": "Overloading a variable"
      }
    ],
    "correct": "B",
    "explanation": "Shadowing occurs when a local variable masks a field with the same name."
  },
  {
    "title": "Variables - Q0306",
    "text": "[Variables] What is the scope of a local variable declared inside a method?",
    "code": "void foo() { int x = 0; }",
    "options": [
      {
        "letter": "A",
        "text": "Global"
      },
      {
        "letter": "B",
        "text": "Class-wide"
      },
      {
        "letter": "C",
        "text": "Accessible to subclasses"
      },
      {
        "letter": "D",
        "text": "Only within that method/block"
      }
    ],
    "correct": "D",
    "explanation": "Local variables are accessible only within the block or method they are declared in."
  },
  {
    "title": "Variables - Q0307",
    "text": "[Variables] Which of the following is a valid way to initialize a variable?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "int a = 10;"
      },
      {
        "letter": "B",
        "text": "int a;"
      },
      {
        "letter": "C",
        "text": "a = 10;"
      },
      {
        "letter": "D",
        "text": "int = 10;"
      }
    ],
    "correct": "A",
    "explanation": "Declaration with type and initialization is 'int a = 10;'."
  },
  {
    "title": "Variables - Q0308",
    "text": "[Variables] What will be printed for a static variable if not initialized explicitly?",
    "code": "static int count; public static void main(String[] args){ System.out.println(count); }",
    "options": [
      {
        "letter": "A",
        "text": "Compilation error"
      },
      {
        "letter": "B",
        "text": "null"
      },
      {
        "letter": "C",
        "text": "0"
      },
      {
        "letter": "D",
        "text": "undefined"
      }
    ],
    "correct": "C",
    "explanation": "Static (class) int variables default to 0."
  },
  {
    "title": "Variables - Q0309",
    "text": "[Variables] Which keyword makes a variable constant (cannot be reassigned)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "static"
      },
      {
        "letter": "B",
        "text": "immutable"
      },
      {
        "letter": "C",
        "text": "final"
      },
      {
        "letter": "D",
        "text": "const"
      }
    ],
    "correct": "C",
    "explanation": "final prevents reassignment of the variable after initialization."
  },
  {
    "title": "Variables - Q0310",
    "text": "[Variables] Which variable lives as long as the program runs and belongs to the class?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "local variable"
      },
      {
        "letter": "B",
        "text": "parameter"
      },
      {
        "letter": "C",
        "text": "static variable"
      },
      {
        "letter": "D",
        "text": "instance variable"
      }
    ],
    "correct": "C",
    "explanation": "Static variables are class-level and persist for the application's lifetime (class unloading aside)."
  },
  {
    "title": "Variables - Q0311",
    "text": "[Variables] Which of these describes shadowing in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Overloading a variable"
      },
      {
        "letter": "B",
        "text": "Renaming a variable"
      },
      {
        "letter": "C",
        "text": "A local variable with same name as a class variable hides the class variable in that scope"
      },
      {
        "letter": "D",
        "text": "Deleting a variable"
      }
    ],
    "correct": "C",
    "explanation": "Shadowing occurs when a local variable masks a field with the same name."
  },
  {
    "title": "Variables - Q0312",
    "text": "[Variables] What is the scope of a local variable declared inside a method?",
    "code": "void foo() { int x = 0; }",
    "options": [
      {
        "letter": "A",
        "text": "Only within that method/block"
      },
      {
        "letter": "B",
        "text": "Accessible to subclasses"
      },
      {
        "letter": "C",
        "text": "Class-wide"
      },
      {
        "letter": "D",
        "text": "Global"
      }
    ],
    "correct": "A",
    "explanation": "Local variables are accessible only within the block or method they are declared in."
  },
  {
    "title": "Variables - Q0313",
    "text": "[Variables] Which of the following is a valid way to initialize a variable?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "int = 10;"
      },
      {
        "letter": "B",
        "text": "a = 10;"
      },
      {
        "letter": "C",
        "text": "int a = 10;"
      },
      {
        "letter": "D",
        "text": "int a;"
      }
    ],
    "correct": "C",
    "explanation": "Declaration with type and initialization is 'int a = 10;'."
  },
  {
    "title": "Variables - Q0314",
    "text": "[Variables] What will be printed for a static variable if not initialized explicitly?",
    "code": "static int count; public static void main(String[] args){ System.out.println(count); }",
    "options": [
      {
        "letter": "A",
        "text": "undefined"
      },
      {
        "letter": "B",
        "text": "null"
      },
      {
        "letter": "C",
        "text": "0"
      },
      {
        "letter": "D",
        "text": "Compilation error"
      }
    ],
    "correct": "C",
    "explanation": "Static (class) int variables default to 0."
  },
  {
    "title": "Variables - Q0315",
    "text": "[Variables] Which keyword makes a variable constant (cannot be reassigned)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "static"
      },
      {
        "letter": "B",
        "text": "final"
      },
      {
        "letter": "C",
        "text": "immutable"
      },
      {
        "letter": "D",
        "text": "const"
      }
    ],
    "correct": "B",
    "explanation": "final prevents reassignment of the variable after initialization."
  },
  {
    "title": "Variables - Q0316",
    "text": "[Variables] Which variable lives as long as the program runs and belongs to the class?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "parameter"
      },
      {
        "letter": "B",
        "text": "instance variable"
      },
      {
        "letter": "C",
        "text": "local variable"
      },
      {
        "letter": "D",
        "text": "static variable"
      }
    ],
    "correct": "D",
    "explanation": "Static variables are class-level and persist for the application's lifetime (class unloading aside)."
  },
  {
    "title": "Variables - Q0317",
    "text": "[Variables] Which of these describes shadowing in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Renaming a variable"
      },
      {
        "letter": "B",
        "text": "Overloading a variable"
      },
      {
        "letter": "C",
        "text": "Deleting a variable"
      },
      {
        "letter": "D",
        "text": "A local variable with same name as a class variable hides the class variable in that scope"
      }
    ],
    "correct": "D",
    "explanation": "Shadowing occurs when a local variable masks a field with the same name."
  },
  {
    "title": "Variables - Q0318",
    "text": "[Variables] What is the scope of a local variable declared inside a method?",
    "code": "void foo() { int x = 0; }",
    "options": [
      {
        "letter": "A",
        "text": "Class-wide"
      },
      {
        "letter": "B",
        "text": "Accessible to subclasses"
      },
      {
        "letter": "C",
        "text": "Only within that method/block"
      },
      {
        "letter": "D",
        "text": "Global"
      }
    ],
    "correct": "C",
    "explanation": "Local variables are accessible only within the block or method they are declared in."
  },
  {
    "title": "Variables - Q0319",
    "text": "[Variables] Which of the following is a valid way to initialize a variable?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "int = 10;"
      },
      {
        "letter": "B",
        "text": "int a;"
      },
      {
        "letter": "C",
        "text": "int a = 10;"
      },
      {
        "letter": "D",
        "text": "a = 10;"
      }
    ],
    "correct": "C",
    "explanation": "Declaration with type and initialization is 'int a = 10;'."
  },
  {
    "title": "Variables - Q0320",
    "text": "[Variables] What will be printed for a static variable if not initialized explicitly?",
    "code": "static int count; public static void main(String[] args){ System.out.println(count); }",
    "options": [
      {
        "letter": "A",
        "text": "0"
      },
      {
        "letter": "B",
        "text": "undefined"
      },
      {
        "letter": "C",
        "text": "null"
      },
      {
        "letter": "D",
        "text": "Compilation error"
      }
    ],
    "correct": "A",
    "explanation": "Static (class) int variables default to 0."
  },
  {
    "title": "Variables - Q0321",
    "text": "[Variables] Which keyword makes a variable constant (cannot be reassigned)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "final"
      },
      {
        "letter": "B",
        "text": "static"
      },
      {
        "letter": "C",
        "text": "immutable"
      },
      {
        "letter": "D",
        "text": "const"
      }
    ],
    "correct": "A",
    "explanation": "final prevents reassignment of the variable after initialization."
  },
  {
    "title": "Variables - Q0322",
    "text": "[Variables] Which variable lives as long as the program runs and belongs to the class?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "instance variable"
      },
      {
        "letter": "B",
        "text": "parameter"
      },
      {
        "letter": "C",
        "text": "static variable"
      },
      {
        "letter": "D",
        "text": "local variable"
      }
    ],
    "correct": "C",
    "explanation": "Static variables are class-level and persist for the application's lifetime (class unloading aside)."
  },
  {
    "title": "Variables - Q0323",
    "text": "[Variables] Which of these describes shadowing in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Overloading a variable"
      },
      {
        "letter": "B",
        "text": "Deleting a variable"
      },
      {
        "letter": "C",
        "text": "A local variable with same name as a class variable hides the class variable in that scope"
      },
      {
        "letter": "D",
        "text": "Renaming a variable"
      }
    ],
    "correct": "C",
    "explanation": "Shadowing occurs when a local variable masks a field with the same name."
  },
  {
    "title": "Variables - Q0324",
    "text": "[Variables] What is the scope of a local variable declared inside a method?",
    "code": "void foo() { int x = 0; }",
    "options": [
      {
        "letter": "A",
        "text": "Accessible to subclasses"
      },
      {
        "letter": "B",
        "text": "Global"
      },
      {
        "letter": "C",
        "text": "Class-wide"
      },
      {
        "letter": "D",
        "text": "Only within that method/block"
      }
    ],
    "correct": "D",
    "explanation": "Local variables are accessible only within the block or method they are declared in."
  },
  {
    "title": "Variables - Q0325",
    "text": "[Variables] Which of the following is a valid way to initialize a variable?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "int a = 10;"
      },
      {
        "letter": "B",
        "text": "a = 10;"
      },
      {
        "letter": "C",
        "text": "int = 10;"
      },
      {
        "letter": "D",
        "text": "int a;"
      }
    ],
    "correct": "A",
    "explanation": "Declaration with type and initialization is 'int a = 10;'."
  },
  {
    "title": "Variables - Q0326",
    "text": "[Variables] What will be printed for a static variable if not initialized explicitly?",
    "code": "static int count; public static void main(String[] args){ System.out.println(count); }",
    "options": [
      {
        "letter": "A",
        "text": "0"
      },
      {
        "letter": "B",
        "text": "undefined"
      },
      {
        "letter": "C",
        "text": "Compilation error"
      },
      {
        "letter": "D",
        "text": "null"
      }
    ],
    "correct": "A",
    "explanation": "Static (class) int variables default to 0."
  },
  {
    "title": "Variables - Q0327",
    "text": "[Variables] Which keyword makes a variable constant (cannot be reassigned)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "static"
      },
      {
        "letter": "B",
        "text": "immutable"
      },
      {
        "letter": "C",
        "text": "final"
      },
      {
        "letter": "D",
        "text": "const"
      }
    ],
    "correct": "C",
    "explanation": "final prevents reassignment of the variable after initialization."
  },
  {
    "title": "Variables - Q0328",
    "text": "[Variables] Which variable lives as long as the program runs and belongs to the class?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "static variable"
      },
      {
        "letter": "B",
        "text": "instance variable"
      },
      {
        "letter": "C",
        "text": "parameter"
      },
      {
        "letter": "D",
        "text": "local variable"
      }
    ],
    "correct": "A",
    "explanation": "Static variables are class-level and persist for the application's lifetime (class unloading aside)."
  },
  {
    "title": "Variables - Q0329",
    "text": "[Variables] Which of these describes shadowing in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Deleting a variable"
      },
      {
        "letter": "B",
        "text": "A local variable with same name as a class variable hides the class variable in that scope"
      },
      {
        "letter": "C",
        "text": "Overloading a variable"
      },
      {
        "letter": "D",
        "text": "Renaming a variable"
      }
    ],
    "correct": "B",
    "explanation": "Shadowing occurs when a local variable masks a field with the same name."
  },
  {
    "title": "Variables - Q0330",
    "text": "[Variables] What is the scope of a local variable declared inside a method?",
    "code": "void foo() { int x = 0; }",
    "options": [
      {
        "letter": "A",
        "text": "Only within that method/block"
      },
      {
        "letter": "B",
        "text": "Accessible to subclasses"
      },
      {
        "letter": "C",
        "text": "Global"
      },
      {
        "letter": "D",
        "text": "Class-wide"
      }
    ],
    "correct": "A",
    "explanation": "Local variables are accessible only within the block or method they are declared in."
  },
  {
    "title": "Variables - Q0331",
    "text": "[Variables] Which of the following is a valid way to initialize a variable?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "int a;"
      },
      {
        "letter": "B",
        "text": "a = 10;"
      },
      {
        "letter": "C",
        "text": "int = 10;"
      },
      {
        "letter": "D",
        "text": "int a = 10;"
      }
    ],
    "correct": "D",
    "explanation": "Declaration with type and initialization is 'int a = 10;'."
  },
  {
    "title": "Variables - Q0332",
    "text": "[Variables] What will be printed for a static variable if not initialized explicitly?",
    "code": "static int count; public static void main(String[] args){ System.out.println(count); }",
    "options": [
      {
        "letter": "A",
        "text": "null"
      },
      {
        "letter": "B",
        "text": "undefined"
      },
      {
        "letter": "C",
        "text": "0"
      },
      {
        "letter": "D",
        "text": "Compilation error"
      }
    ],
    "correct": "C",
    "explanation": "Static (class) int variables default to 0."
  },
  {
    "title": "Variables - Q0333",
    "text": "[Variables] Which keyword makes a variable constant (cannot be reassigned)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "static"
      },
      {
        "letter": "B",
        "text": "final"
      },
      {
        "letter": "C",
        "text": "const"
      },
      {
        "letter": "D",
        "text": "immutable"
      }
    ],
    "correct": "B",
    "explanation": "final prevents reassignment of the variable after initialization."
  },
  {
    "title": "Variables - Q0334",
    "text": "[Variables] Which variable lives as long as the program runs and belongs to the class?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "instance variable"
      },
      {
        "letter": "B",
        "text": "static variable"
      },
      {
        "letter": "C",
        "text": "parameter"
      },
      {
        "letter": "D",
        "text": "local variable"
      }
    ],
    "correct": "B",
    "explanation": "Static variables are class-level and persist for the application's lifetime (class unloading aside)."
  },
  {
    "title": "Variables - Q0335",
    "text": "[Variables] Which of these describes shadowing in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Deleting a variable"
      },
      {
        "letter": "B",
        "text": "A local variable with same name as a class variable hides the class variable in that scope"
      },
      {
        "letter": "C",
        "text": "Renaming a variable"
      },
      {
        "letter": "D",
        "text": "Overloading a variable"
      }
    ],
    "correct": "B",
    "explanation": "Shadowing occurs when a local variable masks a field with the same name."
  },
  {
    "title": "Variables - Q0336",
    "text": "[Variables] What is the scope of a local variable declared inside a method?",
    "code": "void foo() { int x = 0; }",
    "options": [
      {
        "letter": "A",
        "text": "Class-wide"
      },
      {
        "letter": "B",
        "text": "Only within that method/block"
      },
      {
        "letter": "C",
        "text": "Global"
      },
      {
        "letter": "D",
        "text": "Accessible to subclasses"
      }
    ],
    "correct": "B",
    "explanation": "Local variables are accessible only within the block or method they are declared in."
  },
  {
    "title": "Variables - Q0337",
    "text": "[Variables] Which of the following is a valid way to initialize a variable?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "int a = 10;"
      },
      {
        "letter": "B",
        "text": "a = 10;"
      },
      {
        "letter": "C",
        "text": "int = 10;"
      },
      {
        "letter": "D",
        "text": "int a;"
      }
    ],
    "correct": "A",
    "explanation": "Declaration with type and initialization is 'int a = 10;'."
  },
  {
    "title": "Variables - Q0338",
    "text": "[Variables] What will be printed for a static variable if not initialized explicitly?",
    "code": "static int count; public static void main(String[] args){ System.out.println(count); }",
    "options": [
      {
        "letter": "A",
        "text": "0"
      },
      {
        "letter": "B",
        "text": "null"
      },
      {
        "letter": "C",
        "text": "Compilation error"
      },
      {
        "letter": "D",
        "text": "undefined"
      }
    ],
    "correct": "A",
    "explanation": "Static (class) int variables default to 0."
  },
  {
    "title": "Variables - Q0339",
    "text": "[Variables] Which keyword makes a variable constant (cannot be reassigned)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "static"
      },
      {
        "letter": "B",
        "text": "const"
      },
      {
        "letter": "C",
        "text": "immutable"
      },
      {
        "letter": "D",
        "text": "final"
      }
    ],
    "correct": "D",
    "explanation": "final prevents reassignment of the variable after initialization."
  },
  {
    "title": "Variables - Q0340",
    "text": "[Variables] Which variable lives as long as the program runs and belongs to the class?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "local variable"
      },
      {
        "letter": "B",
        "text": "instance variable"
      },
      {
        "letter": "C",
        "text": "static variable"
      },
      {
        "letter": "D",
        "text": "parameter"
      }
    ],
    "correct": "C",
    "explanation": "Static variables are class-level and persist for the application's lifetime (class unloading aside)."
  },
  {
    "title": "Variables - Q0341",
    "text": "[Variables] Which of these describes shadowing in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "A local variable with same name as a class variable hides the class variable in that scope"
      },
      {
        "letter": "B",
        "text": "Overloading a variable"
      },
      {
        "letter": "C",
        "text": "Renaming a variable"
      },
      {
        "letter": "D",
        "text": "Deleting a variable"
      }
    ],
    "correct": "A",
    "explanation": "Shadowing occurs when a local variable masks a field with the same name."
  },
  {
    "title": "Variables - Q0342",
    "text": "[Variables] What is the scope of a local variable declared inside a method?",
    "code": "void foo() { int x = 0; }",
    "options": [
      {
        "letter": "A",
        "text": "Class-wide"
      },
      {
        "letter": "B",
        "text": "Global"
      },
      {
        "letter": "C",
        "text": "Accessible to subclasses"
      },
      {
        "letter": "D",
        "text": "Only within that method/block"
      }
    ],
    "correct": "D",
    "explanation": "Local variables are accessible only within the block or method they are declared in."
  },
  {
    "title": "Variables - Q0343",
    "text": "[Variables] Which of the following is a valid way to initialize a variable?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "int = 10;"
      },
      {
        "letter": "B",
        "text": "int a;"
      },
      {
        "letter": "C",
        "text": "int a = 10;"
      },
      {
        "letter": "D",
        "text": "a = 10;"
      }
    ],
    "correct": "C",
    "explanation": "Declaration with type and initialization is 'int a = 10;'."
  },
  {
    "title": "Variables - Q0344",
    "text": "[Variables] What will be printed for a static variable if not initialized explicitly?",
    "code": "static int count; public static void main(String[] args){ System.out.println(count); }",
    "options": [
      {
        "letter": "A",
        "text": "0"
      },
      {
        "letter": "B",
        "text": "undefined"
      },
      {
        "letter": "C",
        "text": "null"
      },
      {
        "letter": "D",
        "text": "Compilation error"
      }
    ],
    "correct": "A",
    "explanation": "Static (class) int variables default to 0."
  },
  {
    "title": "Variables - Q0345",
    "text": "[Variables] Which keyword makes a variable constant (cannot be reassigned)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "immutable"
      },
      {
        "letter": "B",
        "text": "const"
      },
      {
        "letter": "C",
        "text": "static"
      },
      {
        "letter": "D",
        "text": "final"
      }
    ],
    "correct": "D",
    "explanation": "final prevents reassignment of the variable after initialization."
  },
  {
    "title": "Variables - Q0346",
    "text": "[Variables] Which variable lives as long as the program runs and belongs to the class?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "instance variable"
      },
      {
        "letter": "B",
        "text": "static variable"
      },
      {
        "letter": "C",
        "text": "local variable"
      },
      {
        "letter": "D",
        "text": "parameter"
      }
    ],
    "correct": "B",
    "explanation": "Static variables are class-level and persist for the application's lifetime (class unloading aside)."
  },
  {
    "title": "Variables - Q0347",
    "text": "[Variables] Which of these describes shadowing in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "A local variable with same name as a class variable hides the class variable in that scope"
      },
      {
        "letter": "B",
        "text": "Renaming a variable"
      },
      {
        "letter": "C",
        "text": "Overloading a variable"
      },
      {
        "letter": "D",
        "text": "Deleting a variable"
      }
    ],
    "correct": "A",
    "explanation": "Shadowing occurs when a local variable masks a field with the same name."
  },
  {
    "title": "Variables - Q0348",
    "text": "[Variables] What is the scope of a local variable declared inside a method?",
    "code": "void foo() { int x = 0; }",
    "options": [
      {
        "letter": "A",
        "text": "Global"
      },
      {
        "letter": "B",
        "text": "Class-wide"
      },
      {
        "letter": "C",
        "text": "Accessible to subclasses"
      },
      {
        "letter": "D",
        "text": "Only within that method/block"
      }
    ],
    "correct": "D",
    "explanation": "Local variables are accessible only within the block or method they are declared in."
  },
  {
    "title": "Variables - Q0349",
    "text": "[Variables] Which of the following is a valid way to initialize a variable?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "int a;"
      },
      {
        "letter": "B",
        "text": "a = 10;"
      },
      {
        "letter": "C",
        "text": "int = 10;"
      },
      {
        "letter": "D",
        "text": "int a = 10;"
      }
    ],
    "correct": "D",
    "explanation": "Declaration with type and initialization is 'int a = 10;'."
  },
  {
    "title": "Variables - Q0350",
    "text": "[Variables] What will be printed for a static variable if not initialized explicitly?",
    "code": "static int count; public static void main(String[] args){ System.out.println(count); }",
    "options": [
      {
        "letter": "A",
        "text": "0"
      },
      {
        "letter": "B",
        "text": "Compilation error"
      },
      {
        "letter": "C",
        "text": "undefined"
      },
      {
        "letter": "D",
        "text": "null"
      }
    ],
    "correct": "A",
    "explanation": "Static (class) int variables default to 0."
  },
  {
    "title": "Variables - Q0351",
    "text": "[Variables] Which keyword makes a variable constant (cannot be reassigned)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "final"
      },
      {
        "letter": "B",
        "text": "immutable"
      },
      {
        "letter": "C",
        "text": "static"
      },
      {
        "letter": "D",
        "text": "const"
      }
    ],
    "correct": "A",
    "explanation": "final prevents reassignment of the variable after initialization."
  },
  {
    "title": "Variables - Q0352",
    "text": "[Variables] Which variable lives as long as the program runs and belongs to the class?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "parameter"
      },
      {
        "letter": "B",
        "text": "local variable"
      },
      {
        "letter": "C",
        "text": "static variable"
      },
      {
        "letter": "D",
        "text": "instance variable"
      }
    ],
    "correct": "C",
    "explanation": "Static variables are class-level and persist for the application's lifetime (class unloading aside)."
  },
  {
    "title": "Variables - Q0353",
    "text": "[Variables] Which of these describes shadowing in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Overloading a variable"
      },
      {
        "letter": "B",
        "text": "A local variable with same name as a class variable hides the class variable in that scope"
      },
      {
        "letter": "C",
        "text": "Renaming a variable"
      },
      {
        "letter": "D",
        "text": "Deleting a variable"
      }
    ],
    "correct": "B",
    "explanation": "Shadowing occurs when a local variable masks a field with the same name."
  },
  {
    "title": "Variables - Q0354",
    "text": "[Variables] What is the scope of a local variable declared inside a method?",
    "code": "void foo() { int x = 0; }",
    "options": [
      {
        "letter": "A",
        "text": "Accessible to subclasses"
      },
      {
        "letter": "B",
        "text": "Only within that method/block"
      },
      {
        "letter": "C",
        "text": "Class-wide"
      },
      {
        "letter": "D",
        "text": "Global"
      }
    ],
    "correct": "B",
    "explanation": "Local variables are accessible only within the block or method they are declared in."
  },
  {
    "title": "Variables - Q0355",
    "text": "[Variables] Which of the following is a valid way to initialize a variable?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "a = 10;"
      },
      {
        "letter": "B",
        "text": "int a = 10;"
      },
      {
        "letter": "C",
        "text": "int a;"
      },
      {
        "letter": "D",
        "text": "int = 10;"
      }
    ],
    "correct": "B",
    "explanation": "Declaration with type and initialization is 'int a = 10;'."
  },
  {
    "title": "Variables - Q0356",
    "text": "[Variables] What will be printed for a static variable if not initialized explicitly?",
    "code": "static int count; public static void main(String[] args){ System.out.println(count); }",
    "options": [
      {
        "letter": "A",
        "text": "0"
      },
      {
        "letter": "B",
        "text": "undefined"
      },
      {
        "letter": "C",
        "text": "Compilation error"
      },
      {
        "letter": "D",
        "text": "null"
      }
    ],
    "correct": "A",
    "explanation": "Static (class) int variables default to 0."
  },
  {
    "title": "Variables - Q0357",
    "text": "[Variables] Which keyword makes a variable constant (cannot be reassigned)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "final"
      },
      {
        "letter": "B",
        "text": "static"
      },
      {
        "letter": "C",
        "text": "immutable"
      },
      {
        "letter": "D",
        "text": "const"
      }
    ],
    "correct": "A",
    "explanation": "final prevents reassignment of the variable after initialization."
  },
  {
    "title": "Variables - Q0358",
    "text": "[Variables] Which variable lives as long as the program runs and belongs to the class?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "static variable"
      },
      {
        "letter": "B",
        "text": "instance variable"
      },
      {
        "letter": "C",
        "text": "local variable"
      },
      {
        "letter": "D",
        "text": "parameter"
      }
    ],
    "correct": "A",
    "explanation": "Static variables are class-level and persist for the application's lifetime (class unloading aside)."
  },
  {
    "title": "Variables - Q0359",
    "text": "[Variables] Which of these describes shadowing in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Renaming a variable"
      },
      {
        "letter": "B",
        "text": "Overloading a variable"
      },
      {
        "letter": "C",
        "text": "A local variable with same name as a class variable hides the class variable in that scope"
      },
      {
        "letter": "D",
        "text": "Deleting a variable"
      }
    ],
    "correct": "C",
    "explanation": "Shadowing occurs when a local variable masks a field with the same name."
  },
  {
    "title": "Variables - Q0360",
    "text": "[Variables] What is the scope of a local variable declared inside a method?",
    "code": "void foo() { int x = 0; }",
    "options": [
      {
        "letter": "A",
        "text": "Class-wide"
      },
      {
        "letter": "B",
        "text": "Only within that method/block"
      },
      {
        "letter": "C",
        "text": "Global"
      },
      {
        "letter": "D",
        "text": "Accessible to subclasses"
      }
    ],
    "correct": "B",
    "explanation": "Local variables are accessible only within the block or method they are declared in."
  },
  {
    "title": "Variables - Q0361",
    "text": "[Variables] Which of the following is a valid way to initialize a variable?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "a = 10;"
      },
      {
        "letter": "B",
        "text": "int a;"
      },
      {
        "letter": "C",
        "text": "int = 10;"
      },
      {
        "letter": "D",
        "text": "int a = 10;"
      }
    ],
    "correct": "D",
    "explanation": "Declaration with type and initialization is 'int a = 10;'."
  },
  {
    "title": "Variables - Q0362",
    "text": "[Variables] What will be printed for a static variable if not initialized explicitly?",
    "code": "static int count; public static void main(String[] args){ System.out.println(count); }",
    "options": [
      {
        "letter": "A",
        "text": "undefined"
      },
      {
        "letter": "B",
        "text": "null"
      },
      {
        "letter": "C",
        "text": "0"
      },
      {
        "letter": "D",
        "text": "Compilation error"
      }
    ],
    "correct": "C",
    "explanation": "Static (class) int variables default to 0."
  },
  {
    "title": "Variables - Q0363",
    "text": "[Variables] Which keyword makes a variable constant (cannot be reassigned)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "static"
      },
      {
        "letter": "B",
        "text": "const"
      },
      {
        "letter": "C",
        "text": "immutable"
      },
      {
        "letter": "D",
        "text": "final"
      }
    ],
    "correct": "D",
    "explanation": "final prevents reassignment of the variable after initialization."
  },
  {
    "title": "Variables - Q0364",
    "text": "[Variables] Which variable lives as long as the program runs and belongs to the class?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "instance variable"
      },
      {
        "letter": "B",
        "text": "local variable"
      },
      {
        "letter": "C",
        "text": "parameter"
      },
      {
        "letter": "D",
        "text": "static variable"
      }
    ],
    "correct": "D",
    "explanation": "Static variables are class-level and persist for the application's lifetime (class unloading aside)."
  },
  {
    "title": "Variables - Q0365",
    "text": "[Variables] Which of these describes shadowing in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Overloading a variable"
      },
      {
        "letter": "B",
        "text": "Deleting a variable"
      },
      {
        "letter": "C",
        "text": "Renaming a variable"
      },
      {
        "letter": "D",
        "text": "A local variable with same name as a class variable hides the class variable in that scope"
      }
    ],
    "correct": "D",
    "explanation": "Shadowing occurs when a local variable masks a field with the same name."
  },
  {
    "title": "Variables - Q0366",
    "text": "[Variables] What is the scope of a local variable declared inside a method?",
    "code": "void foo() { int x = 0; }",
    "options": [
      {
        "letter": "A",
        "text": "Class-wide"
      },
      {
        "letter": "B",
        "text": "Accessible to subclasses"
      },
      {
        "letter": "C",
        "text": "Only within that method/block"
      },
      {
        "letter": "D",
        "text": "Global"
      }
    ],
    "correct": "C",
    "explanation": "Local variables are accessible only within the block or method they are declared in."
  },
  {
    "title": "Variables - Q0367",
    "text": "[Variables] Which of the following is a valid way to initialize a variable?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "int = 10;"
      },
      {
        "letter": "B",
        "text": "int a;"
      },
      {
        "letter": "C",
        "text": "a = 10;"
      },
      {
        "letter": "D",
        "text": "int a = 10;"
      }
    ],
    "correct": "D",
    "explanation": "Declaration with type and initialization is 'int a = 10;'."
  },
  {
    "title": "Variables - Q0368",
    "text": "[Variables] What will be printed for a static variable if not initialized explicitly?",
    "code": "static int count; public static void main(String[] args){ System.out.println(count); }",
    "options": [
      {
        "letter": "A",
        "text": "null"
      },
      {
        "letter": "B",
        "text": "Compilation error"
      },
      {
        "letter": "C",
        "text": "undefined"
      },
      {
        "letter": "D",
        "text": "0"
      }
    ],
    "correct": "D",
    "explanation": "Static (class) int variables default to 0."
  },
  {
    "title": "Variables - Q0369",
    "text": "[Variables] Which keyword makes a variable constant (cannot be reassigned)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "static"
      },
      {
        "letter": "B",
        "text": "const"
      },
      {
        "letter": "C",
        "text": "final"
      },
      {
        "letter": "D",
        "text": "immutable"
      }
    ],
    "correct": "C",
    "explanation": "final prevents reassignment of the variable after initialization."
  },
  {
    "title": "Variables - Q0370",
    "text": "[Variables] Which variable lives as long as the program runs and belongs to the class?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "instance variable"
      },
      {
        "letter": "B",
        "text": "local variable"
      },
      {
        "letter": "C",
        "text": "parameter"
      },
      {
        "letter": "D",
        "text": "static variable"
      }
    ],
    "correct": "D",
    "explanation": "Static variables are class-level and persist for the application's lifetime (class unloading aside)."
  },
  {
    "title": "Variables - Q0371",
    "text": "[Variables] Which of these describes shadowing in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Overloading a variable"
      },
      {
        "letter": "B",
        "text": "Deleting a variable"
      },
      {
        "letter": "C",
        "text": "A local variable with same name as a class variable hides the class variable in that scope"
      },
      {
        "letter": "D",
        "text": "Renaming a variable"
      }
    ],
    "correct": "C",
    "explanation": "Shadowing occurs when a local variable masks a field with the same name."
  },
  {
    "title": "Variables - Q0372",
    "text": "[Variables] What is the scope of a local variable declared inside a method?",
    "code": "void foo() { int x = 0; }",
    "options": [
      {
        "letter": "A",
        "text": "Accessible to subclasses"
      },
      {
        "letter": "B",
        "text": "Only within that method/block"
      },
      {
        "letter": "C",
        "text": "Global"
      },
      {
        "letter": "D",
        "text": "Class-wide"
      }
    ],
    "correct": "B",
    "explanation": "Local variables are accessible only within the block or method they are declared in."
  },
  {
    "title": "Variables - Q0373",
    "text": "[Variables] Which of the following is a valid way to initialize a variable?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "a = 10;"
      },
      {
        "letter": "B",
        "text": "int a;"
      },
      {
        "letter": "C",
        "text": "int = 10;"
      },
      {
        "letter": "D",
        "text": "int a = 10;"
      }
    ],
    "correct": "D",
    "explanation": "Declaration with type and initialization is 'int a = 10;'."
  },
  {
    "title": "Variables - Q0374",
    "text": "[Variables] What will be printed for a static variable if not initialized explicitly?",
    "code": "static int count; public static void main(String[] args){ System.out.println(count); }",
    "options": [
      {
        "letter": "A",
        "text": "undefined"
      },
      {
        "letter": "B",
        "text": "Compilation error"
      },
      {
        "letter": "C",
        "text": "null"
      },
      {
        "letter": "D",
        "text": "0"
      }
    ],
    "correct": "D",
    "explanation": "Static (class) int variables default to 0."
  },
  {
    "title": "Variables - Q0375",
    "text": "[Variables] Which keyword makes a variable constant (cannot be reassigned)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "static"
      },
      {
        "letter": "B",
        "text": "immutable"
      },
      {
        "letter": "C",
        "text": "final"
      },
      {
        "letter": "D",
        "text": "const"
      }
    ],
    "correct": "C",
    "explanation": "final prevents reassignment of the variable after initialization."
  },
  {
    "title": "Variables - Q0376",
    "text": "[Variables] Which variable lives as long as the program runs and belongs to the class?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "parameter"
      },
      {
        "letter": "B",
        "text": "static variable"
      },
      {
        "letter": "C",
        "text": "instance variable"
      },
      {
        "letter": "D",
        "text": "local variable"
      }
    ],
    "correct": "B",
    "explanation": "Static variables are class-level and persist for the application's lifetime (class unloading aside)."
  },
  {
    "title": "Variables - Q0377",
    "text": "[Variables] Which of these describes shadowing in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "A local variable with same name as a class variable hides the class variable in that scope"
      },
      {
        "letter": "B",
        "text": "Deleting a variable"
      },
      {
        "letter": "C",
        "text": "Renaming a variable"
      },
      {
        "letter": "D",
        "text": "Overloading a variable"
      }
    ],
    "correct": "A",
    "explanation": "Shadowing occurs when a local variable masks a field with the same name."
  },
  {
    "title": "Variables - Q0378",
    "text": "[Variables] What is the scope of a local variable declared inside a method?",
    "code": "void foo() { int x = 0; }",
    "options": [
      {
        "letter": "A",
        "text": "Global"
      },
      {
        "letter": "B",
        "text": "Only within that method/block"
      },
      {
        "letter": "C",
        "text": "Class-wide"
      },
      {
        "letter": "D",
        "text": "Accessible to subclasses"
      }
    ],
    "correct": "B",
    "explanation": "Local variables are accessible only within the block or method they are declared in."
  },
  {
    "title": "Variables - Q0379",
    "text": "[Variables] Which of the following is a valid way to initialize a variable?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "int = 10;"
      },
      {
        "letter": "B",
        "text": "int a;"
      },
      {
        "letter": "C",
        "text": "int a = 10;"
      },
      {
        "letter": "D",
        "text": "a = 10;"
      }
    ],
    "correct": "C",
    "explanation": "Declaration with type and initialization is 'int a = 10;'."
  },
  {
    "title": "Variables - Q0380",
    "text": "[Variables] What will be printed for a static variable if not initialized explicitly?",
    "code": "static int count; public static void main(String[] args){ System.out.println(count); }",
    "options": [
      {
        "letter": "A",
        "text": "undefined"
      },
      {
        "letter": "B",
        "text": "Compilation error"
      },
      {
        "letter": "C",
        "text": "0"
      },
      {
        "letter": "D",
        "text": "null"
      }
    ],
    "correct": "C",
    "explanation": "Static (class) int variables default to 0."
  },
  {
    "title": "Variables - Q0381",
    "text": "[Variables] Which keyword makes a variable constant (cannot be reassigned)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "immutable"
      },
      {
        "letter": "B",
        "text": "const"
      },
      {
        "letter": "C",
        "text": "static"
      },
      {
        "letter": "D",
        "text": "final"
      }
    ],
    "correct": "D",
    "explanation": "final prevents reassignment of the variable after initialization."
  },
  {
    "title": "Variables - Q0382",
    "text": "[Variables] Which variable lives as long as the program runs and belongs to the class?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "instance variable"
      },
      {
        "letter": "B",
        "text": "static variable"
      },
      {
        "letter": "C",
        "text": "local variable"
      },
      {
        "letter": "D",
        "text": "parameter"
      }
    ],
    "correct": "B",
    "explanation": "Static variables are class-level and persist for the application's lifetime (class unloading aside)."
  },
  {
    "title": "Variables - Q0383",
    "text": "[Variables] Which of these describes shadowing in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Overloading a variable"
      },
      {
        "letter": "B",
        "text": "Deleting a variable"
      },
      {
        "letter": "C",
        "text": "A local variable with same name as a class variable hides the class variable in that scope"
      },
      {
        "letter": "D",
        "text": "Renaming a variable"
      }
    ],
    "correct": "C",
    "explanation": "Shadowing occurs when a local variable masks a field with the same name."
  },
  {
    "title": "Variables - Q0384",
    "text": "[Variables] What is the scope of a local variable declared inside a method?",
    "code": "void foo() { int x = 0; }",
    "options": [
      {
        "letter": "A",
        "text": "Global"
      },
      {
        "letter": "B",
        "text": "Only within that method/block"
      },
      {
        "letter": "C",
        "text": "Accessible to subclasses"
      },
      {
        "letter": "D",
        "text": "Class-wide"
      }
    ],
    "correct": "B",
    "explanation": "Local variables are accessible only within the block or method they are declared in."
  },
  {
    "title": "Variables - Q0385",
    "text": "[Variables] Which of the following is a valid way to initialize a variable?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "int a;"
      },
      {
        "letter": "B",
        "text": "a = 10;"
      },
      {
        "letter": "C",
        "text": "int = 10;"
      },
      {
        "letter": "D",
        "text": "int a = 10;"
      }
    ],
    "correct": "D",
    "explanation": "Declaration with type and initialization is 'int a = 10;'."
  },
  {
    "title": "Variables - Q0386",
    "text": "[Variables] What will be printed for a static variable if not initialized explicitly?",
    "code": "static int count; public static void main(String[] args){ System.out.println(count); }",
    "options": [
      {
        "letter": "A",
        "text": "Compilation error"
      },
      {
        "letter": "B",
        "text": "undefined"
      },
      {
        "letter": "C",
        "text": "null"
      },
      {
        "letter": "D",
        "text": "0"
      }
    ],
    "correct": "D",
    "explanation": "Static (class) int variables default to 0."
  },
  {
    "title": "Variables - Q0387",
    "text": "[Variables] Which keyword makes a variable constant (cannot be reassigned)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "immutable"
      },
      {
        "letter": "B",
        "text": "final"
      },
      {
        "letter": "C",
        "text": "static"
      },
      {
        "letter": "D",
        "text": "const"
      }
    ],
    "correct": "B",
    "explanation": "final prevents reassignment of the variable after initialization."
  },
  {
    "title": "Variables - Q0388",
    "text": "[Variables] Which variable lives as long as the program runs and belongs to the class?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "instance variable"
      },
      {
        "letter": "B",
        "text": "static variable"
      },
      {
        "letter": "C",
        "text": "local variable"
      },
      {
        "letter": "D",
        "text": "parameter"
      }
    ],
    "correct": "B",
    "explanation": "Static variables are class-level and persist for the application's lifetime (class unloading aside)."
  },
  {
    "title": "Variables - Q0389",
    "text": "[Variables] Which of these describes shadowing in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Deleting a variable"
      },
      {
        "letter": "B",
        "text": "A local variable with same name as a class variable hides the class variable in that scope"
      },
      {
        "letter": "C",
        "text": "Overloading a variable"
      },
      {
        "letter": "D",
        "text": "Renaming a variable"
      }
    ],
    "correct": "B",
    "explanation": "Shadowing occurs when a local variable masks a field with the same name."
  },
  {
    "title": "Variables - Q0390",
    "text": "[Variables] What is the scope of a local variable declared inside a method?",
    "code": "void foo() { int x = 0; }",
    "options": [
      {
        "letter": "A",
        "text": "Only within that method/block"
      },
      {
        "letter": "B",
        "text": "Class-wide"
      },
      {
        "letter": "C",
        "text": "Global"
      },
      {
        "letter": "D",
        "text": "Accessible to subclasses"
      }
    ],
    "correct": "A",
    "explanation": "Local variables are accessible only within the block or method they are declared in."
  },
  {
    "title": "Variables - Q0391",
    "text": "[Variables] Which of the following is a valid way to initialize a variable?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "int a;"
      },
      {
        "letter": "B",
        "text": "int = 10;"
      },
      {
        "letter": "C",
        "text": "a = 10;"
      },
      {
        "letter": "D",
        "text": "int a = 10;"
      }
    ],
    "correct": "D",
    "explanation": "Declaration with type and initialization is 'int a = 10;'."
  },
  {
    "title": "Variables - Q0392",
    "text": "[Variables] What will be printed for a static variable if not initialized explicitly?",
    "code": "static int count; public static void main(String[] args){ System.out.println(count); }",
    "options": [
      {
        "letter": "A",
        "text": "0"
      },
      {
        "letter": "B",
        "text": "Compilation error"
      },
      {
        "letter": "C",
        "text": "undefined"
      },
      {
        "letter": "D",
        "text": "null"
      }
    ],
    "correct": "A",
    "explanation": "Static (class) int variables default to 0."
  },
  {
    "title": "Variables - Q0393",
    "text": "[Variables] Which keyword makes a variable constant (cannot be reassigned)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "const"
      },
      {
        "letter": "B",
        "text": "static"
      },
      {
        "letter": "C",
        "text": "final"
      },
      {
        "letter": "D",
        "text": "immutable"
      }
    ],
    "correct": "C",
    "explanation": "final prevents reassignment of the variable after initialization."
  },
  {
    "title": "Variables - Q0394",
    "text": "[Variables] Which variable lives as long as the program runs and belongs to the class?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "parameter"
      },
      {
        "letter": "B",
        "text": "local variable"
      },
      {
        "letter": "C",
        "text": "instance variable"
      },
      {
        "letter": "D",
        "text": "static variable"
      }
    ],
    "correct": "D",
    "explanation": "Static variables are class-level and persist for the application's lifetime (class unloading aside)."
  },
  {
    "title": "Variables - Q0395",
    "text": "[Variables] Which of these describes shadowing in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "A local variable with same name as a class variable hides the class variable in that scope"
      },
      {
        "letter": "B",
        "text": "Renaming a variable"
      },
      {
        "letter": "C",
        "text": "Deleting a variable"
      },
      {
        "letter": "D",
        "text": "Overloading a variable"
      }
    ],
    "correct": "A",
    "explanation": "Shadowing occurs when a local variable masks a field with the same name."
  },
  {
    "title": "Variables - Q0396",
    "text": "[Variables] What is the scope of a local variable declared inside a method?",
    "code": "void foo() { int x = 0; }",
    "options": [
      {
        "letter": "A",
        "text": "Class-wide"
      },
      {
        "letter": "B",
        "text": "Only within that method/block"
      },
      {
        "letter": "C",
        "text": "Global"
      },
      {
        "letter": "D",
        "text": "Accessible to subclasses"
      }
    ],
    "correct": "B",
    "explanation": "Local variables are accessible only within the block or method they are declared in."
  },
  {
    "title": "Variables - Q0397",
    "text": "[Variables] Which of the following is a valid way to initialize a variable?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "int a = 10;"
      },
      {
        "letter": "B",
        "text": "int = 10;"
      },
      {
        "letter": "C",
        "text": "a = 10;"
      },
      {
        "letter": "D",
        "text": "int a;"
      }
    ],
    "correct": "A",
    "explanation": "Declaration with type and initialization is 'int a = 10;'."
  },
  {
    "title": "Variables - Q0398",
    "text": "[Variables] What will be printed for a static variable if not initialized explicitly?",
    "code": "static int count; public static void main(String[] args){ System.out.println(count); }",
    "options": [
      {
        "letter": "A",
        "text": "Compilation error"
      },
      {
        "letter": "B",
        "text": "0"
      },
      {
        "letter": "C",
        "text": "null"
      },
      {
        "letter": "D",
        "text": "undefined"
      }
    ],
    "correct": "B",
    "explanation": "Static (class) int variables default to 0."
  },
  {
    "title": "Variables - Q0399",
    "text": "[Variables] Which keyword makes a variable constant (cannot be reassigned)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "immutable"
      },
      {
        "letter": "B",
        "text": "const"
      },
      {
        "letter": "C",
        "text": "final"
      },
      {
        "letter": "D",
        "text": "static"
      }
    ],
    "correct": "C",
    "explanation": "final prevents reassignment of the variable after initialization."
  },
  {
    "title": "Variables - Q0400",
    "text": "[Variables] Which variable lives as long as the program runs and belongs to the class?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "local variable"
      },
      {
        "letter": "B",
        "text": "instance variable"
      },
      {
        "letter": "C",
        "text": "parameter"
      },
      {
        "letter": "D",
        "text": "static variable"
      }
    ],
    "correct": "D",
    "explanation": "Static variables are class-level and persist for the application's lifetime (class unloading aside)."
  },
  {
    "title": "Variables - Q0401",
    "text": "[Variables] Which of these describes shadowing in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Renaming a variable"
      },
      {
        "letter": "B",
        "text": "Deleting a variable"
      },
      {
        "letter": "C",
        "text": "Overloading a variable"
      },
      {
        "letter": "D",
        "text": "A local variable with same name as a class variable hides the class variable in that scope"
      }
    ],
    "correct": "D",
    "explanation": "Shadowing occurs when a local variable masks a field with the same name."
  },
  {
    "title": "Variables - Q0402",
    "text": "[Variables] What is the scope of a local variable declared inside a method?",
    "code": "void foo() { int x = 0; }",
    "options": [
      {
        "letter": "A",
        "text": "Only within that method/block"
      },
      {
        "letter": "B",
        "text": "Global"
      },
      {
        "letter": "C",
        "text": "Class-wide"
      },
      {
        "letter": "D",
        "text": "Accessible to subclasses"
      }
    ],
    "correct": "A",
    "explanation": "Local variables are accessible only within the block or method they are declared in."
  },
  {
    "title": "Variables - Q0403",
    "text": "[Variables] Which of the following is a valid way to initialize a variable?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "int a;"
      },
      {
        "letter": "B",
        "text": "a = 10;"
      },
      {
        "letter": "C",
        "text": "int a = 10;"
      },
      {
        "letter": "D",
        "text": "int = 10;"
      }
    ],
    "correct": "C",
    "explanation": "Declaration with type and initialization is 'int a = 10;'."
  },
  {
    "title": "Variables - Q0404",
    "text": "[Variables] What will be printed for a static variable if not initialized explicitly?",
    "code": "static int count; public static void main(String[] args){ System.out.println(count); }",
    "options": [
      {
        "letter": "A",
        "text": "undefined"
      },
      {
        "letter": "B",
        "text": "0"
      },
      {
        "letter": "C",
        "text": "null"
      },
      {
        "letter": "D",
        "text": "Compilation error"
      }
    ],
    "correct": "B",
    "explanation": "Static (class) int variables default to 0."
  },
  {
    "title": "Variables - Q0405",
    "text": "[Variables] Which keyword makes a variable constant (cannot be reassigned)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "const"
      },
      {
        "letter": "B",
        "text": "static"
      },
      {
        "letter": "C",
        "text": "final"
      },
      {
        "letter": "D",
        "text": "immutable"
      }
    ],
    "correct": "C",
    "explanation": "final prevents reassignment of the variable after initialization."
  },
  {
    "title": "Variables - Q0406",
    "text": "[Variables] Which variable lives as long as the program runs and belongs to the class?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "instance variable"
      },
      {
        "letter": "B",
        "text": "local variable"
      },
      {
        "letter": "C",
        "text": "static variable"
      },
      {
        "letter": "D",
        "text": "parameter"
      }
    ],
    "correct": "C",
    "explanation": "Static variables are class-level and persist for the application's lifetime (class unloading aside)."
  },
  {
    "title": "Variables - Q0407",
    "text": "[Variables] Which of these describes shadowing in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Overloading a variable"
      },
      {
        "letter": "B",
        "text": "Renaming a variable"
      },
      {
        "letter": "C",
        "text": "Deleting a variable"
      },
      {
        "letter": "D",
        "text": "A local variable with same name as a class variable hides the class variable in that scope"
      }
    ],
    "correct": "D",
    "explanation": "Shadowing occurs when a local variable masks a field with the same name."
  },
  {
    "title": "Variables - Q0408",
    "text": "[Variables] What is the scope of a local variable declared inside a method?",
    "code": "void foo() { int x = 0; }",
    "options": [
      {
        "letter": "A",
        "text": "Class-wide"
      },
      {
        "letter": "B",
        "text": "Global"
      },
      {
        "letter": "C",
        "text": "Only within that method/block"
      },
      {
        "letter": "D",
        "text": "Accessible to subclasses"
      }
    ],
    "correct": "C",
    "explanation": "Local variables are accessible only within the block or method they are declared in."
  },
  {
    "title": "Variables - Q0409",
    "text": "[Variables] Which of the following is a valid way to initialize a variable?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "int a = 10;"
      },
      {
        "letter": "B",
        "text": "int = 10;"
      },
      {
        "letter": "C",
        "text": "int a;"
      },
      {
        "letter": "D",
        "text": "a = 10;"
      }
    ],
    "correct": "A",
    "explanation": "Declaration with type and initialization is 'int a = 10;'."
  },
  {
    "title": "Variables - Q0410",
    "text": "[Variables] What will be printed for a static variable if not initialized explicitly?",
    "code": "static int count; public static void main(String[] args){ System.out.println(count); }",
    "options": [
      {
        "letter": "A",
        "text": "null"
      },
      {
        "letter": "B",
        "text": "undefined"
      },
      {
        "letter": "C",
        "text": "0"
      },
      {
        "letter": "D",
        "text": "Compilation error"
      }
    ],
    "correct": "C",
    "explanation": "Static (class) int variables default to 0."
  },
  {
    "title": "Variables - Q0411",
    "text": "[Variables] Which keyword makes a variable constant (cannot be reassigned)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "static"
      },
      {
        "letter": "B",
        "text": "immutable"
      },
      {
        "letter": "C",
        "text": "final"
      },
      {
        "letter": "D",
        "text": "const"
      }
    ],
    "correct": "C",
    "explanation": "final prevents reassignment of the variable after initialization."
  },
  {
    "title": "Variables - Q0412",
    "text": "[Variables] Which variable lives as long as the program runs and belongs to the class?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "parameter"
      },
      {
        "letter": "B",
        "text": "instance variable"
      },
      {
        "letter": "C",
        "text": "local variable"
      },
      {
        "letter": "D",
        "text": "static variable"
      }
    ],
    "correct": "D",
    "explanation": "Static variables are class-level and persist for the application's lifetime (class unloading aside)."
  },
  {
    "title": "Variables - Q0413",
    "text": "[Variables] Which of these describes shadowing in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Deleting a variable"
      },
      {
        "letter": "B",
        "text": "Renaming a variable"
      },
      {
        "letter": "C",
        "text": "A local variable with same name as a class variable hides the class variable in that scope"
      },
      {
        "letter": "D",
        "text": "Overloading a variable"
      }
    ],
    "correct": "C",
    "explanation": "Shadowing occurs when a local variable masks a field with the same name."
  },
  {
    "title": "Variables - Q0414",
    "text": "[Variables] What is the scope of a local variable declared inside a method?",
    "code": "void foo() { int x = 0; }",
    "options": [
      {
        "letter": "A",
        "text": "Only within that method/block"
      },
      {
        "letter": "B",
        "text": "Accessible to subclasses"
      },
      {
        "letter": "C",
        "text": "Global"
      },
      {
        "letter": "D",
        "text": "Class-wide"
      }
    ],
    "correct": "A",
    "explanation": "Local variables are accessible only within the block or method they are declared in."
  },
  {
    "title": "Variables - Q0415",
    "text": "[Variables] Which of the following is a valid way to initialize a variable?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "int = 10;"
      },
      {
        "letter": "B",
        "text": "a = 10;"
      },
      {
        "letter": "C",
        "text": "int a = 10;"
      },
      {
        "letter": "D",
        "text": "int a;"
      }
    ],
    "correct": "C",
    "explanation": "Declaration with type and initialization is 'int a = 10;'."
  },
  {
    "title": "Variables - Q0416",
    "text": "[Variables] What will be printed for a static variable if not initialized explicitly?",
    "code": "static int count; public static void main(String[] args){ System.out.println(count); }",
    "options": [
      {
        "letter": "A",
        "text": "null"
      },
      {
        "letter": "B",
        "text": "Compilation error"
      },
      {
        "letter": "C",
        "text": "undefined"
      },
      {
        "letter": "D",
        "text": "0"
      }
    ],
    "correct": "D",
    "explanation": "Static (class) int variables default to 0."
  },
  {
    "title": "Variables - Q0417",
    "text": "[Variables] Which keyword makes a variable constant (cannot be reassigned)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "immutable"
      },
      {
        "letter": "B",
        "text": "final"
      },
      {
        "letter": "C",
        "text": "const"
      },
      {
        "letter": "D",
        "text": "static"
      }
    ],
    "correct": "B",
    "explanation": "final prevents reassignment of the variable after initialization."
  },
  {
    "title": "Variables - Q0418",
    "text": "[Variables] Which variable lives as long as the program runs and belongs to the class?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "static variable"
      },
      {
        "letter": "B",
        "text": "instance variable"
      },
      {
        "letter": "C",
        "text": "local variable"
      },
      {
        "letter": "D",
        "text": "parameter"
      }
    ],
    "correct": "A",
    "explanation": "Static variables are class-level and persist for the application's lifetime (class unloading aside)."
  },
  {
    "title": "Variables - Q0419",
    "text": "[Variables] Which of these describes shadowing in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Renaming a variable"
      },
      {
        "letter": "B",
        "text": "Deleting a variable"
      },
      {
        "letter": "C",
        "text": "A local variable with same name as a class variable hides the class variable in that scope"
      },
      {
        "letter": "D",
        "text": "Overloading a variable"
      }
    ],
    "correct": "C",
    "explanation": "Shadowing occurs when a local variable masks a field with the same name."
  },
  {
    "title": "Variables - Q0420",
    "text": "[Variables] What is the scope of a local variable declared inside a method?",
    "code": "void foo() { int x = 0; }",
    "options": [
      {
        "letter": "A",
        "text": "Global"
      },
      {
        "letter": "B",
        "text": "Accessible to subclasses"
      },
      {
        "letter": "C",
        "text": "Only within that method/block"
      },
      {
        "letter": "D",
        "text": "Class-wide"
      }
    ],
    "correct": "C",
    "explanation": "Local variables are accessible only within the block or method they are declared in."
  },
  {
    "title": "Variables - Q0421",
    "text": "[Variables] Which of the following is a valid way to initialize a variable?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "a = 10;"
      },
      {
        "letter": "B",
        "text": "int = 10;"
      },
      {
        "letter": "C",
        "text": "int a;"
      },
      {
        "letter": "D",
        "text": "int a = 10;"
      }
    ],
    "correct": "D",
    "explanation": "Declaration with type and initialization is 'int a = 10;'."
  },
  {
    "title": "Variables - Q0422",
    "text": "[Variables] What will be printed for a static variable if not initialized explicitly?",
    "code": "static int count; public static void main(String[] args){ System.out.println(count); }",
    "options": [
      {
        "letter": "A",
        "text": "null"
      },
      {
        "letter": "B",
        "text": "0"
      },
      {
        "letter": "C",
        "text": "Compilation error"
      },
      {
        "letter": "D",
        "text": "undefined"
      }
    ],
    "correct": "B",
    "explanation": "Static (class) int variables default to 0."
  },
  {
    "title": "Variables - Q0423",
    "text": "[Variables] Which keyword makes a variable constant (cannot be reassigned)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "final"
      },
      {
        "letter": "B",
        "text": "immutable"
      },
      {
        "letter": "C",
        "text": "const"
      },
      {
        "letter": "D",
        "text": "static"
      }
    ],
    "correct": "A",
    "explanation": "final prevents reassignment of the variable after initialization."
  },
  {
    "title": "Variables - Q0424",
    "text": "[Variables] Which variable lives as long as the program runs and belongs to the class?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "local variable"
      },
      {
        "letter": "B",
        "text": "static variable"
      },
      {
        "letter": "C",
        "text": "parameter"
      },
      {
        "letter": "D",
        "text": "instance variable"
      }
    ],
    "correct": "B",
    "explanation": "Static variables are class-level and persist for the application's lifetime (class unloading aside)."
  },
  {
    "title": "Variables - Q0425",
    "text": "[Variables] Which of these describes shadowing in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Deleting a variable"
      },
      {
        "letter": "B",
        "text": "A local variable with same name as a class variable hides the class variable in that scope"
      },
      {
        "letter": "C",
        "text": "Overloading a variable"
      },
      {
        "letter": "D",
        "text": "Renaming a variable"
      }
    ],
    "correct": "B",
    "explanation": "Shadowing occurs when a local variable masks a field with the same name."
  },
  {
    "title": "Variables - Q0426",
    "text": "[Variables] What is the scope of a local variable declared inside a method?",
    "code": "void foo() { int x = 0; }",
    "options": [
      {
        "letter": "A",
        "text": "Class-wide"
      },
      {
        "letter": "B",
        "text": "Global"
      },
      {
        "letter": "C",
        "text": "Only within that method/block"
      },
      {
        "letter": "D",
        "text": "Accessible to subclasses"
      }
    ],
    "correct": "C",
    "explanation": "Local variables are accessible only within the block or method they are declared in."
  },
  {
    "title": "Variables - Q0427",
    "text": "[Variables] Which of the following is a valid way to initialize a variable?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "a = 10;"
      },
      {
        "letter": "B",
        "text": "int = 10;"
      },
      {
        "letter": "C",
        "text": "int a = 10;"
      },
      {
        "letter": "D",
        "text": "int a;"
      }
    ],
    "correct": "C",
    "explanation": "Declaration with type and initialization is 'int a = 10;'."
  },
  {
    "title": "Variables - Q0428",
    "text": "[Variables] What will be printed for a static variable if not initialized explicitly?",
    "code": "static int count; public static void main(String[] args){ System.out.println(count); }",
    "options": [
      {
        "letter": "A",
        "text": "undefined"
      },
      {
        "letter": "B",
        "text": "null"
      },
      {
        "letter": "C",
        "text": "0"
      },
      {
        "letter": "D",
        "text": "Compilation error"
      }
    ],
    "correct": "C",
    "explanation": "Static (class) int variables default to 0."
  },
  {
    "title": "Variables - Q0429",
    "text": "[Variables] Which keyword makes a variable constant (cannot be reassigned)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "const"
      },
      {
        "letter": "B",
        "text": "final"
      },
      {
        "letter": "C",
        "text": "static"
      },
      {
        "letter": "D",
        "text": "immutable"
      }
    ],
    "correct": "B",
    "explanation": "final prevents reassignment of the variable after initialization."
  },
  {
    "title": "Operators - Q0430",
    "text": "[Operators] Which operator is used to assign a value?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "=="
      },
      {
        "letter": "B",
        "text": ":="
      },
      {
        "letter": "C",
        "text": "=>"
      },
      {
        "letter": "D",
        "text": "="
      }
    ],
    "correct": "D",
    "explanation": "'=' is the assignment operator in Java."
  },
  {
    "title": "Operators - Q0431",
    "text": "[Operators] What is the result of (5 & 3) where & is bitwise AND?",
    "code": "int r = 5 & 3; // binary 0101 & 0011",
    "options": [
      {
        "letter": "A",
        "text": "1"
      },
      {
        "letter": "B",
        "text": "3"
      },
      {
        "letter": "C",
        "text": "5"
      },
      {
        "letter": "D",
        "text": "7"
      }
    ],
    "correct": "A",
    "explanation": "0101 & 0011 = 0001 which is 1."
  },
  {
    "title": "Operators - Q0432",
    "text": "[Operators] What is the result of 7 / 2 in Java when using int operands?",
    "code": "int a = 7/2;",
    "options": [
      {
        "letter": "A",
        "text": "3"
      },
      {
        "letter": "B",
        "text": "3.5"
      },
      {
        "letter": "C",
        "text": "Compilation error"
      },
      {
        "letter": "D",
        "text": "4"
      }
    ],
    "correct": "A",
    "explanation": "Integer division truncates the decimal part; 7/2 = 3."
  },
  {
    "title": "Operators - Q0433",
    "text": "[Operators] Which operator is used for equality comparison between primitives?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "==="
      },
      {
        "letter": "B",
        "text": "equals"
      },
      {
        "letter": "C",
        "text": "=="
      },
      {
        "letter": "D",
        "text": "="
      }
    ],
    "correct": "C",
    "explanation": "Use '==' to compare primitive values; .equals() is for object equality."
  },
  {
    "title": "Operators - Q0434",
    "text": "[Operators] What does '&&' operator do?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Bitwise AND"
      },
      {
        "letter": "B",
        "text": "Logical AND (short-circuit)"
      },
      {
        "letter": "C",
        "text": "Assignment"
      },
      {
        "letter": "D",
        "text": "Logical OR"
      }
    ],
    "correct": "B",
    "explanation": "'&&' performs logical AND and short-circuits if the left operand is false."
  },
  {
    "title": "Operators - Q0435",
    "text": "[Operators] What is the value of x after int x = 5; x++; ?",
    "code": "int x = 5; x++;",
    "options": [
      {
        "letter": "A",
        "text": "5"
      },
      {
        "letter": "B",
        "text": "Compilation error"
      },
      {
        "letter": "C",
        "text": "7"
      },
      {
        "letter": "D",
        "text": "6"
      }
    ],
    "correct": "D",
    "explanation": "Post-increment increases the variable by 1, so x becomes 6."
  },
  {
    "title": "Operators - Q0436",
    "text": "[Operators] Which operator concatenates strings?",
    "code": "String s = \"Hi\" + \"There\";",
    "options": [
      {
        "letter": "A",
        "text": "&"
      },
      {
        "letter": "B",
        "text": ","
      },
      {
        "letter": "C",
        "text": "+"
      },
      {
        "letter": "D",
        "text": "."
      }
    ],
    "correct": "C",
    "explanation": "The '+' operator concatenates strings in Java."
  },
  {
    "title": "Operators - Q0437",
    "text": "[Operators] What does the ternary operator return: (5>3) ? 10 : 20 ?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "10"
      },
      {
        "letter": "B",
        "text": "true"
      },
      {
        "letter": "C",
        "text": "false"
      },
      {
        "letter": "D",
        "text": "20"
      }
    ],
    "correct": "A",
    "explanation": "Condition true, so ternary returns the first expression (10)."
  },
  {
    "title": "Operators - Q0438",
    "text": "[Operators] Which operator is used to assign a value?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "=>"
      },
      {
        "letter": "B",
        "text": "=="
      },
      {
        "letter": "C",
        "text": ":="
      },
      {
        "letter": "D",
        "text": "="
      }
    ],
    "correct": "D",
    "explanation": "'=' is the assignment operator in Java."
  },
  {
    "title": "Operators - Q0439",
    "text": "[Operators] What is the result of (5 & 3) where & is bitwise AND?",
    "code": "int r = 5 & 3; // binary 0101 & 0011",
    "options": [
      {
        "letter": "A",
        "text": "7"
      },
      {
        "letter": "B",
        "text": "1"
      },
      {
        "letter": "C",
        "text": "3"
      },
      {
        "letter": "D",
        "text": "5"
      }
    ],
    "correct": "B",
    "explanation": "0101 & 0011 = 0001 which is 1."
  },
  {
    "title": "Operators - Q0440",
    "text": "[Operators] What is the result of 7 / 2 in Java when using int operands?",
    "code": "int a = 7/2;",
    "options": [
      {
        "letter": "A",
        "text": "4"
      },
      {
        "letter": "B",
        "text": "Compilation error"
      },
      {
        "letter": "C",
        "text": "3"
      },
      {
        "letter": "D",
        "text": "3.5"
      }
    ],
    "correct": "C",
    "explanation": "Integer division truncates the decimal part; 7/2 = 3."
  },
  {
    "title": "Operators - Q0441",
    "text": "[Operators] Which operator is used for equality comparison between primitives?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "==="
      },
      {
        "letter": "B",
        "text": "="
      },
      {
        "letter": "C",
        "text": "=="
      },
      {
        "letter": "D",
        "text": "equals"
      }
    ],
    "correct": "C",
    "explanation": "Use '==' to compare primitive values; .equals() is for object equality."
  },
  {
    "title": "Operators - Q0442",
    "text": "[Operators] What does '&&' operator do?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Bitwise AND"
      },
      {
        "letter": "B",
        "text": "Logical OR"
      },
      {
        "letter": "C",
        "text": "Assignment"
      },
      {
        "letter": "D",
        "text": "Logical AND (short-circuit)"
      }
    ],
    "correct": "D",
    "explanation": "'&&' performs logical AND and short-circuits if the left operand is false."
  },
  {
    "title": "Operators - Q0443",
    "text": "[Operators] What is the value of x after int x = 5; x++; ?",
    "code": "int x = 5; x++;",
    "options": [
      {
        "letter": "A",
        "text": "6"
      },
      {
        "letter": "B",
        "text": "7"
      },
      {
        "letter": "C",
        "text": "5"
      },
      {
        "letter": "D",
        "text": "Compilation error"
      }
    ],
    "correct": "A",
    "explanation": "Post-increment increases the variable by 1, so x becomes 6."
  },
  {
    "title": "Operators - Q0444",
    "text": "[Operators] Which operator concatenates strings?",
    "code": "String s = \"Hi\" + \"There\";",
    "options": [
      {
        "letter": "A",
        "text": "."
      },
      {
        "letter": "B",
        "text": "&"
      },
      {
        "letter": "C",
        "text": "+"
      },
      {
        "letter": "D",
        "text": ","
      }
    ],
    "correct": "C",
    "explanation": "The '+' operator concatenates strings in Java."
  },
  {
    "title": "Operators - Q0445",
    "text": "[Operators] What does the ternary operator return: (5>3) ? 10 : 20 ?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "true"
      },
      {
        "letter": "B",
        "text": "false"
      },
      {
        "letter": "C",
        "text": "20"
      },
      {
        "letter": "D",
        "text": "10"
      }
    ],
    "correct": "D",
    "explanation": "Condition true, so ternary returns the first expression (10)."
  },
  {
    "title": "Operators - Q0446",
    "text": "[Operators] Which operator is used to assign a value?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "="
      },
      {
        "letter": "B",
        "text": ":="
      },
      {
        "letter": "C",
        "text": "=>"
      },
      {
        "letter": "D",
        "text": "=="
      }
    ],
    "correct": "A",
    "explanation": "'=' is the assignment operator in Java."
  },
  {
    "title": "Operators - Q0447",
    "text": "[Operators] What is the result of (5 & 3) where & is bitwise AND?",
    "code": "int r = 5 & 3; // binary 0101 & 0011",
    "options": [
      {
        "letter": "A",
        "text": "3"
      },
      {
        "letter": "B",
        "text": "1"
      },
      {
        "letter": "C",
        "text": "5"
      },
      {
        "letter": "D",
        "text": "7"
      }
    ],
    "correct": "B",
    "explanation": "0101 & 0011 = 0001 which is 1."
  },
  {
    "title": "Operators - Q0448",
    "text": "[Operators] What is the result of 7 / 2 in Java when using int operands?",
    "code": "int a = 7/2;",
    "options": [
      {
        "letter": "A",
        "text": "3.5"
      },
      {
        "letter": "B",
        "text": "4"
      },
      {
        "letter": "C",
        "text": "3"
      },
      {
        "letter": "D",
        "text": "Compilation error"
      }
    ],
    "correct": "C",
    "explanation": "Integer division truncates the decimal part; 7/2 = 3."
  },
  {
    "title": "Operators - Q0449",
    "text": "[Operators] Which operator is used for equality comparison between primitives?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "="
      },
      {
        "letter": "B",
        "text": "=="
      },
      {
        "letter": "C",
        "text": "equals"
      },
      {
        "letter": "D",
        "text": "==="
      }
    ],
    "correct": "B",
    "explanation": "Use '==' to compare primitive values; .equals() is for object equality."
  },
  {
    "title": "Operators - Q0450",
    "text": "[Operators] What does '&&' operator do?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Logical AND (short-circuit)"
      },
      {
        "letter": "B",
        "text": "Bitwise AND"
      },
      {
        "letter": "C",
        "text": "Assignment"
      },
      {
        "letter": "D",
        "text": "Logical OR"
      }
    ],
    "correct": "A",
    "explanation": "'&&' performs logical AND and short-circuits if the left operand is false."
  },
  {
    "title": "Operators - Q0451",
    "text": "[Operators] What is the value of x after int x = 5; x++; ?",
    "code": "int x = 5; x++;",
    "options": [
      {
        "letter": "A",
        "text": "7"
      },
      {
        "letter": "B",
        "text": "5"
      },
      {
        "letter": "C",
        "text": "Compilation error"
      },
      {
        "letter": "D",
        "text": "6"
      }
    ],
    "correct": "D",
    "explanation": "Post-increment increases the variable by 1, so x becomes 6."
  },
  {
    "title": "Operators - Q0452",
    "text": "[Operators] Which operator concatenates strings?",
    "code": "String s = \"Hi\" + \"There\";",
    "options": [
      {
        "letter": "A",
        "text": "."
      },
      {
        "letter": "B",
        "text": "&"
      },
      {
        "letter": "C",
        "text": "+"
      },
      {
        "letter": "D",
        "text": ","
      }
    ],
    "correct": "C",
    "explanation": "The '+' operator concatenates strings in Java."
  },
  {
    "title": "Operators - Q0453",
    "text": "[Operators] What does the ternary operator return: (5>3) ? 10 : 20 ?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "20"
      },
      {
        "letter": "B",
        "text": "10"
      },
      {
        "letter": "C",
        "text": "true"
      },
      {
        "letter": "D",
        "text": "false"
      }
    ],
    "correct": "B",
    "explanation": "Condition true, so ternary returns the first expression (10)."
  },
  {
    "title": "Operators - Q0454",
    "text": "[Operators] Which operator is used to assign a value?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "=>"
      },
      {
        "letter": "B",
        "text": "="
      },
      {
        "letter": "C",
        "text": ":="
      },
      {
        "letter": "D",
        "text": "=="
      }
    ],
    "correct": "B",
    "explanation": "'=' is the assignment operator in Java."
  },
  {
    "title": "Operators - Q0455",
    "text": "[Operators] What is the result of (5 & 3) where & is bitwise AND?",
    "code": "int r = 5 & 3; // binary 0101 & 0011",
    "options": [
      {
        "letter": "A",
        "text": "5"
      },
      {
        "letter": "B",
        "text": "3"
      },
      {
        "letter": "C",
        "text": "1"
      },
      {
        "letter": "D",
        "text": "7"
      }
    ],
    "correct": "C",
    "explanation": "0101 & 0011 = 0001 which is 1."
  },
  {
    "title": "Operators - Q0456",
    "text": "[Operators] What is the result of 7 / 2 in Java when using int operands?",
    "code": "int a = 7/2;",
    "options": [
      {
        "letter": "A",
        "text": "Compilation error"
      },
      {
        "letter": "B",
        "text": "3.5"
      },
      {
        "letter": "C",
        "text": "3"
      },
      {
        "letter": "D",
        "text": "4"
      }
    ],
    "correct": "C",
    "explanation": "Integer division truncates the decimal part; 7/2 = 3."
  },
  {
    "title": "Operators - Q0457",
    "text": "[Operators] Which operator is used for equality comparison between primitives?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "equals"
      },
      {
        "letter": "B",
        "text": "=="
      },
      {
        "letter": "C",
        "text": "==="
      },
      {
        "letter": "D",
        "text": "="
      }
    ],
    "correct": "B",
    "explanation": "Use '==' to compare primitive values; .equals() is for object equality."
  },
  {
    "title": "Operators - Q0458",
    "text": "[Operators] What does '&&' operator do?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Assignment"
      },
      {
        "letter": "B",
        "text": "Logical AND (short-circuit)"
      },
      {
        "letter": "C",
        "text": "Logical OR"
      },
      {
        "letter": "D",
        "text": "Bitwise AND"
      }
    ],
    "correct": "B",
    "explanation": "'&&' performs logical AND and short-circuits if the left operand is false."
  },
  {
    "title": "Operators - Q0459",
    "text": "[Operators] What is the value of x after int x = 5; x++; ?",
    "code": "int x = 5; x++;",
    "options": [
      {
        "letter": "A",
        "text": "5"
      },
      {
        "letter": "B",
        "text": "7"
      },
      {
        "letter": "C",
        "text": "6"
      },
      {
        "letter": "D",
        "text": "Compilation error"
      }
    ],
    "correct": "C",
    "explanation": "Post-increment increases the variable by 1, so x becomes 6."
  },
  {
    "title": "Operators - Q0460",
    "text": "[Operators] Which operator concatenates strings?",
    "code": "String s = \"Hi\" + \"There\";",
    "options": [
      {
        "letter": "A",
        "text": "&"
      },
      {
        "letter": "B",
        "text": "."
      },
      {
        "letter": "C",
        "text": "+"
      },
      {
        "letter": "D",
        "text": ","
      }
    ],
    "correct": "C",
    "explanation": "The '+' operator concatenates strings in Java."
  },
  {
    "title": "Operators - Q0461",
    "text": "[Operators] What does the ternary operator return: (5>3) ? 10 : 20 ?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "20"
      },
      {
        "letter": "B",
        "text": "10"
      },
      {
        "letter": "C",
        "text": "false"
      },
      {
        "letter": "D",
        "text": "true"
      }
    ],
    "correct": "B",
    "explanation": "Condition true, so ternary returns the first expression (10)."
  },
  {
    "title": "Operators - Q0462",
    "text": "[Operators] Which operator is used to assign a value?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "=="
      },
      {
        "letter": "B",
        "text": "=>"
      },
      {
        "letter": "C",
        "text": ":="
      },
      {
        "letter": "D",
        "text": "="
      }
    ],
    "correct": "D",
    "explanation": "'=' is the assignment operator in Java."
  },
  {
    "title": "Operators - Q0463",
    "text": "[Operators] What is the result of (5 & 3) where & is bitwise AND?",
    "code": "int r = 5 & 3; // binary 0101 & 0011",
    "options": [
      {
        "letter": "A",
        "text": "5"
      },
      {
        "letter": "B",
        "text": "1"
      },
      {
        "letter": "C",
        "text": "7"
      },
      {
        "letter": "D",
        "text": "3"
      }
    ],
    "correct": "B",
    "explanation": "0101 & 0011 = 0001 which is 1."
  },
  {
    "title": "Operators - Q0464",
    "text": "[Operators] What is the result of 7 / 2 in Java when using int operands?",
    "code": "int a = 7/2;",
    "options": [
      {
        "letter": "A",
        "text": "3"
      },
      {
        "letter": "B",
        "text": "3.5"
      },
      {
        "letter": "C",
        "text": "Compilation error"
      },
      {
        "letter": "D",
        "text": "4"
      }
    ],
    "correct": "A",
    "explanation": "Integer division truncates the decimal part; 7/2 = 3."
  },
  {
    "title": "Operators - Q0465",
    "text": "[Operators] Which operator is used for equality comparison between primitives?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "==="
      },
      {
        "letter": "B",
        "text": "="
      },
      {
        "letter": "C",
        "text": "=="
      },
      {
        "letter": "D",
        "text": "equals"
      }
    ],
    "correct": "C",
    "explanation": "Use '==' to compare primitive values; .equals() is for object equality."
  },
  {
    "title": "Operators - Q0466",
    "text": "[Operators] What does '&&' operator do?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Logical OR"
      },
      {
        "letter": "B",
        "text": "Logical AND (short-circuit)"
      },
      {
        "letter": "C",
        "text": "Bitwise AND"
      },
      {
        "letter": "D",
        "text": "Assignment"
      }
    ],
    "correct": "B",
    "explanation": "'&&' performs logical AND and short-circuits if the left operand is false."
  },
  {
    "title": "Operators - Q0467",
    "text": "[Operators] What is the value of x after int x = 5; x++; ?",
    "code": "int x = 5; x++;",
    "options": [
      {
        "letter": "A",
        "text": "6"
      },
      {
        "letter": "B",
        "text": "5"
      },
      {
        "letter": "C",
        "text": "7"
      },
      {
        "letter": "D",
        "text": "Compilation error"
      }
    ],
    "correct": "A",
    "explanation": "Post-increment increases the variable by 1, so x becomes 6."
  },
  {
    "title": "Operators - Q0468",
    "text": "[Operators] Which operator concatenates strings?",
    "code": "String s = \"Hi\" + \"There\";",
    "options": [
      {
        "letter": "A",
        "text": ","
      },
      {
        "letter": "B",
        "text": "."
      },
      {
        "letter": "C",
        "text": "+"
      },
      {
        "letter": "D",
        "text": "&"
      }
    ],
    "correct": "C",
    "explanation": "The '+' operator concatenates strings in Java."
  },
  {
    "title": "Operators - Q0469",
    "text": "[Operators] What does the ternary operator return: (5>3) ? 10 : 20 ?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "true"
      },
      {
        "letter": "B",
        "text": "20"
      },
      {
        "letter": "C",
        "text": "10"
      },
      {
        "letter": "D",
        "text": "false"
      }
    ],
    "correct": "C",
    "explanation": "Condition true, so ternary returns the first expression (10)."
  },
  {
    "title": "Operators - Q0470",
    "text": "[Operators] Which operator is used to assign a value?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "=="
      },
      {
        "letter": "B",
        "text": "="
      },
      {
        "letter": "C",
        "text": "=>"
      },
      {
        "letter": "D",
        "text": ":="
      }
    ],
    "correct": "B",
    "explanation": "'=' is the assignment operator in Java."
  },
  {
    "title": "Operators - Q0471",
    "text": "[Operators] What is the result of (5 & 3) where & is bitwise AND?",
    "code": "int r = 5 & 3; // binary 0101 & 0011",
    "options": [
      {
        "letter": "A",
        "text": "7"
      },
      {
        "letter": "B",
        "text": "5"
      },
      {
        "letter": "C",
        "text": "1"
      },
      {
        "letter": "D",
        "text": "3"
      }
    ],
    "correct": "C",
    "explanation": "0101 & 0011 = 0001 which is 1."
  },
  {
    "title": "Operators - Q0472",
    "text": "[Operators] What is the result of 7 / 2 in Java when using int operands?",
    "code": "int a = 7/2;",
    "options": [
      {
        "letter": "A",
        "text": "3.5"
      },
      {
        "letter": "B",
        "text": "3"
      },
      {
        "letter": "C",
        "text": "Compilation error"
      },
      {
        "letter": "D",
        "text": "4"
      }
    ],
    "correct": "B",
    "explanation": "Integer division truncates the decimal part; 7/2 = 3."
  },
  {
    "title": "Operators - Q0473",
    "text": "[Operators] Which operator is used for equality comparison between primitives?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "==="
      },
      {
        "letter": "B",
        "text": "equals"
      },
      {
        "letter": "C",
        "text": "="
      },
      {
        "letter": "D",
        "text": "=="
      }
    ],
    "correct": "D",
    "explanation": "Use '==' to compare primitive values; .equals() is for object equality."
  },
  {
    "title": "Operators - Q0474",
    "text": "[Operators] What does '&&' operator do?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Bitwise AND"
      },
      {
        "letter": "B",
        "text": "Logical AND (short-circuit)"
      },
      {
        "letter": "C",
        "text": "Logical OR"
      },
      {
        "letter": "D",
        "text": "Assignment"
      }
    ],
    "correct": "B",
    "explanation": "'&&' performs logical AND and short-circuits if the left operand is false."
  },
  {
    "title": "Operators - Q0475",
    "text": "[Operators] What is the value of x after int x = 5; x++; ?",
    "code": "int x = 5; x++;",
    "options": [
      {
        "letter": "A",
        "text": "6"
      },
      {
        "letter": "B",
        "text": "5"
      },
      {
        "letter": "C",
        "text": "Compilation error"
      },
      {
        "letter": "D",
        "text": "7"
      }
    ],
    "correct": "A",
    "explanation": "Post-increment increases the variable by 1, so x becomes 6."
  },
  {
    "title": "Operators - Q0476",
    "text": "[Operators] Which operator concatenates strings?",
    "code": "String s = \"Hi\" + \"There\";",
    "options": [
      {
        "letter": "A",
        "text": ","
      },
      {
        "letter": "B",
        "text": "&"
      },
      {
        "letter": "C",
        "text": "."
      },
      {
        "letter": "D",
        "text": "+"
      }
    ],
    "correct": "D",
    "explanation": "The '+' operator concatenates strings in Java."
  },
  {
    "title": "Operators - Q0477",
    "text": "[Operators] What does the ternary operator return: (5>3) ? 10 : 20 ?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "20"
      },
      {
        "letter": "B",
        "text": "true"
      },
      {
        "letter": "C",
        "text": "false"
      },
      {
        "letter": "D",
        "text": "10"
      }
    ],
    "correct": "D",
    "explanation": "Condition true, so ternary returns the first expression (10)."
  },
  {
    "title": "Operators - Q0478",
    "text": "[Operators] Which operator is used to assign a value?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "="
      },
      {
        "letter": "B",
        "text": "=>"
      },
      {
        "letter": "C",
        "text": "=="
      },
      {
        "letter": "D",
        "text": ":="
      }
    ],
    "correct": "A",
    "explanation": "'=' is the assignment operator in Java."
  },
  {
    "title": "Operators - Q0479",
    "text": "[Operators] What is the result of (5 & 3) where & is bitwise AND?",
    "code": "int r = 5 & 3; // binary 0101 & 0011",
    "options": [
      {
        "letter": "A",
        "text": "5"
      },
      {
        "letter": "B",
        "text": "3"
      },
      {
        "letter": "C",
        "text": "7"
      },
      {
        "letter": "D",
        "text": "1"
      }
    ],
    "correct": "D",
    "explanation": "0101 & 0011 = 0001 which is 1."
  },
  {
    "title": "Operators - Q0480",
    "text": "[Operators] What is the result of 7 / 2 in Java when using int operands?",
    "code": "int a = 7/2;",
    "options": [
      {
        "letter": "A",
        "text": "3"
      },
      {
        "letter": "B",
        "text": "4"
      },
      {
        "letter": "C",
        "text": "3.5"
      },
      {
        "letter": "D",
        "text": "Compilation error"
      }
    ],
    "correct": "A",
    "explanation": "Integer division truncates the decimal part; 7/2 = 3."
  },
  {
    "title": "Operators - Q0481",
    "text": "[Operators] Which operator is used for equality comparison between primitives?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "equals"
      },
      {
        "letter": "B",
        "text": "="
      },
      {
        "letter": "C",
        "text": "=="
      },
      {
        "letter": "D",
        "text": "==="
      }
    ],
    "correct": "C",
    "explanation": "Use '==' to compare primitive values; .equals() is for object equality."
  },
  {
    "title": "Operators - Q0482",
    "text": "[Operators] What does '&&' operator do?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Logical OR"
      },
      {
        "letter": "B",
        "text": "Assignment"
      },
      {
        "letter": "C",
        "text": "Bitwise AND"
      },
      {
        "letter": "D",
        "text": "Logical AND (short-circuit)"
      }
    ],
    "correct": "D",
    "explanation": "'&&' performs logical AND and short-circuits if the left operand is false."
  },
  {
    "title": "Operators - Q0483",
    "text": "[Operators] What is the value of x after int x = 5; x++; ?",
    "code": "int x = 5; x++;",
    "options": [
      {
        "letter": "A",
        "text": "5"
      },
      {
        "letter": "B",
        "text": "Compilation error"
      },
      {
        "letter": "C",
        "text": "6"
      },
      {
        "letter": "D",
        "text": "7"
      }
    ],
    "correct": "C",
    "explanation": "Post-increment increases the variable by 1, so x becomes 6."
  },
  {
    "title": "Operators - Q0484",
    "text": "[Operators] Which operator concatenates strings?",
    "code": "String s = \"Hi\" + \"There\";",
    "options": [
      {
        "letter": "A",
        "text": "&"
      },
      {
        "letter": "B",
        "text": ","
      },
      {
        "letter": "C",
        "text": "."
      },
      {
        "letter": "D",
        "text": "+"
      }
    ],
    "correct": "D",
    "explanation": "The '+' operator concatenates strings in Java."
  },
  {
    "title": "Operators - Q0485",
    "text": "[Operators] What does the ternary operator return: (5>3) ? 10 : 20 ?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "false"
      },
      {
        "letter": "B",
        "text": "10"
      },
      {
        "letter": "C",
        "text": "20"
      },
      {
        "letter": "D",
        "text": "true"
      }
    ],
    "correct": "B",
    "explanation": "Condition true, so ternary returns the first expression (10)."
  },
  {
    "title": "Operators - Q0486",
    "text": "[Operators] Which operator is used to assign a value?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "=="
      },
      {
        "letter": "B",
        "text": ":="
      },
      {
        "letter": "C",
        "text": "=>"
      },
      {
        "letter": "D",
        "text": "="
      }
    ],
    "correct": "D",
    "explanation": "'=' is the assignment operator in Java."
  },
  {
    "title": "Operators - Q0487",
    "text": "[Operators] What is the result of (5 & 3) where & is bitwise AND?",
    "code": "int r = 5 & 3; // binary 0101 & 0011",
    "options": [
      {
        "letter": "A",
        "text": "5"
      },
      {
        "letter": "B",
        "text": "1"
      },
      {
        "letter": "C",
        "text": "3"
      },
      {
        "letter": "D",
        "text": "7"
      }
    ],
    "correct": "B",
    "explanation": "0101 & 0011 = 0001 which is 1."
  },
  {
    "title": "Operators - Q0488",
    "text": "[Operators] What is the result of 7 / 2 in Java when using int operands?",
    "code": "int a = 7/2;",
    "options": [
      {
        "letter": "A",
        "text": "3.5"
      },
      {
        "letter": "B",
        "text": "Compilation error"
      },
      {
        "letter": "C",
        "text": "3"
      },
      {
        "letter": "D",
        "text": "4"
      }
    ],
    "correct": "C",
    "explanation": "Integer division truncates the decimal part; 7/2 = 3."
  },
  {
    "title": "Operators - Q0489",
    "text": "[Operators] Which operator is used for equality comparison between primitives?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "==="
      },
      {
        "letter": "B",
        "text": "="
      },
      {
        "letter": "C",
        "text": "equals"
      },
      {
        "letter": "D",
        "text": "=="
      }
    ],
    "correct": "D",
    "explanation": "Use '==' to compare primitive values; .equals() is for object equality."
  },
  {
    "title": "Operators - Q0490",
    "text": "[Operators] What does '&&' operator do?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Logical AND (short-circuit)"
      },
      {
        "letter": "B",
        "text": "Logical OR"
      },
      {
        "letter": "C",
        "text": "Assignment"
      },
      {
        "letter": "D",
        "text": "Bitwise AND"
      }
    ],
    "correct": "A",
    "explanation": "'&&' performs logical AND and short-circuits if the left operand is false."
  },
  {
    "title": "Operators - Q0491",
    "text": "[Operators] What is the value of x after int x = 5; x++; ?",
    "code": "int x = 5; x++;",
    "options": [
      {
        "letter": "A",
        "text": "6"
      },
      {
        "letter": "B",
        "text": "5"
      },
      {
        "letter": "C",
        "text": "7"
      },
      {
        "letter": "D",
        "text": "Compilation error"
      }
    ],
    "correct": "A",
    "explanation": "Post-increment increases the variable by 1, so x becomes 6."
  },
  {
    "title": "Operators - Q0492",
    "text": "[Operators] Which operator concatenates strings?",
    "code": "String s = \"Hi\" + \"There\";",
    "options": [
      {
        "letter": "A",
        "text": "&"
      },
      {
        "letter": "B",
        "text": "+"
      },
      {
        "letter": "C",
        "text": ","
      },
      {
        "letter": "D",
        "text": "."
      }
    ],
    "correct": "B",
    "explanation": "The '+' operator concatenates strings in Java."
  },
  {
    "title": "Operators - Q0493",
    "text": "[Operators] What does the ternary operator return: (5>3) ? 10 : 20 ?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "20"
      },
      {
        "letter": "B",
        "text": "true"
      },
      {
        "letter": "C",
        "text": "10"
      },
      {
        "letter": "D",
        "text": "false"
      }
    ],
    "correct": "C",
    "explanation": "Condition true, so ternary returns the first expression (10)."
  },
  {
    "title": "Operators - Q0494",
    "text": "[Operators] Which operator is used to assign a value?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "="
      },
      {
        "letter": "B",
        "text": ":="
      },
      {
        "letter": "C",
        "text": "=>"
      },
      {
        "letter": "D",
        "text": "=="
      }
    ],
    "correct": "A",
    "explanation": "'=' is the assignment operator in Java."
  },
  {
    "title": "Operators - Q0495",
    "text": "[Operators] What is the result of (5 & 3) where & is bitwise AND?",
    "code": "int r = 5 & 3; // binary 0101 & 0011",
    "options": [
      {
        "letter": "A",
        "text": "5"
      },
      {
        "letter": "B",
        "text": "3"
      },
      {
        "letter": "C",
        "text": "1"
      },
      {
        "letter": "D",
        "text": "7"
      }
    ],
    "correct": "C",
    "explanation": "0101 & 0011 = 0001 which is 1."
  },
  {
    "title": "Operators - Q0496",
    "text": "[Operators] What is the result of 7 / 2 in Java when using int operands?",
    "code": "int a = 7/2;",
    "options": [
      {
        "letter": "A",
        "text": "3"
      },
      {
        "letter": "B",
        "text": "3.5"
      },
      {
        "letter": "C",
        "text": "Compilation error"
      },
      {
        "letter": "D",
        "text": "4"
      }
    ],
    "correct": "A",
    "explanation": "Integer division truncates the decimal part; 7/2 = 3."
  },
  {
    "title": "Operators - Q0497",
    "text": "[Operators] Which operator is used for equality comparison between primitives?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "equals"
      },
      {
        "letter": "B",
        "text": "="
      },
      {
        "letter": "C",
        "text": "=="
      },
      {
        "letter": "D",
        "text": "==="
      }
    ],
    "correct": "C",
    "explanation": "Use '==' to compare primitive values; .equals() is for object equality."
  },
  {
    "title": "Operators - Q0498",
    "text": "[Operators] What does '&&' operator do?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Bitwise AND"
      },
      {
        "letter": "B",
        "text": "Logical AND (short-circuit)"
      },
      {
        "letter": "C",
        "text": "Assignment"
      },
      {
        "letter": "D",
        "text": "Logical OR"
      }
    ],
    "correct": "B",
    "explanation": "'&&' performs logical AND and short-circuits if the left operand is false."
  },
  {
    "title": "Operators - Q0499",
    "text": "[Operators] What is the value of x after int x = 5; x++; ?",
    "code": "int x = 5; x++;",
    "options": [
      {
        "letter": "A",
        "text": "6"
      },
      {
        "letter": "B",
        "text": "7"
      },
      {
        "letter": "C",
        "text": "5"
      },
      {
        "letter": "D",
        "text": "Compilation error"
      }
    ],
    "correct": "A",
    "explanation": "Post-increment increases the variable by 1, so x becomes 6."
  },
  {
    "title": "Operators - Q0500",
    "text": "[Operators] Which operator concatenates strings?",
    "code": "String s = \"Hi\" + \"There\";",
    "options": [
      {
        "letter": "A",
        "text": "."
      },
      {
        "letter": "B",
        "text": "&"
      },
      {
        "letter": "C",
        "text": ","
      },
      {
        "letter": "D",
        "text": "+"
      }
    ],
    "correct": "D",
    "explanation": "The '+' operator concatenates strings in Java."
  },
  {
    "title": "Operators - Q0501",
    "text": "[Operators] What does the ternary operator return: (5>3) ? 10 : 20 ?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "20"
      },
      {
        "letter": "B",
        "text": "10"
      },
      {
        "letter": "C",
        "text": "false"
      },
      {
        "letter": "D",
        "text": "true"
      }
    ],
    "correct": "B",
    "explanation": "Condition true, so ternary returns the first expression (10)."
  },
  {
    "title": "Operators - Q0502",
    "text": "[Operators] Which operator is used to assign a value?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "=>"
      },
      {
        "letter": "B",
        "text": "=="
      },
      {
        "letter": "C",
        "text": ":="
      },
      {
        "letter": "D",
        "text": "="
      }
    ],
    "correct": "D",
    "explanation": "'=' is the assignment operator in Java."
  },
  {
    "title": "Operators - Q0503",
    "text": "[Operators] What is the result of (5 & 3) where & is bitwise AND?",
    "code": "int r = 5 & 3; // binary 0101 & 0011",
    "options": [
      {
        "letter": "A",
        "text": "5"
      },
      {
        "letter": "B",
        "text": "1"
      },
      {
        "letter": "C",
        "text": "3"
      },
      {
        "letter": "D",
        "text": "7"
      }
    ],
    "correct": "B",
    "explanation": "0101 & 0011 = 0001 which is 1."
  },
  {
    "title": "Operators - Q0504",
    "text": "[Operators] What is the result of 7 / 2 in Java when using int operands?",
    "code": "int a = 7/2;",
    "options": [
      {
        "letter": "A",
        "text": "Compilation error"
      },
      {
        "letter": "B",
        "text": "3"
      },
      {
        "letter": "C",
        "text": "3.5"
      },
      {
        "letter": "D",
        "text": "4"
      }
    ],
    "correct": "B",
    "explanation": "Integer division truncates the decimal part; 7/2 = 3."
  },
  {
    "title": "Operators - Q0505",
    "text": "[Operators] Which operator is used for equality comparison between primitives?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "=="
      },
      {
        "letter": "B",
        "text": "==="
      },
      {
        "letter": "C",
        "text": "equals"
      },
      {
        "letter": "D",
        "text": "="
      }
    ],
    "correct": "A",
    "explanation": "Use '==' to compare primitive values; .equals() is for object equality."
  },
  {
    "title": "Operators - Q0506",
    "text": "[Operators] What does '&&' operator do?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Logical OR"
      },
      {
        "letter": "B",
        "text": "Assignment"
      },
      {
        "letter": "C",
        "text": "Bitwise AND"
      },
      {
        "letter": "D",
        "text": "Logical AND (short-circuit)"
      }
    ],
    "correct": "D",
    "explanation": "'&&' performs logical AND and short-circuits if the left operand is false."
  },
  {
    "title": "Operators - Q0507",
    "text": "[Operators] What is the value of x after int x = 5; x++; ?",
    "code": "int x = 5; x++;",
    "options": [
      {
        "letter": "A",
        "text": "6"
      },
      {
        "letter": "B",
        "text": "7"
      },
      {
        "letter": "C",
        "text": "Compilation error"
      },
      {
        "letter": "D",
        "text": "5"
      }
    ],
    "correct": "A",
    "explanation": "Post-increment increases the variable by 1, so x becomes 6."
  },
  {
    "title": "Operators - Q0508",
    "text": "[Operators] Which operator concatenates strings?",
    "code": "String s = \"Hi\" + \"There\";",
    "options": [
      {
        "letter": "A",
        "text": "+"
      },
      {
        "letter": "B",
        "text": "&"
      },
      {
        "letter": "C",
        "text": ","
      },
      {
        "letter": "D",
        "text": "."
      }
    ],
    "correct": "A",
    "explanation": "The '+' operator concatenates strings in Java."
  },
  {
    "title": "Operators - Q0509",
    "text": "[Operators] What does the ternary operator return: (5>3) ? 10 : 20 ?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "true"
      },
      {
        "letter": "B",
        "text": "false"
      },
      {
        "letter": "C",
        "text": "10"
      },
      {
        "letter": "D",
        "text": "20"
      }
    ],
    "correct": "C",
    "explanation": "Condition true, so ternary returns the first expression (10)."
  },
  {
    "title": "Operators - Q0510",
    "text": "[Operators] Which operator is used to assign a value?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "="
      },
      {
        "letter": "B",
        "text": "=>"
      },
      {
        "letter": "C",
        "text": "=="
      },
      {
        "letter": "D",
        "text": ":="
      }
    ],
    "correct": "A",
    "explanation": "'=' is the assignment operator in Java."
  },
  {
    "title": "Operators - Q0511",
    "text": "[Operators] What is the result of (5 & 3) where & is bitwise AND?",
    "code": "int r = 5 & 3; // binary 0101 & 0011",
    "options": [
      {
        "letter": "A",
        "text": "5"
      },
      {
        "letter": "B",
        "text": "3"
      },
      {
        "letter": "C",
        "text": "7"
      },
      {
        "letter": "D",
        "text": "1"
      }
    ],
    "correct": "D",
    "explanation": "0101 & 0011 = 0001 which is 1."
  },
  {
    "title": "Operators - Q0512",
    "text": "[Operators] What is the result of 7 / 2 in Java when using int operands?",
    "code": "int a = 7/2;",
    "options": [
      {
        "letter": "A",
        "text": "Compilation error"
      },
      {
        "letter": "B",
        "text": "3"
      },
      {
        "letter": "C",
        "text": "3.5"
      },
      {
        "letter": "D",
        "text": "4"
      }
    ],
    "correct": "B",
    "explanation": "Integer division truncates the decimal part; 7/2 = 3."
  },
  {
    "title": "Operators - Q0513",
    "text": "[Operators] Which operator is used for equality comparison between primitives?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "=="
      },
      {
        "letter": "B",
        "text": "equals"
      },
      {
        "letter": "C",
        "text": "="
      },
      {
        "letter": "D",
        "text": "==="
      }
    ],
    "correct": "A",
    "explanation": "Use '==' to compare primitive values; .equals() is for object equality."
  },
  {
    "title": "Operators - Q0514",
    "text": "[Operators] What does '&&' operator do?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Assignment"
      },
      {
        "letter": "B",
        "text": "Bitwise AND"
      },
      {
        "letter": "C",
        "text": "Logical OR"
      },
      {
        "letter": "D",
        "text": "Logical AND (short-circuit)"
      }
    ],
    "correct": "D",
    "explanation": "'&&' performs logical AND and short-circuits if the left operand is false."
  },
  {
    "title": "Operators - Q0515",
    "text": "[Operators] What is the value of x after int x = 5; x++; ?",
    "code": "int x = 5; x++;",
    "options": [
      {
        "letter": "A",
        "text": "6"
      },
      {
        "letter": "B",
        "text": "Compilation error"
      },
      {
        "letter": "C",
        "text": "7"
      },
      {
        "letter": "D",
        "text": "5"
      }
    ],
    "correct": "A",
    "explanation": "Post-increment increases the variable by 1, so x becomes 6."
  },
  {
    "title": "Operators - Q0516",
    "text": "[Operators] Which operator concatenates strings?",
    "code": "String s = \"Hi\" + \"There\";",
    "options": [
      {
        "letter": "A",
        "text": "."
      },
      {
        "letter": "B",
        "text": "&"
      },
      {
        "letter": "C",
        "text": "+"
      },
      {
        "letter": "D",
        "text": ","
      }
    ],
    "correct": "C",
    "explanation": "The '+' operator concatenates strings in Java."
  },
  {
    "title": "Operators - Q0517",
    "text": "[Operators] What does the ternary operator return: (5>3) ? 10 : 20 ?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "false"
      },
      {
        "letter": "B",
        "text": "20"
      },
      {
        "letter": "C",
        "text": "10"
      },
      {
        "letter": "D",
        "text": "true"
      }
    ],
    "correct": "C",
    "explanation": "Condition true, so ternary returns the first expression (10)."
  },
  {
    "title": "Operators - Q0518",
    "text": "[Operators] Which operator is used to assign a value?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "=="
      },
      {
        "letter": "B",
        "text": ":="
      },
      {
        "letter": "C",
        "text": "=>"
      },
      {
        "letter": "D",
        "text": "="
      }
    ],
    "correct": "D",
    "explanation": "'=' is the assignment operator in Java."
  },
  {
    "title": "Operators - Q0519",
    "text": "[Operators] What is the result of (5 & 3) where & is bitwise AND?",
    "code": "int r = 5 & 3; // binary 0101 & 0011",
    "options": [
      {
        "letter": "A",
        "text": "7"
      },
      {
        "letter": "B",
        "text": "1"
      },
      {
        "letter": "C",
        "text": "3"
      },
      {
        "letter": "D",
        "text": "5"
      }
    ],
    "correct": "B",
    "explanation": "0101 & 0011 = 0001 which is 1."
  },
  {
    "title": "Operators - Q0520",
    "text": "[Operators] What is the result of 7 / 2 in Java when using int operands?",
    "code": "int a = 7/2;",
    "options": [
      {
        "letter": "A",
        "text": "3.5"
      },
      {
        "letter": "B",
        "text": "4"
      },
      {
        "letter": "C",
        "text": "Compilation error"
      },
      {
        "letter": "D",
        "text": "3"
      }
    ],
    "correct": "D",
    "explanation": "Integer division truncates the decimal part; 7/2 = 3."
  },
  {
    "title": "Operators - Q0521",
    "text": "[Operators] Which operator is used for equality comparison between primitives?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "="
      },
      {
        "letter": "B",
        "text": "equals"
      },
      {
        "letter": "C",
        "text": "=="
      },
      {
        "letter": "D",
        "text": "==="
      }
    ],
    "correct": "C",
    "explanation": "Use '==' to compare primitive values; .equals() is for object equality."
  },
  {
    "title": "Operators - Q0522",
    "text": "[Operators] What does '&&' operator do?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Logical AND (short-circuit)"
      },
      {
        "letter": "B",
        "text": "Logical OR"
      },
      {
        "letter": "C",
        "text": "Assignment"
      },
      {
        "letter": "D",
        "text": "Bitwise AND"
      }
    ],
    "correct": "A",
    "explanation": "'&&' performs logical AND and short-circuits if the left operand is false."
  },
  {
    "title": "Operators - Q0523",
    "text": "[Operators] What is the value of x after int x = 5; x++; ?",
    "code": "int x = 5; x++;",
    "options": [
      {
        "letter": "A",
        "text": "6"
      },
      {
        "letter": "B",
        "text": "7"
      },
      {
        "letter": "C",
        "text": "Compilation error"
      },
      {
        "letter": "D",
        "text": "5"
      }
    ],
    "correct": "A",
    "explanation": "Post-increment increases the variable by 1, so x becomes 6."
  },
  {
    "title": "Operators - Q0524",
    "text": "[Operators] Which operator concatenates strings?",
    "code": "String s = \"Hi\" + \"There\";",
    "options": [
      {
        "letter": "A",
        "text": "&"
      },
      {
        "letter": "B",
        "text": ","
      },
      {
        "letter": "C",
        "text": "."
      },
      {
        "letter": "D",
        "text": "+"
      }
    ],
    "correct": "D",
    "explanation": "The '+' operator concatenates strings in Java."
  },
  {
    "title": "Operators - Q0525",
    "text": "[Operators] What does the ternary operator return: (5>3) ? 10 : 20 ?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "true"
      },
      {
        "letter": "B",
        "text": "false"
      },
      {
        "letter": "C",
        "text": "10"
      },
      {
        "letter": "D",
        "text": "20"
      }
    ],
    "correct": "C",
    "explanation": "Condition true, so ternary returns the first expression (10)."
  },
  {
    "title": "Operators - Q0526",
    "text": "[Operators] Which operator is used to assign a value?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": ":="
      },
      {
        "letter": "B",
        "text": "="
      },
      {
        "letter": "C",
        "text": "=>"
      },
      {
        "letter": "D",
        "text": "=="
      }
    ],
    "correct": "B",
    "explanation": "'=' is the assignment operator in Java."
  },
  {
    "title": "Operators - Q0527",
    "text": "[Operators] What is the result of (5 & 3) where & is bitwise AND?",
    "code": "int r = 5 & 3; // binary 0101 & 0011",
    "options": [
      {
        "letter": "A",
        "text": "3"
      },
      {
        "letter": "B",
        "text": "7"
      },
      {
        "letter": "C",
        "text": "5"
      },
      {
        "letter": "D",
        "text": "1"
      }
    ],
    "correct": "D",
    "explanation": "0101 & 0011 = 0001 which is 1."
  },
  {
    "title": "Operators - Q0528",
    "text": "[Operators] What is the result of 7 / 2 in Java when using int operands?",
    "code": "int a = 7/2;",
    "options": [
      {
        "letter": "A",
        "text": "4"
      },
      {
        "letter": "B",
        "text": "Compilation error"
      },
      {
        "letter": "C",
        "text": "3.5"
      },
      {
        "letter": "D",
        "text": "3"
      }
    ],
    "correct": "D",
    "explanation": "Integer division truncates the decimal part; 7/2 = 3."
  },
  {
    "title": "Operators - Q0529",
    "text": "[Operators] Which operator is used for equality comparison between primitives?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "equals"
      },
      {
        "letter": "B",
        "text": "="
      },
      {
        "letter": "C",
        "text": "==="
      },
      {
        "letter": "D",
        "text": "=="
      }
    ],
    "correct": "D",
    "explanation": "Use '==' to compare primitive values; .equals() is for object equality."
  },
  {
    "title": "Operators - Q0530",
    "text": "[Operators] What does '&&' operator do?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Bitwise AND"
      },
      {
        "letter": "B",
        "text": "Assignment"
      },
      {
        "letter": "C",
        "text": "Logical OR"
      },
      {
        "letter": "D",
        "text": "Logical AND (short-circuit)"
      }
    ],
    "correct": "D",
    "explanation": "'&&' performs logical AND and short-circuits if the left operand is false."
  },
  {
    "title": "Operators - Q0531",
    "text": "[Operators] What is the value of x after int x = 5; x++; ?",
    "code": "int x = 5; x++;",
    "options": [
      {
        "letter": "A",
        "text": "7"
      },
      {
        "letter": "B",
        "text": "Compilation error"
      },
      {
        "letter": "C",
        "text": "5"
      },
      {
        "letter": "D",
        "text": "6"
      }
    ],
    "correct": "D",
    "explanation": "Post-increment increases the variable by 1, so x becomes 6."
  },
  {
    "title": "Operators - Q0532",
    "text": "[Operators] Which operator concatenates strings?",
    "code": "String s = \"Hi\" + \"There\";",
    "options": [
      {
        "letter": "A",
        "text": ","
      },
      {
        "letter": "B",
        "text": "+"
      },
      {
        "letter": "C",
        "text": "."
      },
      {
        "letter": "D",
        "text": "&"
      }
    ],
    "correct": "B",
    "explanation": "The '+' operator concatenates strings in Java."
  },
  {
    "title": "Operators - Q0533",
    "text": "[Operators] What does the ternary operator return: (5>3) ? 10 : 20 ?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "20"
      },
      {
        "letter": "B",
        "text": "false"
      },
      {
        "letter": "C",
        "text": "10"
      },
      {
        "letter": "D",
        "text": "true"
      }
    ],
    "correct": "C",
    "explanation": "Condition true, so ternary returns the first expression (10)."
  },
  {
    "title": "Operators - Q0534",
    "text": "[Operators] Which operator is used to assign a value?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "=>"
      },
      {
        "letter": "B",
        "text": ":="
      },
      {
        "letter": "C",
        "text": "="
      },
      {
        "letter": "D",
        "text": "=="
      }
    ],
    "correct": "C",
    "explanation": "'=' is the assignment operator in Java."
  },
  {
    "title": "Operators - Q0535",
    "text": "[Operators] What is the result of (5 & 3) where & is bitwise AND?",
    "code": "int r = 5 & 3; // binary 0101 & 0011",
    "options": [
      {
        "letter": "A",
        "text": "1"
      },
      {
        "letter": "B",
        "text": "3"
      },
      {
        "letter": "C",
        "text": "7"
      },
      {
        "letter": "D",
        "text": "5"
      }
    ],
    "correct": "A",
    "explanation": "0101 & 0011 = 0001 which is 1."
  },
  {
    "title": "Operators - Q0536",
    "text": "[Operators] What is the result of 7 / 2 in Java when using int operands?",
    "code": "int a = 7/2;",
    "options": [
      {
        "letter": "A",
        "text": "Compilation error"
      },
      {
        "letter": "B",
        "text": "4"
      },
      {
        "letter": "C",
        "text": "3.5"
      },
      {
        "letter": "D",
        "text": "3"
      }
    ],
    "correct": "D",
    "explanation": "Integer division truncates the decimal part; 7/2 = 3."
  },
  {
    "title": "Operators - Q0537",
    "text": "[Operators] Which operator is used for equality comparison between primitives?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "==="
      },
      {
        "letter": "B",
        "text": "="
      },
      {
        "letter": "C",
        "text": "=="
      },
      {
        "letter": "D",
        "text": "equals"
      }
    ],
    "correct": "C",
    "explanation": "Use '==' to compare primitive values; .equals() is for object equality."
  },
  {
    "title": "Operators - Q0538",
    "text": "[Operators] What does '&&' operator do?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Logical OR"
      },
      {
        "letter": "B",
        "text": "Bitwise AND"
      },
      {
        "letter": "C",
        "text": "Logical AND (short-circuit)"
      },
      {
        "letter": "D",
        "text": "Assignment"
      }
    ],
    "correct": "C",
    "explanation": "'&&' performs logical AND and short-circuits if the left operand is false."
  },
  {
    "title": "Operators - Q0539",
    "text": "[Operators] What is the value of x after int x = 5; x++; ?",
    "code": "int x = 5; x++;",
    "options": [
      {
        "letter": "A",
        "text": "7"
      },
      {
        "letter": "B",
        "text": "Compilation error"
      },
      {
        "letter": "C",
        "text": "6"
      },
      {
        "letter": "D",
        "text": "5"
      }
    ],
    "correct": "C",
    "explanation": "Post-increment increases the variable by 1, so x becomes 6."
  },
  {
    "title": "Operators - Q0540",
    "text": "[Operators] Which operator concatenates strings?",
    "code": "String s = \"Hi\" + \"There\";",
    "options": [
      {
        "letter": "A",
        "text": "+"
      },
      {
        "letter": "B",
        "text": "&"
      },
      {
        "letter": "C",
        "text": ","
      },
      {
        "letter": "D",
        "text": "."
      }
    ],
    "correct": "A",
    "explanation": "The '+' operator concatenates strings in Java."
  },
  {
    "title": "Operators - Q0541",
    "text": "[Operators] What does the ternary operator return: (5>3) ? 10 : 20 ?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "10"
      },
      {
        "letter": "B",
        "text": "true"
      },
      {
        "letter": "C",
        "text": "20"
      },
      {
        "letter": "D",
        "text": "false"
      }
    ],
    "correct": "A",
    "explanation": "Condition true, so ternary returns the first expression (10)."
  },
  {
    "title": "Operators - Q0542",
    "text": "[Operators] Which operator is used to assign a value?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "=="
      },
      {
        "letter": "B",
        "text": "="
      },
      {
        "letter": "C",
        "text": "=>"
      },
      {
        "letter": "D",
        "text": ":="
      }
    ],
    "correct": "B",
    "explanation": "'=' is the assignment operator in Java."
  },
  {
    "title": "Operators - Q0543",
    "text": "[Operators] What is the result of (5 & 3) where & is bitwise AND?",
    "code": "int r = 5 & 3; // binary 0101 & 0011",
    "options": [
      {
        "letter": "A",
        "text": "3"
      },
      {
        "letter": "B",
        "text": "7"
      },
      {
        "letter": "C",
        "text": "5"
      },
      {
        "letter": "D",
        "text": "1"
      }
    ],
    "correct": "D",
    "explanation": "0101 & 0011 = 0001 which is 1."
  },
  {
    "title": "Operators - Q0544",
    "text": "[Operators] What is the result of 7 / 2 in Java when using int operands?",
    "code": "int a = 7/2;",
    "options": [
      {
        "letter": "A",
        "text": "3.5"
      },
      {
        "letter": "B",
        "text": "Compilation error"
      },
      {
        "letter": "C",
        "text": "4"
      },
      {
        "letter": "D",
        "text": "3"
      }
    ],
    "correct": "D",
    "explanation": "Integer division truncates the decimal part; 7/2 = 3."
  },
  {
    "title": "Operators - Q0545",
    "text": "[Operators] Which operator is used for equality comparison between primitives?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "equals"
      },
      {
        "letter": "B",
        "text": "==="
      },
      {
        "letter": "C",
        "text": "=="
      },
      {
        "letter": "D",
        "text": "="
      }
    ],
    "correct": "C",
    "explanation": "Use '==' to compare primitive values; .equals() is for object equality."
  },
  {
    "title": "Operators - Q0546",
    "text": "[Operators] What does '&&' operator do?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Bitwise AND"
      },
      {
        "letter": "B",
        "text": "Logical OR"
      },
      {
        "letter": "C",
        "text": "Logical AND (short-circuit)"
      },
      {
        "letter": "D",
        "text": "Assignment"
      }
    ],
    "correct": "C",
    "explanation": "'&&' performs logical AND and short-circuits if the left operand is false."
  },
  {
    "title": "Operators - Q0547",
    "text": "[Operators] What is the value of x after int x = 5; x++; ?",
    "code": "int x = 5; x++;",
    "options": [
      {
        "letter": "A",
        "text": "7"
      },
      {
        "letter": "B",
        "text": "5"
      },
      {
        "letter": "C",
        "text": "6"
      },
      {
        "letter": "D",
        "text": "Compilation error"
      }
    ],
    "correct": "C",
    "explanation": "Post-increment increases the variable by 1, so x becomes 6."
  },
  {
    "title": "Operators - Q0548",
    "text": "[Operators] Which operator concatenates strings?",
    "code": "String s = \"Hi\" + \"There\";",
    "options": [
      {
        "letter": "A",
        "text": "."
      },
      {
        "letter": "B",
        "text": "+"
      },
      {
        "letter": "C",
        "text": ","
      },
      {
        "letter": "D",
        "text": "&"
      }
    ],
    "correct": "B",
    "explanation": "The '+' operator concatenates strings in Java."
  },
  {
    "title": "Operators - Q0549",
    "text": "[Operators] What does the ternary operator return: (5>3) ? 10 : 20 ?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "10"
      },
      {
        "letter": "B",
        "text": "true"
      },
      {
        "letter": "C",
        "text": "20"
      },
      {
        "letter": "D",
        "text": "false"
      }
    ],
    "correct": "A",
    "explanation": "Condition true, so ternary returns the first expression (10)."
  },
  {
    "title": "Operators - Q0550",
    "text": "[Operators] Which operator is used to assign a value?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": ":="
      },
      {
        "letter": "B",
        "text": "="
      },
      {
        "letter": "C",
        "text": "=="
      },
      {
        "letter": "D",
        "text": "=>"
      }
    ],
    "correct": "B",
    "explanation": "'=' is the assignment operator in Java."
  },
  {
    "title": "Operators - Q0551",
    "text": "[Operators] What is the result of (5 & 3) where & is bitwise AND?",
    "code": "int r = 5 & 3; // binary 0101 & 0011",
    "options": [
      {
        "letter": "A",
        "text": "7"
      },
      {
        "letter": "B",
        "text": "3"
      },
      {
        "letter": "C",
        "text": "5"
      },
      {
        "letter": "D",
        "text": "1"
      }
    ],
    "correct": "D",
    "explanation": "0101 & 0011 = 0001 which is 1."
  },
  {
    "title": "Operators - Q0552",
    "text": "[Operators] What is the result of 7 / 2 in Java when using int operands?",
    "code": "int a = 7/2;",
    "options": [
      {
        "letter": "A",
        "text": "3"
      },
      {
        "letter": "B",
        "text": "3.5"
      },
      {
        "letter": "C",
        "text": "Compilation error"
      },
      {
        "letter": "D",
        "text": "4"
      }
    ],
    "correct": "A",
    "explanation": "Integer division truncates the decimal part; 7/2 = 3."
  },
  {
    "title": "Operators - Q0553",
    "text": "[Operators] Which operator is used for equality comparison between primitives?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "=="
      },
      {
        "letter": "B",
        "text": "="
      },
      {
        "letter": "C",
        "text": "==="
      },
      {
        "letter": "D",
        "text": "equals"
      }
    ],
    "correct": "A",
    "explanation": "Use '==' to compare primitive values; .equals() is for object equality."
  },
  {
    "title": "Operators - Q0554",
    "text": "[Operators] What does '&&' operator do?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Assignment"
      },
      {
        "letter": "B",
        "text": "Bitwise AND"
      },
      {
        "letter": "C",
        "text": "Logical AND (short-circuit)"
      },
      {
        "letter": "D",
        "text": "Logical OR"
      }
    ],
    "correct": "C",
    "explanation": "'&&' performs logical AND and short-circuits if the left operand is false."
  },
  {
    "title": "Operators - Q0555",
    "text": "[Operators] What is the value of x after int x = 5; x++; ?",
    "code": "int x = 5; x++;",
    "options": [
      {
        "letter": "A",
        "text": "5"
      },
      {
        "letter": "B",
        "text": "6"
      },
      {
        "letter": "C",
        "text": "7"
      },
      {
        "letter": "D",
        "text": "Compilation error"
      }
    ],
    "correct": "B",
    "explanation": "Post-increment increases the variable by 1, so x becomes 6."
  },
  {
    "title": "Operators - Q0556",
    "text": "[Operators] Which operator concatenates strings?",
    "code": "String s = \"Hi\" + \"There\";",
    "options": [
      {
        "letter": "A",
        "text": "+"
      },
      {
        "letter": "B",
        "text": ","
      },
      {
        "letter": "C",
        "text": "."
      },
      {
        "letter": "D",
        "text": "&"
      }
    ],
    "correct": "A",
    "explanation": "The '+' operator concatenates strings in Java."
  },
  {
    "title": "Operators - Q0557",
    "text": "[Operators] What does the ternary operator return: (5>3) ? 10 : 20 ?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "10"
      },
      {
        "letter": "B",
        "text": "true"
      },
      {
        "letter": "C",
        "text": "20"
      },
      {
        "letter": "D",
        "text": "false"
      }
    ],
    "correct": "A",
    "explanation": "Condition true, so ternary returns the first expression (10)."
  },
  {
    "title": "Operators - Q0558",
    "text": "[Operators] Which operator is used to assign a value?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "=>"
      },
      {
        "letter": "B",
        "text": "=="
      },
      {
        "letter": "C",
        "text": "="
      },
      {
        "letter": "D",
        "text": ":="
      }
    ],
    "correct": "C",
    "explanation": "'=' is the assignment operator in Java."
  },
  {
    "title": "Operators - Q0559",
    "text": "[Operators] What is the result of (5 & 3) where & is bitwise AND?",
    "code": "int r = 5 & 3; // binary 0101 & 0011",
    "options": [
      {
        "letter": "A",
        "text": "5"
      },
      {
        "letter": "B",
        "text": "1"
      },
      {
        "letter": "C",
        "text": "7"
      },
      {
        "letter": "D",
        "text": "3"
      }
    ],
    "correct": "B",
    "explanation": "0101 & 0011 = 0001 which is 1."
  },
  {
    "title": "Operators - Q0560",
    "text": "[Operators] What is the result of 7 / 2 in Java when using int operands?",
    "code": "int a = 7/2;",
    "options": [
      {
        "letter": "A",
        "text": "Compilation error"
      },
      {
        "letter": "B",
        "text": "4"
      },
      {
        "letter": "C",
        "text": "3.5"
      },
      {
        "letter": "D",
        "text": "3"
      }
    ],
    "correct": "D",
    "explanation": "Integer division truncates the decimal part; 7/2 = 3."
  },
  {
    "title": "Operators - Q0561",
    "text": "[Operators] Which operator is used for equality comparison between primitives?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "=="
      },
      {
        "letter": "B",
        "text": "==="
      },
      {
        "letter": "C",
        "text": "equals"
      },
      {
        "letter": "D",
        "text": "="
      }
    ],
    "correct": "A",
    "explanation": "Use '==' to compare primitive values; .equals() is for object equality."
  },
  {
    "title": "Operators - Q0562",
    "text": "[Operators] What does '&&' operator do?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Bitwise AND"
      },
      {
        "letter": "B",
        "text": "Logical OR"
      },
      {
        "letter": "C",
        "text": "Logical AND (short-circuit)"
      },
      {
        "letter": "D",
        "text": "Assignment"
      }
    ],
    "correct": "C",
    "explanation": "'&&' performs logical AND and short-circuits if the left operand is false."
  },
  {
    "title": "Operators - Q0563",
    "text": "[Operators] What is the value of x after int x = 5; x++; ?",
    "code": "int x = 5; x++;",
    "options": [
      {
        "letter": "A",
        "text": "7"
      },
      {
        "letter": "B",
        "text": "6"
      },
      {
        "letter": "C",
        "text": "5"
      },
      {
        "letter": "D",
        "text": "Compilation error"
      }
    ],
    "correct": "B",
    "explanation": "Post-increment increases the variable by 1, so x becomes 6."
  },
  {
    "title": "Operators - Q0564",
    "text": "[Operators] Which operator concatenates strings?",
    "code": "String s = \"Hi\" + \"There\";",
    "options": [
      {
        "letter": "A",
        "text": ","
      },
      {
        "letter": "B",
        "text": "."
      },
      {
        "letter": "C",
        "text": "+"
      },
      {
        "letter": "D",
        "text": "&"
      }
    ],
    "correct": "C",
    "explanation": "The '+' operator concatenates strings in Java."
  },
  {
    "title": "Operators - Q0565",
    "text": "[Operators] What does the ternary operator return: (5>3) ? 10 : 20 ?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "20"
      },
      {
        "letter": "B",
        "text": "true"
      },
      {
        "letter": "C",
        "text": "10"
      },
      {
        "letter": "D",
        "text": "false"
      }
    ],
    "correct": "C",
    "explanation": "Condition true, so ternary returns the first expression (10)."
  },
  {
    "title": "Operators - Q0566",
    "text": "[Operators] Which operator is used to assign a value?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "=="
      },
      {
        "letter": "B",
        "text": "=>"
      },
      {
        "letter": "C",
        "text": "="
      },
      {
        "letter": "D",
        "text": ":="
      }
    ],
    "correct": "C",
    "explanation": "'=' is the assignment operator in Java."
  },
  {
    "title": "Operators - Q0567",
    "text": "[Operators] What is the result of (5 & 3) where & is bitwise AND?",
    "code": "int r = 5 & 3; // binary 0101 & 0011",
    "options": [
      {
        "letter": "A",
        "text": "5"
      },
      {
        "letter": "B",
        "text": "7"
      },
      {
        "letter": "C",
        "text": "1"
      },
      {
        "letter": "D",
        "text": "3"
      }
    ],
    "correct": "C",
    "explanation": "0101 & 0011 = 0001 which is 1."
  },
  {
    "title": "Operators - Q0568",
    "text": "[Operators] What is the result of 7 / 2 in Java when using int operands?",
    "code": "int a = 7/2;",
    "options": [
      {
        "letter": "A",
        "text": "3.5"
      },
      {
        "letter": "B",
        "text": "4"
      },
      {
        "letter": "C",
        "text": "Compilation error"
      },
      {
        "letter": "D",
        "text": "3"
      }
    ],
    "correct": "D",
    "explanation": "Integer division truncates the decimal part; 7/2 = 3."
  },
  {
    "title": "Operators - Q0569",
    "text": "[Operators] Which operator is used for equality comparison between primitives?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "==="
      },
      {
        "letter": "B",
        "text": "equals"
      },
      {
        "letter": "C",
        "text": "="
      },
      {
        "letter": "D",
        "text": "=="
      }
    ],
    "correct": "D",
    "explanation": "Use '==' to compare primitive values; .equals() is for object equality."
  },
  {
    "title": "Operators - Q0570",
    "text": "[Operators] What does '&&' operator do?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Assignment"
      },
      {
        "letter": "B",
        "text": "Logical OR"
      },
      {
        "letter": "C",
        "text": "Logical AND (short-circuit)"
      },
      {
        "letter": "D",
        "text": "Bitwise AND"
      }
    ],
    "correct": "C",
    "explanation": "'&&' performs logical AND and short-circuits if the left operand is false."
  },
  {
    "title": "Operators - Q0571",
    "text": "[Operators] What is the value of x after int x = 5; x++; ?",
    "code": "int x = 5; x++;",
    "options": [
      {
        "letter": "A",
        "text": "5"
      },
      {
        "letter": "B",
        "text": "Compilation error"
      },
      {
        "letter": "C",
        "text": "6"
      },
      {
        "letter": "D",
        "text": "7"
      }
    ],
    "correct": "C",
    "explanation": "Post-increment increases the variable by 1, so x becomes 6."
  },
  {
    "title": "Operators - Q0572",
    "text": "[Operators] Which operator concatenates strings?",
    "code": "String s = \"Hi\" + \"There\";",
    "options": [
      {
        "letter": "A",
        "text": "+"
      },
      {
        "letter": "B",
        "text": "."
      },
      {
        "letter": "C",
        "text": "&"
      },
      {
        "letter": "D",
        "text": ","
      }
    ],
    "correct": "A",
    "explanation": "The '+' operator concatenates strings in Java."
  },
  {
    "title": "Control Flow - Q0573",
    "text": "[Control Flow] How many times will the while loop execute?",
    "code": "int i=0; while(i<1) { System.out.print(i); i++; }",
    "options": [
      {
        "letter": "A",
        "text": "1"
      },
      {
        "letter": "B",
        "text": "2"
      },
      {
        "letter": "C",
        "text": "Infinite"
      },
      {
        "letter": "D",
        "text": "0"
      }
    ],
    "correct": "A",
    "explanation": "Condition true once; loop runs one time."
  },
  {
    "title": "Control Flow - Q0574",
    "text": "[Control Flow] What does a do-while loop guarantee?",
    "code": "int i=5; do { System.out.print(i); i++; } while(i<5);",
    "options": [
      {
        "letter": "A",
        "text": "Body executes at least once"
      },
      {
        "letter": "B",
        "text": "Executes twice"
      },
      {
        "letter": "C",
        "text": "It may not execute at all"
      },
      {
        "letter": "D",
        "text": "Always infinite"
      }
    ],
    "correct": "A",
    "explanation": "do-while checks condition after executing the body, ensuring at least one run."
  },
  {
    "title": "Control Flow - Q0575",
    "text": "[Control Flow] What is printed before break?",
    "code": "for(int i=0;i<5;i++){ if(i==2) break; System.out.print(i);}",
    "options": [
      {
        "letter": "A",
        "text": "Nothing"
      },
      {
        "letter": "B",
        "text": "0 1"
      },
      {
        "letter": "C",
        "text": "0 1 2 3"
      },
      {
        "letter": "D",
        "text": "0 1 2"
      }
    ],
    "correct": "B",
    "explanation": "Loop prints 0 and 1, then breaks when i==2 before printing 2."
  },
  {
    "title": "Control Flow - Q0576",
    "text": "[Control Flow] What is the output using continue?",
    "code": "for(int i=0;i<3;i++){ if(i==1) continue; System.out.print(i);}",
    "options": [
      {
        "letter": "A",
        "text": "0 1"
      },
      {
        "letter": "B",
        "text": "0 1 2"
      },
      {
        "letter": "C",
        "text": "0 2"
      },
      {
        "letter": "D",
        "text": "1 2"
      }
    ],
    "correct": "C",
    "explanation": "When i==1 continue skips remaining body, so 1 isn't printed."
  },
  {
    "title": "Control Flow - Q0577",
    "text": "[Control Flow] Which will be printed? (Be careful with nested if-else)",
    "code": "if(true) if(false) System.out.print(\"A\"); else System.out.print(\"B\");",
    "options": [
      {
        "letter": "A",
        "text": "Nothing"
      },
      {
        "letter": "B",
        "text": "Compilation error"
      },
      {
        "letter": "C",
        "text": "B"
      },
      {
        "letter": "D",
        "text": "A"
      }
    ],
    "correct": "C",
    "explanation": "Inner if(false) goes to its else printing B; the outer if(true) surrounds it."
  },
  {
    "title": "Control Flow - Q0578",
    "text": "[Control Flow] Can a switch statement use Strings as case labels (Java 7+)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "No"
      },
      {
        "letter": "B",
        "text": "Only with enum"
      },
      {
        "letter": "C",
        "text": "Yes"
      },
      {
        "letter": "D",
        "text": "Only with integers"
      }
    ],
    "correct": "C",
    "explanation": "Since Java 7, switch supports String expressions."
  },
  {
    "title": "Control Flow - Q0579",
    "text": "[Control Flow] What is printed by the switch with fall-through cases?",
    "code": "int x = 0; switch(x){ case 0: case 1: System.out.print(\"X\"); break; }",
    "options": [
      {
        "letter": "A",
        "text": "X"
      },
      {
        "letter": "B",
        "text": "0"
      },
      {
        "letter": "C",
        "text": "Compilation error"
      },
      {
        "letter": "D",
        "text": "Nothing"
      }
    ],
    "correct": "A",
    "explanation": "Multiple case labels can fall through to same code block, printing X."
  },
  {
    "title": "Control Flow - Q0580",
    "text": "[Control Flow] What is the output of the for loop above?",
    "code": "for (int i = 0; i < 3; i++) System.out.print(i);",
    "options": [
      {
        "letter": "A",
        "text": "123"
      },
      {
        "letter": "B",
        "text": "01"
      },
      {
        "letter": "C",
        "text": "012"
      },
      {
        "letter": "D",
        "text": "0123"
      }
    ],
    "correct": "C",
    "explanation": "Loop prints i values 0,1,2 concatenated."
  },
  {
    "title": "Control Flow - Q0581",
    "text": "[Control Flow] What will be printed?",
    "code": "int x = 10; if (x > 5) System.out.println(\"Hi\"); else System.out.println(\"Bye\");",
    "options": [
      {
        "letter": "A",
        "text": "Hi"
      },
      {
        "letter": "B",
        "text": "Nothing"
      },
      {
        "letter": "C",
        "text": "Compilation error"
      },
      {
        "letter": "D",
        "text": "Bye"
      }
    ],
    "correct": "A",
    "explanation": "Condition true so 'Hi' is printed."
  },
  {
    "title": "Control Flow - Q0582",
    "text": "[Control Flow] What will the switch print?",
    "code": "int day = 2; switch(day) { case 1: System.out.print(\"A\"); break; default: System.out.print(\"B\"); }",
    "options": [
      {
        "letter": "A",
        "text": "A"
      },
      {
        "letter": "B",
        "text": "Nothing"
      },
      {
        "letter": "C",
        "text": "Compilation error"
      },
      {
        "letter": "D",
        "text": "B"
      }
    ],
    "correct": "D",
    "explanation": "No case matches 2, so default executes printing B."
  },
  {
    "title": "Control Flow - Q0583",
    "text": "[Control Flow] How many times will the while loop execute?",
    "code": "int i=0; while(i<1) { System.out.print(i); i++; }",
    "options": [
      {
        "letter": "A",
        "text": "Infinite"
      },
      {
        "letter": "B",
        "text": "1"
      },
      {
        "letter": "C",
        "text": "2"
      },
      {
        "letter": "D",
        "text": "0"
      }
    ],
    "correct": "B",
    "explanation": "Condition true once; loop runs one time."
  },
  {
    "title": "Control Flow - Q0584",
    "text": "[Control Flow] What does a do-while loop guarantee?",
    "code": "int i=5; do { System.out.print(i); i++; } while(i<5);",
    "options": [
      {
        "letter": "A",
        "text": "It may not execute at all"
      },
      {
        "letter": "B",
        "text": "Executes twice"
      },
      {
        "letter": "C",
        "text": "Always infinite"
      },
      {
        "letter": "D",
        "text": "Body executes at least once"
      }
    ],
    "correct": "D",
    "explanation": "do-while checks condition after executing the body, ensuring at least one run."
  },
  {
    "title": "Control Flow - Q0585",
    "text": "[Control Flow] What is printed before break?",
    "code": "for(int i=0;i<5;i++){ if(i==2) break; System.out.print(i);}",
    "options": [
      {
        "letter": "A",
        "text": "0 1 2"
      },
      {
        "letter": "B",
        "text": "0 1"
      },
      {
        "letter": "C",
        "text": "0 1 2 3"
      },
      {
        "letter": "D",
        "text": "Nothing"
      }
    ],
    "correct": "B",
    "explanation": "Loop prints 0 and 1, then breaks when i==2 before printing 2."
  },
  {
    "title": "Control Flow - Q0586",
    "text": "[Control Flow] What is the output using continue?",
    "code": "for(int i=0;i<3;i++){ if(i==1) continue; System.out.print(i);}",
    "options": [
      {
        "letter": "A",
        "text": "0 1 2"
      },
      {
        "letter": "B",
        "text": "1 2"
      },
      {
        "letter": "C",
        "text": "0 1"
      },
      {
        "letter": "D",
        "text": "0 2"
      }
    ],
    "correct": "D",
    "explanation": "When i==1 continue skips remaining body, so 1 isn't printed."
  },
  {
    "title": "Control Flow - Q0587",
    "text": "[Control Flow] Which will be printed? (Be careful with nested if-else)",
    "code": "if(true) if(false) System.out.print(\"A\"); else System.out.print(\"B\");",
    "options": [
      {
        "letter": "A",
        "text": "Compilation error"
      },
      {
        "letter": "B",
        "text": "A"
      },
      {
        "letter": "C",
        "text": "Nothing"
      },
      {
        "letter": "D",
        "text": "B"
      }
    ],
    "correct": "D",
    "explanation": "Inner if(false) goes to its else printing B; the outer if(true) surrounds it."
  },
  {
    "title": "Control Flow - Q0588",
    "text": "[Control Flow] Can a switch statement use Strings as case labels (Java 7+)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Yes"
      },
      {
        "letter": "B",
        "text": "Only with integers"
      },
      {
        "letter": "C",
        "text": "Only with enum"
      },
      {
        "letter": "D",
        "text": "No"
      }
    ],
    "correct": "A",
    "explanation": "Since Java 7, switch supports String expressions."
  },
  {
    "title": "Control Flow - Q0589",
    "text": "[Control Flow] What is printed by the switch with fall-through cases?",
    "code": "int x = 0; switch(x){ case 0: case 1: System.out.print(\"X\"); break; }",
    "options": [
      {
        "letter": "A",
        "text": "Compilation error"
      },
      {
        "letter": "B",
        "text": "Nothing"
      },
      {
        "letter": "C",
        "text": "X"
      },
      {
        "letter": "D",
        "text": "0"
      }
    ],
    "correct": "C",
    "explanation": "Multiple case labels can fall through to same code block, printing X."
  },
  {
    "title": "Control Flow - Q0590",
    "text": "[Control Flow] What is the output of the for loop above?",
    "code": "for (int i = 0; i < 3; i++) System.out.print(i);",
    "options": [
      {
        "letter": "A",
        "text": "123"
      },
      {
        "letter": "B",
        "text": "01"
      },
      {
        "letter": "C",
        "text": "0123"
      },
      {
        "letter": "D",
        "text": "012"
      }
    ],
    "correct": "D",
    "explanation": "Loop prints i values 0,1,2 concatenated."
  },
  {
    "title": "Control Flow - Q0591",
    "text": "[Control Flow] What will be printed?",
    "code": "int x = 10; if (x > 5) System.out.println(\"Hi\"); else System.out.println(\"Bye\");",
    "options": [
      {
        "letter": "A",
        "text": "Hi"
      },
      {
        "letter": "B",
        "text": "Nothing"
      },
      {
        "letter": "C",
        "text": "Bye"
      },
      {
        "letter": "D",
        "text": "Compilation error"
      }
    ],
    "correct": "A",
    "explanation": "Condition true so 'Hi' is printed."
  },
  {
    "title": "Control Flow - Q0592",
    "text": "[Control Flow] What will the switch print?",
    "code": "int day = 2; switch(day) { case 1: System.out.print(\"A\"); break; default: System.out.print(\"B\"); }",
    "options": [
      {
        "letter": "A",
        "text": "A"
      },
      {
        "letter": "B",
        "text": "Nothing"
      },
      {
        "letter": "C",
        "text": "Compilation error"
      },
      {
        "letter": "D",
        "text": "B"
      }
    ],
    "correct": "D",
    "explanation": "No case matches 2, so default executes printing B."
  },
  {
    "title": "Control Flow - Q0593",
    "text": "[Control Flow] How many times will the while loop execute?",
    "code": "int i=0; while(i<1) { System.out.print(i); i++; }",
    "options": [
      {
        "letter": "A",
        "text": "Infinite"
      },
      {
        "letter": "B",
        "text": "2"
      },
      {
        "letter": "C",
        "text": "1"
      },
      {
        "letter": "D",
        "text": "0"
      }
    ],
    "correct": "C",
    "explanation": "Condition true once; loop runs one time."
  },
  {
    "title": "Control Flow - Q0594",
    "text": "[Control Flow] What does a do-while loop guarantee?",
    "code": "int i=5; do { System.out.print(i); i++; } while(i<5);",
    "options": [
      {
        "letter": "A",
        "text": "Executes twice"
      },
      {
        "letter": "B",
        "text": "It may not execute at all"
      },
      {
        "letter": "C",
        "text": "Body executes at least once"
      },
      {
        "letter": "D",
        "text": "Always infinite"
      }
    ],
    "correct": "C",
    "explanation": "do-while checks condition after executing the body, ensuring at least one run."
  },
  {
    "title": "Control Flow - Q0595",
    "text": "[Control Flow] What is printed before break?",
    "code": "for(int i=0;i<5;i++){ if(i==2) break; System.out.print(i);}",
    "options": [
      {
        "letter": "A",
        "text": "0 1 2"
      },
      {
        "letter": "B",
        "text": "0 1"
      },
      {
        "letter": "C",
        "text": "0 1 2 3"
      },
      {
        "letter": "D",
        "text": "Nothing"
      }
    ],
    "correct": "B",
    "explanation": "Loop prints 0 and 1, then breaks when i==2 before printing 2."
  },
  {
    "title": "Control Flow - Q0596",
    "text": "[Control Flow] What is the output using continue?",
    "code": "for(int i=0;i<3;i++){ if(i==1) continue; System.out.print(i);}",
    "options": [
      {
        "letter": "A",
        "text": "0 1 2"
      },
      {
        "letter": "B",
        "text": "0 1"
      },
      {
        "letter": "C",
        "text": "1 2"
      },
      {
        "letter": "D",
        "text": "0 2"
      }
    ],
    "correct": "D",
    "explanation": "When i==1 continue skips remaining body, so 1 isn't printed."
  },
  {
    "title": "Control Flow - Q0597",
    "text": "[Control Flow] Which will be printed? (Be careful with nested if-else)",
    "code": "if(true) if(false) System.out.print(\"A\"); else System.out.print(\"B\");",
    "options": [
      {
        "letter": "A",
        "text": "A"
      },
      {
        "letter": "B",
        "text": "B"
      },
      {
        "letter": "C",
        "text": "Compilation error"
      },
      {
        "letter": "D",
        "text": "Nothing"
      }
    ],
    "correct": "B",
    "explanation": "Inner if(false) goes to its else printing B; the outer if(true) surrounds it."
  },
  {
    "title": "Control Flow - Q0598",
    "text": "[Control Flow] Can a switch statement use Strings as case labels (Java 7+)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "No"
      },
      {
        "letter": "B",
        "text": "Only with integers"
      },
      {
        "letter": "C",
        "text": "Only with enum"
      },
      {
        "letter": "D",
        "text": "Yes"
      }
    ],
    "correct": "D",
    "explanation": "Since Java 7, switch supports String expressions."
  },
  {
    "title": "Control Flow - Q0599",
    "text": "[Control Flow] What is printed by the switch with fall-through cases?",
    "code": "int x = 0; switch(x){ case 0: case 1: System.out.print(\"X\"); break; }",
    "options": [
      {
        "letter": "A",
        "text": "Compilation error"
      },
      {
        "letter": "B",
        "text": "X"
      },
      {
        "letter": "C",
        "text": "0"
      },
      {
        "letter": "D",
        "text": "Nothing"
      }
    ],
    "correct": "B",
    "explanation": "Multiple case labels can fall through to same code block, printing X."
  },
  {
    "title": "Control Flow - Q0600",
    "text": "[Control Flow] What is the output of the for loop above?",
    "code": "for (int i = 0; i < 3; i++) System.out.print(i);",
    "options": [
      {
        "letter": "A",
        "text": "012"
      },
      {
        "letter": "B",
        "text": "01"
      },
      {
        "letter": "C",
        "text": "123"
      },
      {
        "letter": "D",
        "text": "0123"
      }
    ],
    "correct": "A",
    "explanation": "Loop prints i values 0,1,2 concatenated."
  },
  {
    "title": "Control Flow - Q0601",
    "text": "[Control Flow] What will be printed?",
    "code": "int x = 10; if (x > 5) System.out.println(\"Hi\"); else System.out.println(\"Bye\");",
    "options": [
      {
        "letter": "A",
        "text": "Compilation error"
      },
      {
        "letter": "B",
        "text": "Hi"
      },
      {
        "letter": "C",
        "text": "Nothing"
      },
      {
        "letter": "D",
        "text": "Bye"
      }
    ],
    "correct": "B",
    "explanation": "Condition true so 'Hi' is printed."
  },
  {
    "title": "Control Flow - Q0602",
    "text": "[Control Flow] What will the switch print?",
    "code": "int day = 2; switch(day) { case 1: System.out.print(\"A\"); break; default: System.out.print(\"B\"); }",
    "options": [
      {
        "letter": "A",
        "text": "A"
      },
      {
        "letter": "B",
        "text": "B"
      },
      {
        "letter": "C",
        "text": "Compilation error"
      },
      {
        "letter": "D",
        "text": "Nothing"
      }
    ],
    "correct": "B",
    "explanation": "No case matches 2, so default executes printing B."
  },
  {
    "title": "Control Flow - Q0603",
    "text": "[Control Flow] How many times will the while loop execute?",
    "code": "int i=0; while(i<1) { System.out.print(i); i++; }",
    "options": [
      {
        "letter": "A",
        "text": "2"
      },
      {
        "letter": "B",
        "text": "Infinite"
      },
      {
        "letter": "C",
        "text": "0"
      },
      {
        "letter": "D",
        "text": "1"
      }
    ],
    "correct": "D",
    "explanation": "Condition true once; loop runs one time."
  },
  {
    "title": "Control Flow - Q0604",
    "text": "[Control Flow] What does a do-while loop guarantee?",
    "code": "int i=5; do { System.out.print(i); i++; } while(i<5);",
    "options": [
      {
        "letter": "A",
        "text": "It may not execute at all"
      },
      {
        "letter": "B",
        "text": "Always infinite"
      },
      {
        "letter": "C",
        "text": "Body executes at least once"
      },
      {
        "letter": "D",
        "text": "Executes twice"
      }
    ],
    "correct": "C",
    "explanation": "do-while checks condition after executing the body, ensuring at least one run."
  },
  {
    "title": "Control Flow - Q0605",
    "text": "[Control Flow] What is printed before break?",
    "code": "for(int i=0;i<5;i++){ if(i==2) break; System.out.print(i);}",
    "options": [
      {
        "letter": "A",
        "text": "0 1"
      },
      {
        "letter": "B",
        "text": "0 1 2"
      },
      {
        "letter": "C",
        "text": "Nothing"
      },
      {
        "letter": "D",
        "text": "0 1 2 3"
      }
    ],
    "correct": "A",
    "explanation": "Loop prints 0 and 1, then breaks when i==2 before printing 2."
  },
  {
    "title": "Control Flow - Q0606",
    "text": "[Control Flow] What is the output using continue?",
    "code": "for(int i=0;i<3;i++){ if(i==1) continue; System.out.print(i);}",
    "options": [
      {
        "letter": "A",
        "text": "0 1"
      },
      {
        "letter": "B",
        "text": "0 2"
      },
      {
        "letter": "C",
        "text": "0 1 2"
      },
      {
        "letter": "D",
        "text": "1 2"
      }
    ],
    "correct": "B",
    "explanation": "When i==1 continue skips remaining body, so 1 isn't printed."
  },
  {
    "title": "Control Flow - Q0607",
    "text": "[Control Flow] Which will be printed? (Be careful with nested if-else)",
    "code": "if(true) if(false) System.out.print(\"A\"); else System.out.print(\"B\");",
    "options": [
      {
        "letter": "A",
        "text": "B"
      },
      {
        "letter": "B",
        "text": "Nothing"
      },
      {
        "letter": "C",
        "text": "A"
      },
      {
        "letter": "D",
        "text": "Compilation error"
      }
    ],
    "correct": "A",
    "explanation": "Inner if(false) goes to its else printing B; the outer if(true) surrounds it."
  },
  {
    "title": "Control Flow - Q0608",
    "text": "[Control Flow] Can a switch statement use Strings as case labels (Java 7+)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Only with integers"
      },
      {
        "letter": "B",
        "text": "Only with enum"
      },
      {
        "letter": "C",
        "text": "Yes"
      },
      {
        "letter": "D",
        "text": "No"
      }
    ],
    "correct": "C",
    "explanation": "Since Java 7, switch supports String expressions."
  },
  {
    "title": "Control Flow - Q0609",
    "text": "[Control Flow] What is printed by the switch with fall-through cases?",
    "code": "int x = 0; switch(x){ case 0: case 1: System.out.print(\"X\"); break; }",
    "options": [
      {
        "letter": "A",
        "text": "0"
      },
      {
        "letter": "B",
        "text": "X"
      },
      {
        "letter": "C",
        "text": "Compilation error"
      },
      {
        "letter": "D",
        "text": "Nothing"
      }
    ],
    "correct": "B",
    "explanation": "Multiple case labels can fall through to same code block, printing X."
  },
  {
    "title": "Control Flow - Q0610",
    "text": "[Control Flow] What is the output of the for loop above?",
    "code": "for (int i = 0; i < 3; i++) System.out.print(i);",
    "options": [
      {
        "letter": "A",
        "text": "012"
      },
      {
        "letter": "B",
        "text": "123"
      },
      {
        "letter": "C",
        "text": "0123"
      },
      {
        "letter": "D",
        "text": "01"
      }
    ],
    "correct": "A",
    "explanation": "Loop prints i values 0,1,2 concatenated."
  },
  {
    "title": "Control Flow - Q0611",
    "text": "[Control Flow] What will be printed?",
    "code": "int x = 10; if (x > 5) System.out.println(\"Hi\"); else System.out.println(\"Bye\");",
    "options": [
      {
        "letter": "A",
        "text": "Nothing"
      },
      {
        "letter": "B",
        "text": "Compilation error"
      },
      {
        "letter": "C",
        "text": "Hi"
      },
      {
        "letter": "D",
        "text": "Bye"
      }
    ],
    "correct": "C",
    "explanation": "Condition true so 'Hi' is printed."
  },
  {
    "title": "Control Flow - Q0612",
    "text": "[Control Flow] What will the switch print?",
    "code": "int day = 2; switch(day) { case 1: System.out.print(\"A\"); break; default: System.out.print(\"B\"); }",
    "options": [
      {
        "letter": "A",
        "text": "Compilation error"
      },
      {
        "letter": "B",
        "text": "Nothing"
      },
      {
        "letter": "C",
        "text": "A"
      },
      {
        "letter": "D",
        "text": "B"
      }
    ],
    "correct": "D",
    "explanation": "No case matches 2, so default executes printing B."
  },
  {
    "title": "Control Flow - Q0613",
    "text": "[Control Flow] How many times will the while loop execute?",
    "code": "int i=0; while(i<1) { System.out.print(i); i++; }",
    "options": [
      {
        "letter": "A",
        "text": "0"
      },
      {
        "letter": "B",
        "text": "Infinite"
      },
      {
        "letter": "C",
        "text": "1"
      },
      {
        "letter": "D",
        "text": "2"
      }
    ],
    "correct": "C",
    "explanation": "Condition true once; loop runs one time."
  },
  {
    "title": "Control Flow - Q0614",
    "text": "[Control Flow] What does a do-while loop guarantee?",
    "code": "int i=5; do { System.out.print(i); i++; } while(i<5);",
    "options": [
      {
        "letter": "A",
        "text": "It may not execute at all"
      },
      {
        "letter": "B",
        "text": "Executes twice"
      },
      {
        "letter": "C",
        "text": "Body executes at least once"
      },
      {
        "letter": "D",
        "text": "Always infinite"
      }
    ],
    "correct": "C",
    "explanation": "do-while checks condition after executing the body, ensuring at least one run."
  },
  {
    "title": "Control Flow - Q0615",
    "text": "[Control Flow] What is printed before break?",
    "code": "for(int i=0;i<5;i++){ if(i==2) break; System.out.print(i);}",
    "options": [
      {
        "letter": "A",
        "text": "0 1"
      },
      {
        "letter": "B",
        "text": "0 1 2"
      },
      {
        "letter": "C",
        "text": "Nothing"
      },
      {
        "letter": "D",
        "text": "0 1 2 3"
      }
    ],
    "correct": "A",
    "explanation": "Loop prints 0 and 1, then breaks when i==2 before printing 2."
  },
  {
    "title": "Control Flow - Q0616",
    "text": "[Control Flow] What is the output using continue?",
    "code": "for(int i=0;i<3;i++){ if(i==1) continue; System.out.print(i);}",
    "options": [
      {
        "letter": "A",
        "text": "0 1 2"
      },
      {
        "letter": "B",
        "text": "0 1"
      },
      {
        "letter": "C",
        "text": "1 2"
      },
      {
        "letter": "D",
        "text": "0 2"
      }
    ],
    "correct": "D",
    "explanation": "When i==1 continue skips remaining body, so 1 isn't printed."
  },
  {
    "title": "Control Flow - Q0617",
    "text": "[Control Flow] Which will be printed? (Be careful with nested if-else)",
    "code": "if(true) if(false) System.out.print(\"A\"); else System.out.print(\"B\");",
    "options": [
      {
        "letter": "A",
        "text": "B"
      },
      {
        "letter": "B",
        "text": "Compilation error"
      },
      {
        "letter": "C",
        "text": "Nothing"
      },
      {
        "letter": "D",
        "text": "A"
      }
    ],
    "correct": "A",
    "explanation": "Inner if(false) goes to its else printing B; the outer if(true) surrounds it."
  },
  {
    "title": "Control Flow - Q0618",
    "text": "[Control Flow] Can a switch statement use Strings as case labels (Java 7+)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Only with enum"
      },
      {
        "letter": "B",
        "text": "Only with integers"
      },
      {
        "letter": "C",
        "text": "Yes"
      },
      {
        "letter": "D",
        "text": "No"
      }
    ],
    "correct": "C",
    "explanation": "Since Java 7, switch supports String expressions."
  },
  {
    "title": "Control Flow - Q0619",
    "text": "[Control Flow] What is printed by the switch with fall-through cases?",
    "code": "int x = 0; switch(x){ case 0: case 1: System.out.print(\"X\"); break; }",
    "options": [
      {
        "letter": "A",
        "text": "Compilation error"
      },
      {
        "letter": "B",
        "text": "X"
      },
      {
        "letter": "C",
        "text": "0"
      },
      {
        "letter": "D",
        "text": "Nothing"
      }
    ],
    "correct": "B",
    "explanation": "Multiple case labels can fall through to same code block, printing X."
  },
  {
    "title": "Control Flow - Q0620",
    "text": "[Control Flow] What is the output of the for loop above?",
    "code": "for (int i = 0; i < 3; i++) System.out.print(i);",
    "options": [
      {
        "letter": "A",
        "text": "123"
      },
      {
        "letter": "B",
        "text": "012"
      },
      {
        "letter": "C",
        "text": "0123"
      },
      {
        "letter": "D",
        "text": "01"
      }
    ],
    "correct": "B",
    "explanation": "Loop prints i values 0,1,2 concatenated."
  },
  {
    "title": "Control Flow - Q0621",
    "text": "[Control Flow] What will be printed?",
    "code": "int x = 10; if (x > 5) System.out.println(\"Hi\"); else System.out.println(\"Bye\");",
    "options": [
      {
        "letter": "A",
        "text": "Compilation error"
      },
      {
        "letter": "B",
        "text": "Hi"
      },
      {
        "letter": "C",
        "text": "Nothing"
      },
      {
        "letter": "D",
        "text": "Bye"
      }
    ],
    "correct": "B",
    "explanation": "Condition true so 'Hi' is printed."
  },
  {
    "title": "Control Flow - Q0622",
    "text": "[Control Flow] What will the switch print?",
    "code": "int day = 2; switch(day) { case 1: System.out.print(\"A\"); break; default: System.out.print(\"B\"); }",
    "options": [
      {
        "letter": "A",
        "text": "Nothing"
      },
      {
        "letter": "B",
        "text": "A"
      },
      {
        "letter": "C",
        "text": "B"
      },
      {
        "letter": "D",
        "text": "Compilation error"
      }
    ],
    "correct": "C",
    "explanation": "No case matches 2, so default executes printing B."
  },
  {
    "title": "Control Flow - Q0623",
    "text": "[Control Flow] How many times will the while loop execute?",
    "code": "int i=0; while(i<1) { System.out.print(i); i++; }",
    "options": [
      {
        "letter": "A",
        "text": "Infinite"
      },
      {
        "letter": "B",
        "text": "0"
      },
      {
        "letter": "C",
        "text": "1"
      },
      {
        "letter": "D",
        "text": "2"
      }
    ],
    "correct": "C",
    "explanation": "Condition true once; loop runs one time."
  },
  {
    "title": "Control Flow - Q0624",
    "text": "[Control Flow] What does a do-while loop guarantee?",
    "code": "int i=5; do { System.out.print(i); i++; } while(i<5);",
    "options": [
      {
        "letter": "A",
        "text": "Body executes at least once"
      },
      {
        "letter": "B",
        "text": "It may not execute at all"
      },
      {
        "letter": "C",
        "text": "Always infinite"
      },
      {
        "letter": "D",
        "text": "Executes twice"
      }
    ],
    "correct": "A",
    "explanation": "do-while checks condition after executing the body, ensuring at least one run."
  },
  {
    "title": "Control Flow - Q0625",
    "text": "[Control Flow] What is printed before break?",
    "code": "for(int i=0;i<5;i++){ if(i==2) break; System.out.print(i);}",
    "options": [
      {
        "letter": "A",
        "text": "0 1 2"
      },
      {
        "letter": "B",
        "text": "Nothing"
      },
      {
        "letter": "C",
        "text": "0 1 2 3"
      },
      {
        "letter": "D",
        "text": "0 1"
      }
    ],
    "correct": "D",
    "explanation": "Loop prints 0 and 1, then breaks when i==2 before printing 2."
  },
  {
    "title": "Control Flow - Q0626",
    "text": "[Control Flow] What is the output using continue?",
    "code": "for(int i=0;i<3;i++){ if(i==1) continue; System.out.print(i);}",
    "options": [
      {
        "letter": "A",
        "text": "0 1"
      },
      {
        "letter": "B",
        "text": "0 1 2"
      },
      {
        "letter": "C",
        "text": "0 2"
      },
      {
        "letter": "D",
        "text": "1 2"
      }
    ],
    "correct": "C",
    "explanation": "When i==1 continue skips remaining body, so 1 isn't printed."
  },
  {
    "title": "Control Flow - Q0627",
    "text": "[Control Flow] Which will be printed? (Be careful with nested if-else)",
    "code": "if(true) if(false) System.out.print(\"A\"); else System.out.print(\"B\");",
    "options": [
      {
        "letter": "A",
        "text": "B"
      },
      {
        "letter": "B",
        "text": "Nothing"
      },
      {
        "letter": "C",
        "text": "A"
      },
      {
        "letter": "D",
        "text": "Compilation error"
      }
    ],
    "correct": "A",
    "explanation": "Inner if(false) goes to its else printing B; the outer if(true) surrounds it."
  },
  {
    "title": "Control Flow - Q0628",
    "text": "[Control Flow] Can a switch statement use Strings as case labels (Java 7+)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "No"
      },
      {
        "letter": "B",
        "text": "Only with integers"
      },
      {
        "letter": "C",
        "text": "Yes"
      },
      {
        "letter": "D",
        "text": "Only with enum"
      }
    ],
    "correct": "C",
    "explanation": "Since Java 7, switch supports String expressions."
  },
  {
    "title": "Control Flow - Q0629",
    "text": "[Control Flow] What is printed by the switch with fall-through cases?",
    "code": "int x = 0; switch(x){ case 0: case 1: System.out.print(\"X\"); break; }",
    "options": [
      {
        "letter": "A",
        "text": "0"
      },
      {
        "letter": "B",
        "text": "X"
      },
      {
        "letter": "C",
        "text": "Nothing"
      },
      {
        "letter": "D",
        "text": "Compilation error"
      }
    ],
    "correct": "B",
    "explanation": "Multiple case labels can fall through to same code block, printing X."
  },
  {
    "title": "Control Flow - Q0630",
    "text": "[Control Flow] What is the output of the for loop above?",
    "code": "for (int i = 0; i < 3; i++) System.out.print(i);",
    "options": [
      {
        "letter": "A",
        "text": "012"
      },
      {
        "letter": "B",
        "text": "0123"
      },
      {
        "letter": "C",
        "text": "01"
      },
      {
        "letter": "D",
        "text": "123"
      }
    ],
    "correct": "A",
    "explanation": "Loop prints i values 0,1,2 concatenated."
  },
  {
    "title": "Control Flow - Q0631",
    "text": "[Control Flow] What will be printed?",
    "code": "int x = 10; if (x > 5) System.out.println(\"Hi\"); else System.out.println(\"Bye\");",
    "options": [
      {
        "letter": "A",
        "text": "Bye"
      },
      {
        "letter": "B",
        "text": "Hi"
      },
      {
        "letter": "C",
        "text": "Compilation error"
      },
      {
        "letter": "D",
        "text": "Nothing"
      }
    ],
    "correct": "B",
    "explanation": "Condition true so 'Hi' is printed."
  },
  {
    "title": "Control Flow - Q0632",
    "text": "[Control Flow] What will the switch print?",
    "code": "int day = 2; switch(day) { case 1: System.out.print(\"A\"); break; default: System.out.print(\"B\"); }",
    "options": [
      {
        "letter": "A",
        "text": "B"
      },
      {
        "letter": "B",
        "text": "Compilation error"
      },
      {
        "letter": "C",
        "text": "Nothing"
      },
      {
        "letter": "D",
        "text": "A"
      }
    ],
    "correct": "A",
    "explanation": "No case matches 2, so default executes printing B."
  },
  {
    "title": "Control Flow - Q0633",
    "text": "[Control Flow] How many times will the while loop execute?",
    "code": "int i=0; while(i<1) { System.out.print(i); i++; }",
    "options": [
      {
        "letter": "A",
        "text": "0"
      },
      {
        "letter": "B",
        "text": "2"
      },
      {
        "letter": "C",
        "text": "1"
      },
      {
        "letter": "D",
        "text": "Infinite"
      }
    ],
    "correct": "C",
    "explanation": "Condition true once; loop runs one time."
  },
  {
    "title": "Control Flow - Q0634",
    "text": "[Control Flow] What does a do-while loop guarantee?",
    "code": "int i=5; do { System.out.print(i); i++; } while(i<5);",
    "options": [
      {
        "letter": "A",
        "text": "Always infinite"
      },
      {
        "letter": "B",
        "text": "Executes twice"
      },
      {
        "letter": "C",
        "text": "Body executes at least once"
      },
      {
        "letter": "D",
        "text": "It may not execute at all"
      }
    ],
    "correct": "C",
    "explanation": "do-while checks condition after executing the body, ensuring at least one run."
  },
  {
    "title": "Control Flow - Q0635",
    "text": "[Control Flow] What is printed before break?",
    "code": "for(int i=0;i<5;i++){ if(i==2) break; System.out.print(i);}",
    "options": [
      {
        "letter": "A",
        "text": "Nothing"
      },
      {
        "letter": "B",
        "text": "0 1 2 3"
      },
      {
        "letter": "C",
        "text": "0 1 2"
      },
      {
        "letter": "D",
        "text": "0 1"
      }
    ],
    "correct": "D",
    "explanation": "Loop prints 0 and 1, then breaks when i==2 before printing 2."
  },
  {
    "title": "Control Flow - Q0636",
    "text": "[Control Flow] What is the output using continue?",
    "code": "for(int i=0;i<3;i++){ if(i==1) continue; System.out.print(i);}",
    "options": [
      {
        "letter": "A",
        "text": "1 2"
      },
      {
        "letter": "B",
        "text": "0 1 2"
      },
      {
        "letter": "C",
        "text": "0 1"
      },
      {
        "letter": "D",
        "text": "0 2"
      }
    ],
    "correct": "D",
    "explanation": "When i==1 continue skips remaining body, so 1 isn't printed."
  },
  {
    "title": "Control Flow - Q0637",
    "text": "[Control Flow] Which will be printed? (Be careful with nested if-else)",
    "code": "if(true) if(false) System.out.print(\"A\"); else System.out.print(\"B\");",
    "options": [
      {
        "letter": "A",
        "text": "Compilation error"
      },
      {
        "letter": "B",
        "text": "Nothing"
      },
      {
        "letter": "C",
        "text": "A"
      },
      {
        "letter": "D",
        "text": "B"
      }
    ],
    "correct": "D",
    "explanation": "Inner if(false) goes to its else printing B; the outer if(true) surrounds it."
  },
  {
    "title": "Control Flow - Q0638",
    "text": "[Control Flow] Can a switch statement use Strings as case labels (Java 7+)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "No"
      },
      {
        "letter": "B",
        "text": "Yes"
      },
      {
        "letter": "C",
        "text": "Only with integers"
      },
      {
        "letter": "D",
        "text": "Only with enum"
      }
    ],
    "correct": "B",
    "explanation": "Since Java 7, switch supports String expressions."
  },
  {
    "title": "Control Flow - Q0639",
    "text": "[Control Flow] What is printed by the switch with fall-through cases?",
    "code": "int x = 0; switch(x){ case 0: case 1: System.out.print(\"X\"); break; }",
    "options": [
      {
        "letter": "A",
        "text": "0"
      },
      {
        "letter": "B",
        "text": "X"
      },
      {
        "letter": "C",
        "text": "Compilation error"
      },
      {
        "letter": "D",
        "text": "Nothing"
      }
    ],
    "correct": "B",
    "explanation": "Multiple case labels can fall through to same code block, printing X."
  },
  {
    "title": "Control Flow - Q0640",
    "text": "[Control Flow] What is the output of the for loop above?",
    "code": "for (int i = 0; i < 3; i++) System.out.print(i);",
    "options": [
      {
        "letter": "A",
        "text": "0123"
      },
      {
        "letter": "B",
        "text": "01"
      },
      {
        "letter": "C",
        "text": "012"
      },
      {
        "letter": "D",
        "text": "123"
      }
    ],
    "correct": "C",
    "explanation": "Loop prints i values 0,1,2 concatenated."
  },
  {
    "title": "Control Flow - Q0641",
    "text": "[Control Flow] What will be printed?",
    "code": "int x = 10; if (x > 5) System.out.println(\"Hi\"); else System.out.println(\"Bye\");",
    "options": [
      {
        "letter": "A",
        "text": "Nothing"
      },
      {
        "letter": "B",
        "text": "Compilation error"
      },
      {
        "letter": "C",
        "text": "Hi"
      },
      {
        "letter": "D",
        "text": "Bye"
      }
    ],
    "correct": "C",
    "explanation": "Condition true so 'Hi' is printed."
  },
  {
    "title": "Control Flow - Q0642",
    "text": "[Control Flow] What will the switch print?",
    "code": "int day = 2; switch(day) { case 1: System.out.print(\"A\"); break; default: System.out.print(\"B\"); }",
    "options": [
      {
        "letter": "A",
        "text": "B"
      },
      {
        "letter": "B",
        "text": "A"
      },
      {
        "letter": "C",
        "text": "Nothing"
      },
      {
        "letter": "D",
        "text": "Compilation error"
      }
    ],
    "correct": "A",
    "explanation": "No case matches 2, so default executes printing B."
  },
  {
    "title": "Control Flow - Q0643",
    "text": "[Control Flow] How many times will the while loop execute?",
    "code": "int i=0; while(i<1) { System.out.print(i); i++; }",
    "options": [
      {
        "letter": "A",
        "text": "1"
      },
      {
        "letter": "B",
        "text": "2"
      },
      {
        "letter": "C",
        "text": "0"
      },
      {
        "letter": "D",
        "text": "Infinite"
      }
    ],
    "correct": "A",
    "explanation": "Condition true once; loop runs one time."
  },
  {
    "title": "Control Flow - Q0644",
    "text": "[Control Flow] What does a do-while loop guarantee?",
    "code": "int i=5; do { System.out.print(i); i++; } while(i<5);",
    "options": [
      {
        "letter": "A",
        "text": "Body executes at least once"
      },
      {
        "letter": "B",
        "text": "Executes twice"
      },
      {
        "letter": "C",
        "text": "It may not execute at all"
      },
      {
        "letter": "D",
        "text": "Always infinite"
      }
    ],
    "correct": "A",
    "explanation": "do-while checks condition after executing the body, ensuring at least one run."
  },
  {
    "title": "Control Flow - Q0645",
    "text": "[Control Flow] What is printed before break?",
    "code": "for(int i=0;i<5;i++){ if(i==2) break; System.out.print(i);}",
    "options": [
      {
        "letter": "A",
        "text": "0 1"
      },
      {
        "letter": "B",
        "text": "0 1 2"
      },
      {
        "letter": "C",
        "text": "0 1 2 3"
      },
      {
        "letter": "D",
        "text": "Nothing"
      }
    ],
    "correct": "A",
    "explanation": "Loop prints 0 and 1, then breaks when i==2 before printing 2."
  },
  {
    "title": "Control Flow - Q0646",
    "text": "[Control Flow] What is the output using continue?",
    "code": "for(int i=0;i<3;i++){ if(i==1) continue; System.out.print(i);}",
    "options": [
      {
        "letter": "A",
        "text": "1 2"
      },
      {
        "letter": "B",
        "text": "0 2"
      },
      {
        "letter": "C",
        "text": "0 1"
      },
      {
        "letter": "D",
        "text": "0 1 2"
      }
    ],
    "correct": "B",
    "explanation": "When i==1 continue skips remaining body, so 1 isn't printed."
  },
  {
    "title": "Control Flow - Q0647",
    "text": "[Control Flow] Which will be printed? (Be careful with nested if-else)",
    "code": "if(true) if(false) System.out.print(\"A\"); else System.out.print(\"B\");",
    "options": [
      {
        "letter": "A",
        "text": "A"
      },
      {
        "letter": "B",
        "text": "Compilation error"
      },
      {
        "letter": "C",
        "text": "B"
      },
      {
        "letter": "D",
        "text": "Nothing"
      }
    ],
    "correct": "C",
    "explanation": "Inner if(false) goes to its else printing B; the outer if(true) surrounds it."
  },
  {
    "title": "Control Flow - Q0648",
    "text": "[Control Flow] Can a switch statement use Strings as case labels (Java 7+)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Only with integers"
      },
      {
        "letter": "B",
        "text": "Yes"
      },
      {
        "letter": "C",
        "text": "No"
      },
      {
        "letter": "D",
        "text": "Only with enum"
      }
    ],
    "correct": "B",
    "explanation": "Since Java 7, switch supports String expressions."
  },
  {
    "title": "Control Flow - Q0649",
    "text": "[Control Flow] What is printed by the switch with fall-through cases?",
    "code": "int x = 0; switch(x){ case 0: case 1: System.out.print(\"X\"); break; }",
    "options": [
      {
        "letter": "A",
        "text": "Compilation error"
      },
      {
        "letter": "B",
        "text": "0"
      },
      {
        "letter": "C",
        "text": "Nothing"
      },
      {
        "letter": "D",
        "text": "X"
      }
    ],
    "correct": "D",
    "explanation": "Multiple case labels can fall through to same code block, printing X."
  },
  {
    "title": "Control Flow - Q0650",
    "text": "[Control Flow] What is the output of the for loop above?",
    "code": "for (int i = 0; i < 3; i++) System.out.print(i);",
    "options": [
      {
        "letter": "A",
        "text": "0123"
      },
      {
        "letter": "B",
        "text": "123"
      },
      {
        "letter": "C",
        "text": "01"
      },
      {
        "letter": "D",
        "text": "012"
      }
    ],
    "correct": "D",
    "explanation": "Loop prints i values 0,1,2 concatenated."
  },
  {
    "title": "Control Flow - Q0651",
    "text": "[Control Flow] What will be printed?",
    "code": "int x = 10; if (x > 5) System.out.println(\"Hi\"); else System.out.println(\"Bye\");",
    "options": [
      {
        "letter": "A",
        "text": "Hi"
      },
      {
        "letter": "B",
        "text": "Nothing"
      },
      {
        "letter": "C",
        "text": "Bye"
      },
      {
        "letter": "D",
        "text": "Compilation error"
      }
    ],
    "correct": "A",
    "explanation": "Condition true so 'Hi' is printed."
  },
  {
    "title": "Control Flow - Q0652",
    "text": "[Control Flow] What will the switch print?",
    "code": "int day = 2; switch(day) { case 1: System.out.print(\"A\"); break; default: System.out.print(\"B\"); }",
    "options": [
      {
        "letter": "A",
        "text": "A"
      },
      {
        "letter": "B",
        "text": "Compilation error"
      },
      {
        "letter": "C",
        "text": "Nothing"
      },
      {
        "letter": "D",
        "text": "B"
      }
    ],
    "correct": "D",
    "explanation": "No case matches 2, so default executes printing B."
  },
  {
    "title": "Control Flow - Q0653",
    "text": "[Control Flow] How many times will the while loop execute?",
    "code": "int i=0; while(i<1) { System.out.print(i); i++; }",
    "options": [
      {
        "letter": "A",
        "text": "0"
      },
      {
        "letter": "B",
        "text": "2"
      },
      {
        "letter": "C",
        "text": "1"
      },
      {
        "letter": "D",
        "text": "Infinite"
      }
    ],
    "correct": "C",
    "explanation": "Condition true once; loop runs one time."
  },
  {
    "title": "Control Flow - Q0654",
    "text": "[Control Flow] What does a do-while loop guarantee?",
    "code": "int i=5; do { System.out.print(i); i++; } while(i<5);",
    "options": [
      {
        "letter": "A",
        "text": "Body executes at least once"
      },
      {
        "letter": "B",
        "text": "It may not execute at all"
      },
      {
        "letter": "C",
        "text": "Always infinite"
      },
      {
        "letter": "D",
        "text": "Executes twice"
      }
    ],
    "correct": "A",
    "explanation": "do-while checks condition after executing the body, ensuring at least one run."
  },
  {
    "title": "Control Flow - Q0655",
    "text": "[Control Flow] What is printed before break?",
    "code": "for(int i=0;i<5;i++){ if(i==2) break; System.out.print(i);}",
    "options": [
      {
        "letter": "A",
        "text": "Nothing"
      },
      {
        "letter": "B",
        "text": "0 1"
      },
      {
        "letter": "C",
        "text": "0 1 2 3"
      },
      {
        "letter": "D",
        "text": "0 1 2"
      }
    ],
    "correct": "B",
    "explanation": "Loop prints 0 and 1, then breaks when i==2 before printing 2."
  },
  {
    "title": "Control Flow - Q0656",
    "text": "[Control Flow] What is the output using continue?",
    "code": "for(int i=0;i<3;i++){ if(i==1) continue; System.out.print(i);}",
    "options": [
      {
        "letter": "A",
        "text": "0 1 2"
      },
      {
        "letter": "B",
        "text": "0 2"
      },
      {
        "letter": "C",
        "text": "0 1"
      },
      {
        "letter": "D",
        "text": "1 2"
      }
    ],
    "correct": "B",
    "explanation": "When i==1 continue skips remaining body, so 1 isn't printed."
  },
  {
    "title": "Control Flow - Q0657",
    "text": "[Control Flow] Which will be printed? (Be careful with nested if-else)",
    "code": "if(true) if(false) System.out.print(\"A\"); else System.out.print(\"B\");",
    "options": [
      {
        "letter": "A",
        "text": "Nothing"
      },
      {
        "letter": "B",
        "text": "B"
      },
      {
        "letter": "C",
        "text": "Compilation error"
      },
      {
        "letter": "D",
        "text": "A"
      }
    ],
    "correct": "B",
    "explanation": "Inner if(false) goes to its else printing B; the outer if(true) surrounds it."
  },
  {
    "title": "Control Flow - Q0658",
    "text": "[Control Flow] Can a switch statement use Strings as case labels (Java 7+)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Only with enum"
      },
      {
        "letter": "B",
        "text": "No"
      },
      {
        "letter": "C",
        "text": "Yes"
      },
      {
        "letter": "D",
        "text": "Only with integers"
      }
    ],
    "correct": "C",
    "explanation": "Since Java 7, switch supports String expressions."
  },
  {
    "title": "Control Flow - Q0659",
    "text": "[Control Flow] What is printed by the switch with fall-through cases?",
    "code": "int x = 0; switch(x){ case 0: case 1: System.out.print(\"X\"); break; }",
    "options": [
      {
        "letter": "A",
        "text": "Compilation error"
      },
      {
        "letter": "B",
        "text": "X"
      },
      {
        "letter": "C",
        "text": "Nothing"
      },
      {
        "letter": "D",
        "text": "0"
      }
    ],
    "correct": "B",
    "explanation": "Multiple case labels can fall through to same code block, printing X."
  },
  {
    "title": "Control Flow - Q0660",
    "text": "[Control Flow] What is the output of the for loop above?",
    "code": "for (int i = 0; i < 3; i++) System.out.print(i);",
    "options": [
      {
        "letter": "A",
        "text": "123"
      },
      {
        "letter": "B",
        "text": "0123"
      },
      {
        "letter": "C",
        "text": "012"
      },
      {
        "letter": "D",
        "text": "01"
      }
    ],
    "correct": "C",
    "explanation": "Loop prints i values 0,1,2 concatenated."
  },
  {
    "title": "Control Flow - Q0661",
    "text": "[Control Flow] What will be printed?",
    "code": "int x = 10; if (x > 5) System.out.println(\"Hi\"); else System.out.println(\"Bye\");",
    "options": [
      {
        "letter": "A",
        "text": "Hi"
      },
      {
        "letter": "B",
        "text": "Bye"
      },
      {
        "letter": "C",
        "text": "Nothing"
      },
      {
        "letter": "D",
        "text": "Compilation error"
      }
    ],
    "correct": "A",
    "explanation": "Condition true so 'Hi' is printed."
  },
  {
    "title": "Control Flow - Q0662",
    "text": "[Control Flow] What will the switch print?",
    "code": "int day = 2; switch(day) { case 1: System.out.print(\"A\"); break; default: System.out.print(\"B\"); }",
    "options": [
      {
        "letter": "A",
        "text": "Nothing"
      },
      {
        "letter": "B",
        "text": "A"
      },
      {
        "letter": "C",
        "text": "B"
      },
      {
        "letter": "D",
        "text": "Compilation error"
      }
    ],
    "correct": "C",
    "explanation": "No case matches 2, so default executes printing B."
  },
  {
    "title": "Control Flow - Q0663",
    "text": "[Control Flow] How many times will the while loop execute?",
    "code": "int i=0; while(i<1) { System.out.print(i); i++; }",
    "options": [
      {
        "letter": "A",
        "text": "0"
      },
      {
        "letter": "B",
        "text": "1"
      },
      {
        "letter": "C",
        "text": "Infinite"
      },
      {
        "letter": "D",
        "text": "2"
      }
    ],
    "correct": "B",
    "explanation": "Condition true once; loop runs one time."
  },
  {
    "title": "Control Flow - Q0664",
    "text": "[Control Flow] What does a do-while loop guarantee?",
    "code": "int i=5; do { System.out.print(i); i++; } while(i<5);",
    "options": [
      {
        "letter": "A",
        "text": "Executes twice"
      },
      {
        "letter": "B",
        "text": "Body executes at least once"
      },
      {
        "letter": "C",
        "text": "It may not execute at all"
      },
      {
        "letter": "D",
        "text": "Always infinite"
      }
    ],
    "correct": "B",
    "explanation": "do-while checks condition after executing the body, ensuring at least one run."
  },
  {
    "title": "Control Flow - Q0665",
    "text": "[Control Flow] What is printed before break?",
    "code": "for(int i=0;i<5;i++){ if(i==2) break; System.out.print(i);}",
    "options": [
      {
        "letter": "A",
        "text": "Nothing"
      },
      {
        "letter": "B",
        "text": "0 1 2"
      },
      {
        "letter": "C",
        "text": "0 1 2 3"
      },
      {
        "letter": "D",
        "text": "0 1"
      }
    ],
    "correct": "D",
    "explanation": "Loop prints 0 and 1, then breaks when i==2 before printing 2."
  },
  {
    "title": "Control Flow - Q0666",
    "text": "[Control Flow] What is the output using continue?",
    "code": "for(int i=0;i<3;i++){ if(i==1) continue; System.out.print(i);}",
    "options": [
      {
        "letter": "A",
        "text": "0 2"
      },
      {
        "letter": "B",
        "text": "1 2"
      },
      {
        "letter": "C",
        "text": "0 1"
      },
      {
        "letter": "D",
        "text": "0 1 2"
      }
    ],
    "correct": "A",
    "explanation": "When i==1 continue skips remaining body, so 1 isn't printed."
  },
  {
    "title": "Control Flow - Q0667",
    "text": "[Control Flow] Which will be printed? (Be careful with nested if-else)",
    "code": "if(true) if(false) System.out.print(\"A\"); else System.out.print(\"B\");",
    "options": [
      {
        "letter": "A",
        "text": "Compilation error"
      },
      {
        "letter": "B",
        "text": "A"
      },
      {
        "letter": "C",
        "text": "Nothing"
      },
      {
        "letter": "D",
        "text": "B"
      }
    ],
    "correct": "D",
    "explanation": "Inner if(false) goes to its else printing B; the outer if(true) surrounds it."
  },
  {
    "title": "Control Flow - Q0668",
    "text": "[Control Flow] Can a switch statement use Strings as case labels (Java 7+)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Yes"
      },
      {
        "letter": "B",
        "text": "Only with enum"
      },
      {
        "letter": "C",
        "text": "No"
      },
      {
        "letter": "D",
        "text": "Only with integers"
      }
    ],
    "correct": "A",
    "explanation": "Since Java 7, switch supports String expressions."
  },
  {
    "title": "Control Flow - Q0669",
    "text": "[Control Flow] What is printed by the switch with fall-through cases?",
    "code": "int x = 0; switch(x){ case 0: case 1: System.out.print(\"X\"); break; }",
    "options": [
      {
        "letter": "A",
        "text": "0"
      },
      {
        "letter": "B",
        "text": "Compilation error"
      },
      {
        "letter": "C",
        "text": "X"
      },
      {
        "letter": "D",
        "text": "Nothing"
      }
    ],
    "correct": "C",
    "explanation": "Multiple case labels can fall through to same code block, printing X."
  },
  {
    "title": "Control Flow - Q0670",
    "text": "[Control Flow] What is the output of the for loop above?",
    "code": "for (int i = 0; i < 3; i++) System.out.print(i);",
    "options": [
      {
        "letter": "A",
        "text": "012"
      },
      {
        "letter": "B",
        "text": "123"
      },
      {
        "letter": "C",
        "text": "0123"
      },
      {
        "letter": "D",
        "text": "01"
      }
    ],
    "correct": "A",
    "explanation": "Loop prints i values 0,1,2 concatenated."
  },
  {
    "title": "Control Flow - Q0671",
    "text": "[Control Flow] What will be printed?",
    "code": "int x = 10; if (x > 5) System.out.println(\"Hi\"); else System.out.println(\"Bye\");",
    "options": [
      {
        "letter": "A",
        "text": "Hi"
      },
      {
        "letter": "B",
        "text": "Nothing"
      },
      {
        "letter": "C",
        "text": "Compilation error"
      },
      {
        "letter": "D",
        "text": "Bye"
      }
    ],
    "correct": "A",
    "explanation": "Condition true so 'Hi' is printed."
  },
  {
    "title": "Control Flow - Q0672",
    "text": "[Control Flow] What will the switch print?",
    "code": "int day = 2; switch(day) { case 1: System.out.print(\"A\"); break; default: System.out.print(\"B\"); }",
    "options": [
      {
        "letter": "A",
        "text": "A"
      },
      {
        "letter": "B",
        "text": "Nothing"
      },
      {
        "letter": "C",
        "text": "B"
      },
      {
        "letter": "D",
        "text": "Compilation error"
      }
    ],
    "correct": "C",
    "explanation": "No case matches 2, so default executes printing B."
  },
  {
    "title": "Control Flow - Q0673",
    "text": "[Control Flow] How many times will the while loop execute?",
    "code": "int i=0; while(i<1) { System.out.print(i); i++; }",
    "options": [
      {
        "letter": "A",
        "text": "2"
      },
      {
        "letter": "B",
        "text": "1"
      },
      {
        "letter": "C",
        "text": "0"
      },
      {
        "letter": "D",
        "text": "Infinite"
      }
    ],
    "correct": "B",
    "explanation": "Condition true once; loop runs one time."
  },
  {
    "title": "Control Flow - Q0674",
    "text": "[Control Flow] What does a do-while loop guarantee?",
    "code": "int i=5; do { System.out.print(i); i++; } while(i<5);",
    "options": [
      {
        "letter": "A",
        "text": "Executes twice"
      },
      {
        "letter": "B",
        "text": "Always infinite"
      },
      {
        "letter": "C",
        "text": "It may not execute at all"
      },
      {
        "letter": "D",
        "text": "Body executes at least once"
      }
    ],
    "correct": "D",
    "explanation": "do-while checks condition after executing the body, ensuring at least one run."
  },
  {
    "title": "Control Flow - Q0675",
    "text": "[Control Flow] What is printed before break?",
    "code": "for(int i=0;i<5;i++){ if(i==2) break; System.out.print(i);}",
    "options": [
      {
        "letter": "A",
        "text": "Nothing"
      },
      {
        "letter": "B",
        "text": "0 1"
      },
      {
        "letter": "C",
        "text": "0 1 2 3"
      },
      {
        "letter": "D",
        "text": "0 1 2"
      }
    ],
    "correct": "B",
    "explanation": "Loop prints 0 and 1, then breaks when i==2 before printing 2."
  },
  {
    "title": "Control Flow - Q0676",
    "text": "[Control Flow] What is the output using continue?",
    "code": "for(int i=0;i<3;i++){ if(i==1) continue; System.out.print(i);}",
    "options": [
      {
        "letter": "A",
        "text": "1 2"
      },
      {
        "letter": "B",
        "text": "0 1 2"
      },
      {
        "letter": "C",
        "text": "0 2"
      },
      {
        "letter": "D",
        "text": "0 1"
      }
    ],
    "correct": "C",
    "explanation": "When i==1 continue skips remaining body, so 1 isn't printed."
  },
  {
    "title": "Control Flow - Q0677",
    "text": "[Control Flow] Which will be printed? (Be careful with nested if-else)",
    "code": "if(true) if(false) System.out.print(\"A\"); else System.out.print(\"B\");",
    "options": [
      {
        "letter": "A",
        "text": "B"
      },
      {
        "letter": "B",
        "text": "A"
      },
      {
        "letter": "C",
        "text": "Nothing"
      },
      {
        "letter": "D",
        "text": "Compilation error"
      }
    ],
    "correct": "A",
    "explanation": "Inner if(false) goes to its else printing B; the outer if(true) surrounds it."
  },
  {
    "title": "Control Flow - Q0678",
    "text": "[Control Flow] Can a switch statement use Strings as case labels (Java 7+)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Only with enum"
      },
      {
        "letter": "B",
        "text": "Only with integers"
      },
      {
        "letter": "C",
        "text": "No"
      },
      {
        "letter": "D",
        "text": "Yes"
      }
    ],
    "correct": "D",
    "explanation": "Since Java 7, switch supports String expressions."
  },
  {
    "title": "Control Flow - Q0679",
    "text": "[Control Flow] What is printed by the switch with fall-through cases?",
    "code": "int x = 0; switch(x){ case 0: case 1: System.out.print(\"X\"); break; }",
    "options": [
      {
        "letter": "A",
        "text": "X"
      },
      {
        "letter": "B",
        "text": "0"
      },
      {
        "letter": "C",
        "text": "Nothing"
      },
      {
        "letter": "D",
        "text": "Compilation error"
      }
    ],
    "correct": "A",
    "explanation": "Multiple case labels can fall through to same code block, printing X."
  },
  {
    "title": "Control Flow - Q0680",
    "text": "[Control Flow] What is the output of the for loop above?",
    "code": "for (int i = 0; i < 3; i++) System.out.print(i);",
    "options": [
      {
        "letter": "A",
        "text": "012"
      },
      {
        "letter": "B",
        "text": "0123"
      },
      {
        "letter": "C",
        "text": "01"
      },
      {
        "letter": "D",
        "text": "123"
      }
    ],
    "correct": "A",
    "explanation": "Loop prints i values 0,1,2 concatenated."
  },
  {
    "title": "Control Flow - Q0681",
    "text": "[Control Flow] What will be printed?",
    "code": "int x = 10; if (x > 5) System.out.println(\"Hi\"); else System.out.println(\"Bye\");",
    "options": [
      {
        "letter": "A",
        "text": "Bye"
      },
      {
        "letter": "B",
        "text": "Compilation error"
      },
      {
        "letter": "C",
        "text": "Hi"
      },
      {
        "letter": "D",
        "text": "Nothing"
      }
    ],
    "correct": "C",
    "explanation": "Condition true so 'Hi' is printed."
  },
  {
    "title": "Control Flow - Q0682",
    "text": "[Control Flow] What will the switch print?",
    "code": "int day = 2; switch(day) { case 1: System.out.print(\"A\"); break; default: System.out.print(\"B\"); }",
    "options": [
      {
        "letter": "A",
        "text": "B"
      },
      {
        "letter": "B",
        "text": "Compilation error"
      },
      {
        "letter": "C",
        "text": "Nothing"
      },
      {
        "letter": "D",
        "text": "A"
      }
    ],
    "correct": "A",
    "explanation": "No case matches 2, so default executes printing B."
  },
  {
    "title": "Control Flow - Q0683",
    "text": "[Control Flow] How many times will the while loop execute?",
    "code": "int i=0; while(i<1) { System.out.print(i); i++; }",
    "options": [
      {
        "letter": "A",
        "text": "2"
      },
      {
        "letter": "B",
        "text": "0"
      },
      {
        "letter": "C",
        "text": "Infinite"
      },
      {
        "letter": "D",
        "text": "1"
      }
    ],
    "correct": "D",
    "explanation": "Condition true once; loop runs one time."
  },
  {
    "title": "Control Flow - Q0684",
    "text": "[Control Flow] What does a do-while loop guarantee?",
    "code": "int i=5; do { System.out.print(i); i++; } while(i<5);",
    "options": [
      {
        "letter": "A",
        "text": "Executes twice"
      },
      {
        "letter": "B",
        "text": "It may not execute at all"
      },
      {
        "letter": "C",
        "text": "Always infinite"
      },
      {
        "letter": "D",
        "text": "Body executes at least once"
      }
    ],
    "correct": "D",
    "explanation": "do-while checks condition after executing the body, ensuring at least one run."
  },
  {
    "title": "Control Flow - Q0685",
    "text": "[Control Flow] What is printed before break?",
    "code": "for(int i=0;i<5;i++){ if(i==2) break; System.out.print(i);}",
    "options": [
      {
        "letter": "A",
        "text": "Nothing"
      },
      {
        "letter": "B",
        "text": "0 1 2 3"
      },
      {
        "letter": "C",
        "text": "0 1 2"
      },
      {
        "letter": "D",
        "text": "0 1"
      }
    ],
    "correct": "D",
    "explanation": "Loop prints 0 and 1, then breaks when i==2 before printing 2."
  },
  {
    "title": "Control Flow - Q0686",
    "text": "[Control Flow] What is the output using continue?",
    "code": "for(int i=0;i<3;i++){ if(i==1) continue; System.out.print(i);}",
    "options": [
      {
        "letter": "A",
        "text": "0 1 2"
      },
      {
        "letter": "B",
        "text": "1 2"
      },
      {
        "letter": "C",
        "text": "0 2"
      },
      {
        "letter": "D",
        "text": "0 1"
      }
    ],
    "correct": "C",
    "explanation": "When i==1 continue skips remaining body, so 1 isn't printed."
  },
  {
    "title": "Control Flow - Q0687",
    "text": "[Control Flow] Which will be printed? (Be careful with nested if-else)",
    "code": "if(true) if(false) System.out.print(\"A\"); else System.out.print(\"B\");",
    "options": [
      {
        "letter": "A",
        "text": "Nothing"
      },
      {
        "letter": "B",
        "text": "Compilation error"
      },
      {
        "letter": "C",
        "text": "B"
      },
      {
        "letter": "D",
        "text": "A"
      }
    ],
    "correct": "C",
    "explanation": "Inner if(false) goes to its else printing B; the outer if(true) surrounds it."
  },
  {
    "title": "Control Flow - Q0688",
    "text": "[Control Flow] Can a switch statement use Strings as case labels (Java 7+)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Only with enum"
      },
      {
        "letter": "B",
        "text": "Only with integers"
      },
      {
        "letter": "C",
        "text": "Yes"
      },
      {
        "letter": "D",
        "text": "No"
      }
    ],
    "correct": "C",
    "explanation": "Since Java 7, switch supports String expressions."
  },
  {
    "title": "Control Flow - Q0689",
    "text": "[Control Flow] What is printed by the switch with fall-through cases?",
    "code": "int x = 0; switch(x){ case 0: case 1: System.out.print(\"X\"); break; }",
    "options": [
      {
        "letter": "A",
        "text": "Compilation error"
      },
      {
        "letter": "B",
        "text": "0"
      },
      {
        "letter": "C",
        "text": "Nothing"
      },
      {
        "letter": "D",
        "text": "X"
      }
    ],
    "correct": "D",
    "explanation": "Multiple case labels can fall through to same code block, printing X."
  },
  {
    "title": "Control Flow - Q0690",
    "text": "[Control Flow] What is the output of the for loop above?",
    "code": "for (int i = 0; i < 3; i++) System.out.print(i);",
    "options": [
      {
        "letter": "A",
        "text": "012"
      },
      {
        "letter": "B",
        "text": "123"
      },
      {
        "letter": "C",
        "text": "0123"
      },
      {
        "letter": "D",
        "text": "01"
      }
    ],
    "correct": "A",
    "explanation": "Loop prints i values 0,1,2 concatenated."
  },
  {
    "title": "Control Flow - Q0691",
    "text": "[Control Flow] What will be printed?",
    "code": "int x = 10; if (x > 5) System.out.println(\"Hi\"); else System.out.println(\"Bye\");",
    "options": [
      {
        "letter": "A",
        "text": "Nothing"
      },
      {
        "letter": "B",
        "text": "Compilation error"
      },
      {
        "letter": "C",
        "text": "Hi"
      },
      {
        "letter": "D",
        "text": "Bye"
      }
    ],
    "correct": "C",
    "explanation": "Condition true so 'Hi' is printed."
  },
  {
    "title": "Control Flow - Q0692",
    "text": "[Control Flow] What will the switch print?",
    "code": "int day = 2; switch(day) { case 1: System.out.print(\"A\"); break; default: System.out.print(\"B\"); }",
    "options": [
      {
        "letter": "A",
        "text": "A"
      },
      {
        "letter": "B",
        "text": "Nothing"
      },
      {
        "letter": "C",
        "text": "B"
      },
      {
        "letter": "D",
        "text": "Compilation error"
      }
    ],
    "correct": "C",
    "explanation": "No case matches 2, so default executes printing B."
  },
  {
    "title": "Control Flow - Q0693",
    "text": "[Control Flow] How many times will the while loop execute?",
    "code": "int i=0; while(i<1) { System.out.print(i); i++; }",
    "options": [
      {
        "letter": "A",
        "text": "Infinite"
      },
      {
        "letter": "B",
        "text": "0"
      },
      {
        "letter": "C",
        "text": "2"
      },
      {
        "letter": "D",
        "text": "1"
      }
    ],
    "correct": "D",
    "explanation": "Condition true once; loop runs one time."
  },
  {
    "title": "Control Flow - Q0694",
    "text": "[Control Flow] What does a do-while loop guarantee?",
    "code": "int i=5; do { System.out.print(i); i++; } while(i<5);",
    "options": [
      {
        "letter": "A",
        "text": "It may not execute at all"
      },
      {
        "letter": "B",
        "text": "Body executes at least once"
      },
      {
        "letter": "C",
        "text": "Always infinite"
      },
      {
        "letter": "D",
        "text": "Executes twice"
      }
    ],
    "correct": "B",
    "explanation": "do-while checks condition after executing the body, ensuring at least one run."
  },
  {
    "title": "Control Flow - Q0695",
    "text": "[Control Flow] What is printed before break?",
    "code": "for(int i=0;i<5;i++){ if(i==2) break; System.out.print(i);}",
    "options": [
      {
        "letter": "A",
        "text": "Nothing"
      },
      {
        "letter": "B",
        "text": "0 1 2"
      },
      {
        "letter": "C",
        "text": "0 1"
      },
      {
        "letter": "D",
        "text": "0 1 2 3"
      }
    ],
    "correct": "C",
    "explanation": "Loop prints 0 and 1, then breaks when i==2 before printing 2."
  },
  {
    "title": "Control Flow - Q0696",
    "text": "[Control Flow] What is the output using continue?",
    "code": "for(int i=0;i<3;i++){ if(i==1) continue; System.out.print(i);}",
    "options": [
      {
        "letter": "A",
        "text": "0 1"
      },
      {
        "letter": "B",
        "text": "0 1 2"
      },
      {
        "letter": "C",
        "text": "0 2"
      },
      {
        "letter": "D",
        "text": "1 2"
      }
    ],
    "correct": "C",
    "explanation": "When i==1 continue skips remaining body, so 1 isn't printed."
  },
  {
    "title": "Control Flow - Q0697",
    "text": "[Control Flow] Which will be printed? (Be careful with nested if-else)",
    "code": "if(true) if(false) System.out.print(\"A\"); else System.out.print(\"B\");",
    "options": [
      {
        "letter": "A",
        "text": "A"
      },
      {
        "letter": "B",
        "text": "Nothing"
      },
      {
        "letter": "C",
        "text": "B"
      },
      {
        "letter": "D",
        "text": "Compilation error"
      }
    ],
    "correct": "C",
    "explanation": "Inner if(false) goes to its else printing B; the outer if(true) surrounds it."
  },
  {
    "title": "Control Flow - Q0698",
    "text": "[Control Flow] Can a switch statement use Strings as case labels (Java 7+)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Yes"
      },
      {
        "letter": "B",
        "text": "Only with enum"
      },
      {
        "letter": "C",
        "text": "No"
      },
      {
        "letter": "D",
        "text": "Only with integers"
      }
    ],
    "correct": "A",
    "explanation": "Since Java 7, switch supports String expressions."
  },
  {
    "title": "Control Flow - Q0699",
    "text": "[Control Flow] What is printed by the switch with fall-through cases?",
    "code": "int x = 0; switch(x){ case 0: case 1: System.out.print(\"X\"); break; }",
    "options": [
      {
        "letter": "A",
        "text": "Compilation error"
      },
      {
        "letter": "B",
        "text": "X"
      },
      {
        "letter": "C",
        "text": "Nothing"
      },
      {
        "letter": "D",
        "text": "0"
      }
    ],
    "correct": "B",
    "explanation": "Multiple case labels can fall through to same code block, printing X."
  },
  {
    "title": "Control Flow - Q0700",
    "text": "[Control Flow] What is the output of the for loop above?",
    "code": "for (int i = 0; i < 3; i++) System.out.print(i);",
    "options": [
      {
        "letter": "A",
        "text": "012"
      },
      {
        "letter": "B",
        "text": "01"
      },
      {
        "letter": "C",
        "text": "123"
      },
      {
        "letter": "D",
        "text": "0123"
      }
    ],
    "correct": "A",
    "explanation": "Loop prints i values 0,1,2 concatenated."
  },
  {
    "title": "Control Flow - Q0701",
    "text": "[Control Flow] What will be printed?",
    "code": "int x = 10; if (x > 5) System.out.println(\"Hi\"); else System.out.println(\"Bye\");",
    "options": [
      {
        "letter": "A",
        "text": "Bye"
      },
      {
        "letter": "B",
        "text": "Compilation error"
      },
      {
        "letter": "C",
        "text": "Hi"
      },
      {
        "letter": "D",
        "text": "Nothing"
      }
    ],
    "correct": "C",
    "explanation": "Condition true so 'Hi' is printed."
  },
  {
    "title": "Control Flow - Q0702",
    "text": "[Control Flow] What will the switch print?",
    "code": "int day = 2; switch(day) { case 1: System.out.print(\"A\"); break; default: System.out.print(\"B\"); }",
    "options": [
      {
        "letter": "A",
        "text": "Compilation error"
      },
      {
        "letter": "B",
        "text": "Nothing"
      },
      {
        "letter": "C",
        "text": "B"
      },
      {
        "letter": "D",
        "text": "A"
      }
    ],
    "correct": "C",
    "explanation": "No case matches 2, so default executes printing B."
  },
  {
    "title": "Control Flow - Q0703",
    "text": "[Control Flow] How many times will the while loop execute?",
    "code": "int i=0; while(i<1) { System.out.print(i); i++; }",
    "options": [
      {
        "letter": "A",
        "text": "0"
      },
      {
        "letter": "B",
        "text": "Infinite"
      },
      {
        "letter": "C",
        "text": "2"
      },
      {
        "letter": "D",
        "text": "1"
      }
    ],
    "correct": "D",
    "explanation": "Condition true once; loop runs one time."
  },
  {
    "title": "Control Flow - Q0704",
    "text": "[Control Flow] What does a do-while loop guarantee?",
    "code": "int i=5; do { System.out.print(i); i++; } while(i<5);",
    "options": [
      {
        "letter": "A",
        "text": "It may not execute at all"
      },
      {
        "letter": "B",
        "text": "Always infinite"
      },
      {
        "letter": "C",
        "text": "Body executes at least once"
      },
      {
        "letter": "D",
        "text": "Executes twice"
      }
    ],
    "correct": "C",
    "explanation": "do-while checks condition after executing the body, ensuring at least one run."
  },
  {
    "title": "Control Flow - Q0705",
    "text": "[Control Flow] What is printed before break?",
    "code": "for(int i=0;i<5;i++){ if(i==2) break; System.out.print(i);}",
    "options": [
      {
        "letter": "A",
        "text": "0 1 2"
      },
      {
        "letter": "B",
        "text": "Nothing"
      },
      {
        "letter": "C",
        "text": "0 1"
      },
      {
        "letter": "D",
        "text": "0 1 2 3"
      }
    ],
    "correct": "C",
    "explanation": "Loop prints 0 and 1, then breaks when i==2 before printing 2."
  },
  {
    "title": "Control Flow - Q0706",
    "text": "[Control Flow] What is the output using continue?",
    "code": "for(int i=0;i<3;i++){ if(i==1) continue; System.out.print(i);}",
    "options": [
      {
        "letter": "A",
        "text": "1 2"
      },
      {
        "letter": "B",
        "text": "0 1 2"
      },
      {
        "letter": "C",
        "text": "0 2"
      },
      {
        "letter": "D",
        "text": "0 1"
      }
    ],
    "correct": "C",
    "explanation": "When i==1 continue skips remaining body, so 1 isn't printed."
  },
  {
    "title": "Control Flow - Q0707",
    "text": "[Control Flow] Which will be printed? (Be careful with nested if-else)",
    "code": "if(true) if(false) System.out.print(\"A\"); else System.out.print(\"B\");",
    "options": [
      {
        "letter": "A",
        "text": "A"
      },
      {
        "letter": "B",
        "text": "Nothing"
      },
      {
        "letter": "C",
        "text": "B"
      },
      {
        "letter": "D",
        "text": "Compilation error"
      }
    ],
    "correct": "C",
    "explanation": "Inner if(false) goes to its else printing B; the outer if(true) surrounds it."
  },
  {
    "title": "Control Flow - Q0708",
    "text": "[Control Flow] Can a switch statement use Strings as case labels (Java 7+)?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Only with enum"
      },
      {
        "letter": "B",
        "text": "Yes"
      },
      {
        "letter": "C",
        "text": "Only with integers"
      },
      {
        "letter": "D",
        "text": "No"
      }
    ],
    "correct": "B",
    "explanation": "Since Java 7, switch supports String expressions."
  },
  {
    "title": "Control Flow - Q0709",
    "text": "[Control Flow] What is printed by the switch with fall-through cases?",
    "code": "int x = 0; switch(x){ case 0: case 1: System.out.print(\"X\"); break; }",
    "options": [
      {
        "letter": "A",
        "text": "Nothing"
      },
      {
        "letter": "B",
        "text": "0"
      },
      {
        "letter": "C",
        "text": "X"
      },
      {
        "letter": "D",
        "text": "Compilation error"
      }
    ],
    "correct": "C",
    "explanation": "Multiple case labels can fall through to same code block, printing X."
  },
  {
    "title": "Control Flow - Q0710",
    "text": "[Control Flow] What is the output of the for loop above?",
    "code": "for (int i = 0; i < 3; i++) System.out.print(i);",
    "options": [
      {
        "letter": "A",
        "text": "01"
      },
      {
        "letter": "B",
        "text": "0123"
      },
      {
        "letter": "C",
        "text": "012"
      },
      {
        "letter": "D",
        "text": "123"
      }
    ],
    "correct": "C",
    "explanation": "Loop prints i values 0,1,2 concatenated."
  },
  {
    "title": "Control Flow - Q0711",
    "text": "[Control Flow] What will be printed?",
    "code": "int x = 10; if (x > 5) System.out.println(\"Hi\"); else System.out.println(\"Bye\");",
    "options": [
      {
        "letter": "A",
        "text": "Hi"
      },
      {
        "letter": "B",
        "text": "Bye"
      },
      {
        "letter": "C",
        "text": "Nothing"
      },
      {
        "letter": "D",
        "text": "Compilation error"
      }
    ],
    "correct": "A",
    "explanation": "Condition true so 'Hi' is printed."
  },
  {
    "title": "Control Flow - Q0712",
    "text": "[Control Flow] What will the switch print?",
    "code": "int day = 2; switch(day) { case 1: System.out.print(\"A\"); break; default: System.out.print(\"B\"); }",
    "options": [
      {
        "letter": "A",
        "text": "Nothing"
      },
      {
        "letter": "B",
        "text": "A"
      },
      {
        "letter": "C",
        "text": "B"
      },
      {
        "letter": "D",
        "text": "Compilation error"
      }
    ],
    "correct": "C",
    "explanation": "No case matches 2, so default executes printing B."
  },
  {
    "title": "Control Flow - Q0713",
    "text": "[Control Flow] How many times will the while loop execute?",
    "code": "int i=0; while(i<1) { System.out.print(i); i++; }",
    "options": [
      {
        "letter": "A",
        "text": "Infinite"
      },
      {
        "letter": "B",
        "text": "0"
      },
      {
        "letter": "C",
        "text": "2"
      },
      {
        "letter": "D",
        "text": "1"
      }
    ],
    "correct": "D",
    "explanation": "Condition true once; loop runs one time."
  },
  {
    "title": "Control Flow - Q0714",
    "text": "[Control Flow] What does a do-while loop guarantee?",
    "code": "int i=5; do { System.out.print(i); i++; } while(i<5);",
    "options": [
      {
        "letter": "A",
        "text": "Body executes at least once"
      },
      {
        "letter": "B",
        "text": "Always infinite"
      },
      {
        "letter": "C",
        "text": "It may not execute at all"
      },
      {
        "letter": "D",
        "text": "Executes twice"
      }
    ],
    "correct": "A",
    "explanation": "do-while checks condition after executing the body, ensuring at least one run."
  },
  {
    "title": "Control Flow - Q0715",
    "text": "[Control Flow] What is printed before break?",
    "code": "for(int i=0;i<5;i++){ if(i==2) break; System.out.print(i);}",
    "options": [
      {
        "letter": "A",
        "text": "0 1"
      },
      {
        "letter": "B",
        "text": "0 1 2"
      },
      {
        "letter": "C",
        "text": "Nothing"
      },
      {
        "letter": "D",
        "text": "0 1 2 3"
      }
    ],
    "correct": "A",
    "explanation": "Loop prints 0 and 1, then breaks when i==2 before printing 2."
  },
  {
    "title": "Comments - Q0716",
    "text": "[Comments] Which is the single-line comment syntax in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "/* */"
      },
      {
        "letter": "B",
        "text": "<!-- -->"
      },
      {
        "letter": "C",
        "text": "#"
      },
      {
        "letter": "D",
        "text": "//"
      }
    ],
    "correct": "D",
    "explanation": "// starts a single-line comment."
  },
  {
    "title": "Comments - Q0717",
    "text": "[Comments] Which comment style is used for Javadoc?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "// ..."
      },
      {
        "letter": "B",
        "text": "# ..."
      },
      {
        "letter": "C",
        "text": "/** ... */"
      },
      {
        "letter": "D",
        "text": "/* ... */"
      }
    ],
    "correct": "C",
    "explanation": "Javadoc comments start with /** and can be processed to generate docs."
  },
  {
    "title": "Comments - Q0718",
    "text": "[Comments] Which comment can span multiple lines?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "@comment"
      },
      {
        "letter": "B",
        "text": "// ..."
      },
      {
        "letter": "C",
        "text": "/* ... */"
      },
      {
        "letter": "D",
        "text": "' ... '"
      }
    ],
    "correct": "C",
    "explanation": "Block comments use /* ... */ and can span several lines."
  },
  {
    "title": "Comments - Q0719",
    "text": "[Comments] Does the compiler include commented code in the bytecode?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Only Javadoc"
      },
      {
        "letter": "B",
        "text": "No"
      },
      {
        "letter": "C",
        "text": "Only // comments"
      },
      {
        "letter": "D",
        "text": "Yes"
      }
    ],
    "correct": "B",
    "explanation": "Comments are ignored by the compiler and not included in bytecode."
  },
  {
    "title": "Comments - Q0720",
    "text": "[Comments] Which is the single-line comment syntax in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "//"
      },
      {
        "letter": "B",
        "text": "#"
      },
      {
        "letter": "C",
        "text": "/* */"
      },
      {
        "letter": "D",
        "text": "<!-- -->"
      }
    ],
    "correct": "A",
    "explanation": "// starts a single-line comment."
  },
  {
    "title": "Comments - Q0721",
    "text": "[Comments] Which comment style is used for Javadoc?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "# ..."
      },
      {
        "letter": "B",
        "text": "/** ... */"
      },
      {
        "letter": "C",
        "text": "// ..."
      },
      {
        "letter": "D",
        "text": "/* ... */"
      }
    ],
    "correct": "B",
    "explanation": "Javadoc comments start with /** and can be processed to generate docs."
  },
  {
    "title": "Comments - Q0722",
    "text": "[Comments] Which comment can span multiple lines?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "/* ... */"
      },
      {
        "letter": "B",
        "text": "@comment"
      },
      {
        "letter": "C",
        "text": "// ..."
      },
      {
        "letter": "D",
        "text": "' ... '"
      }
    ],
    "correct": "A",
    "explanation": "Block comments use /* ... */ and can span several lines."
  },
  {
    "title": "Comments - Q0723",
    "text": "[Comments] Does the compiler include commented code in the bytecode?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "No"
      },
      {
        "letter": "B",
        "text": "Yes"
      },
      {
        "letter": "C",
        "text": "Only Javadoc"
      },
      {
        "letter": "D",
        "text": "Only // comments"
      }
    ],
    "correct": "A",
    "explanation": "Comments are ignored by the compiler and not included in bytecode."
  },
  {
    "title": "Comments - Q0724",
    "text": "[Comments] Which is the single-line comment syntax in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "//"
      },
      {
        "letter": "B",
        "text": "/* */"
      },
      {
        "letter": "C",
        "text": "<!-- -->"
      },
      {
        "letter": "D",
        "text": "#"
      }
    ],
    "correct": "A",
    "explanation": "// starts a single-line comment."
  },
  {
    "title": "Comments - Q0725",
    "text": "[Comments] Which comment style is used for Javadoc?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "/** ... */"
      },
      {
        "letter": "B",
        "text": "# ..."
      },
      {
        "letter": "C",
        "text": "/* ... */"
      },
      {
        "letter": "D",
        "text": "// ..."
      }
    ],
    "correct": "A",
    "explanation": "Javadoc comments start with /** and can be processed to generate docs."
  },
  {
    "title": "Comments - Q0726",
    "text": "[Comments] Which comment can span multiple lines?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "/* ... */"
      },
      {
        "letter": "B",
        "text": "// ..."
      },
      {
        "letter": "C",
        "text": "@comment"
      },
      {
        "letter": "D",
        "text": "' ... '"
      }
    ],
    "correct": "A",
    "explanation": "Block comments use /* ... */ and can span several lines."
  },
  {
    "title": "Comments - Q0727",
    "text": "[Comments] Does the compiler include commented code in the bytecode?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Only Javadoc"
      },
      {
        "letter": "B",
        "text": "No"
      },
      {
        "letter": "C",
        "text": "Yes"
      },
      {
        "letter": "D",
        "text": "Only // comments"
      }
    ],
    "correct": "B",
    "explanation": "Comments are ignored by the compiler and not included in bytecode."
  },
  {
    "title": "Comments - Q0728",
    "text": "[Comments] Which is the single-line comment syntax in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "#"
      },
      {
        "letter": "B",
        "text": "<!-- -->"
      },
      {
        "letter": "C",
        "text": "//"
      },
      {
        "letter": "D",
        "text": "/* */"
      }
    ],
    "correct": "C",
    "explanation": "// starts a single-line comment."
  },
  {
    "title": "Comments - Q0729",
    "text": "[Comments] Which comment style is used for Javadoc?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "# ..."
      },
      {
        "letter": "B",
        "text": "/** ... */"
      },
      {
        "letter": "C",
        "text": "// ..."
      },
      {
        "letter": "D",
        "text": "/* ... */"
      }
    ],
    "correct": "B",
    "explanation": "Javadoc comments start with /** and can be processed to generate docs."
  },
  {
    "title": "Comments - Q0730",
    "text": "[Comments] Which comment can span multiple lines?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "@comment"
      },
      {
        "letter": "B",
        "text": "// ..."
      },
      {
        "letter": "C",
        "text": "/* ... */"
      },
      {
        "letter": "D",
        "text": "' ... '"
      }
    ],
    "correct": "C",
    "explanation": "Block comments use /* ... */ and can span several lines."
  },
  {
    "title": "Comments - Q0731",
    "text": "[Comments] Does the compiler include commented code in the bytecode?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "No"
      },
      {
        "letter": "B",
        "text": "Only Javadoc"
      },
      {
        "letter": "C",
        "text": "Yes"
      },
      {
        "letter": "D",
        "text": "Only // comments"
      }
    ],
    "correct": "A",
    "explanation": "Comments are ignored by the compiler and not included in bytecode."
  },
  {
    "title": "Comments - Q0732",
    "text": "[Comments] Which is the single-line comment syntax in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "<!-- -->"
      },
      {
        "letter": "B",
        "text": "/* */"
      },
      {
        "letter": "C",
        "text": "#"
      },
      {
        "letter": "D",
        "text": "//"
      }
    ],
    "correct": "D",
    "explanation": "// starts a single-line comment."
  },
  {
    "title": "Comments - Q0733",
    "text": "[Comments] Which comment style is used for Javadoc?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "// ..."
      },
      {
        "letter": "B",
        "text": "/** ... */"
      },
      {
        "letter": "C",
        "text": "/* ... */"
      },
      {
        "letter": "D",
        "text": "# ..."
      }
    ],
    "correct": "B",
    "explanation": "Javadoc comments start with /** and can be processed to generate docs."
  },
  {
    "title": "Comments - Q0734",
    "text": "[Comments] Which comment can span multiple lines?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "' ... '"
      },
      {
        "letter": "B",
        "text": "@comment"
      },
      {
        "letter": "C",
        "text": "// ..."
      },
      {
        "letter": "D",
        "text": "/* ... */"
      }
    ],
    "correct": "D",
    "explanation": "Block comments use /* ... */ and can span several lines."
  },
  {
    "title": "Comments - Q0735",
    "text": "[Comments] Does the compiler include commented code in the bytecode?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Yes"
      },
      {
        "letter": "B",
        "text": "Only // comments"
      },
      {
        "letter": "C",
        "text": "No"
      },
      {
        "letter": "D",
        "text": "Only Javadoc"
      }
    ],
    "correct": "C",
    "explanation": "Comments are ignored by the compiler and not included in bytecode."
  },
  {
    "title": "Comments - Q0736",
    "text": "[Comments] Which is the single-line comment syntax in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "//"
      },
      {
        "letter": "B",
        "text": "<!-- -->"
      },
      {
        "letter": "C",
        "text": "#"
      },
      {
        "letter": "D",
        "text": "/* */"
      }
    ],
    "correct": "A",
    "explanation": "// starts a single-line comment."
  },
  {
    "title": "Comments - Q0737",
    "text": "[Comments] Which comment style is used for Javadoc?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "/** ... */"
      },
      {
        "letter": "B",
        "text": "/* ... */"
      },
      {
        "letter": "C",
        "text": "# ..."
      },
      {
        "letter": "D",
        "text": "// ..."
      }
    ],
    "correct": "A",
    "explanation": "Javadoc comments start with /** and can be processed to generate docs."
  },
  {
    "title": "Comments - Q0738",
    "text": "[Comments] Which comment can span multiple lines?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "// ..."
      },
      {
        "letter": "B",
        "text": "' ... '"
      },
      {
        "letter": "C",
        "text": "@comment"
      },
      {
        "letter": "D",
        "text": "/* ... */"
      }
    ],
    "correct": "D",
    "explanation": "Block comments use /* ... */ and can span several lines."
  },
  {
    "title": "Comments - Q0739",
    "text": "[Comments] Does the compiler include commented code in the bytecode?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Only // comments"
      },
      {
        "letter": "B",
        "text": "No"
      },
      {
        "letter": "C",
        "text": "Yes"
      },
      {
        "letter": "D",
        "text": "Only Javadoc"
      }
    ],
    "correct": "B",
    "explanation": "Comments are ignored by the compiler and not included in bytecode."
  },
  {
    "title": "Comments - Q0740",
    "text": "[Comments] Which is the single-line comment syntax in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "/* */"
      },
      {
        "letter": "B",
        "text": "<!-- -->"
      },
      {
        "letter": "C",
        "text": "#"
      },
      {
        "letter": "D",
        "text": "//"
      }
    ],
    "correct": "D",
    "explanation": "// starts a single-line comment."
  },
  {
    "title": "Comments - Q0741",
    "text": "[Comments] Which comment style is used for Javadoc?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "# ..."
      },
      {
        "letter": "B",
        "text": "/* ... */"
      },
      {
        "letter": "C",
        "text": "/** ... */"
      },
      {
        "letter": "D",
        "text": "// ..."
      }
    ],
    "correct": "C",
    "explanation": "Javadoc comments start with /** and can be processed to generate docs."
  },
  {
    "title": "Comments - Q0742",
    "text": "[Comments] Which comment can span multiple lines?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "// ..."
      },
      {
        "letter": "B",
        "text": "/* ... */"
      },
      {
        "letter": "C",
        "text": "@comment"
      },
      {
        "letter": "D",
        "text": "' ... '"
      }
    ],
    "correct": "B",
    "explanation": "Block comments use /* ... */ and can span several lines."
  },
  {
    "title": "Comments - Q0743",
    "text": "[Comments] Does the compiler include commented code in the bytecode?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Only // comments"
      },
      {
        "letter": "B",
        "text": "No"
      },
      {
        "letter": "C",
        "text": "Yes"
      },
      {
        "letter": "D",
        "text": "Only Javadoc"
      }
    ],
    "correct": "B",
    "explanation": "Comments are ignored by the compiler and not included in bytecode."
  },
  {
    "title": "Comments - Q0744",
    "text": "[Comments] Which is the single-line comment syntax in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "/* */"
      },
      {
        "letter": "B",
        "text": "//"
      },
      {
        "letter": "C",
        "text": "#"
      },
      {
        "letter": "D",
        "text": "<!-- -->"
      }
    ],
    "correct": "B",
    "explanation": "// starts a single-line comment."
  },
  {
    "title": "Comments - Q0745",
    "text": "[Comments] Which comment style is used for Javadoc?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "/** ... */"
      },
      {
        "letter": "B",
        "text": "# ..."
      },
      {
        "letter": "C",
        "text": "/* ... */"
      },
      {
        "letter": "D",
        "text": "// ..."
      }
    ],
    "correct": "A",
    "explanation": "Javadoc comments start with /** and can be processed to generate docs."
  },
  {
    "title": "Comments - Q0746",
    "text": "[Comments] Which comment can span multiple lines?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "' ... '"
      },
      {
        "letter": "B",
        "text": "/* ... */"
      },
      {
        "letter": "C",
        "text": "@comment"
      },
      {
        "letter": "D",
        "text": "// ..."
      }
    ],
    "correct": "B",
    "explanation": "Block comments use /* ... */ and can span several lines."
  },
  {
    "title": "Comments - Q0747",
    "text": "[Comments] Does the compiler include commented code in the bytecode?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Only Javadoc"
      },
      {
        "letter": "B",
        "text": "Yes"
      },
      {
        "letter": "C",
        "text": "Only // comments"
      },
      {
        "letter": "D",
        "text": "No"
      }
    ],
    "correct": "D",
    "explanation": "Comments are ignored by the compiler and not included in bytecode."
  },
  {
    "title": "Comments - Q0748",
    "text": "[Comments] Which is the single-line comment syntax in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "//"
      },
      {
        "letter": "B",
        "text": "/* */"
      },
      {
        "letter": "C",
        "text": "<!-- -->"
      },
      {
        "letter": "D",
        "text": "#"
      }
    ],
    "correct": "A",
    "explanation": "// starts a single-line comment."
  },
  {
    "title": "Comments - Q0749",
    "text": "[Comments] Which comment style is used for Javadoc?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "/* ... */"
      },
      {
        "letter": "B",
        "text": "// ..."
      },
      {
        "letter": "C",
        "text": "/** ... */"
      },
      {
        "letter": "D",
        "text": "# ..."
      }
    ],
    "correct": "C",
    "explanation": "Javadoc comments start with /** and can be processed to generate docs."
  },
  {
    "title": "Comments - Q0750",
    "text": "[Comments] Which comment can span multiple lines?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "/* ... */"
      },
      {
        "letter": "B",
        "text": "@comment"
      },
      {
        "letter": "C",
        "text": "' ... '"
      },
      {
        "letter": "D",
        "text": "// ..."
      }
    ],
    "correct": "A",
    "explanation": "Block comments use /* ... */ and can span several lines."
  },
  {
    "title": "Comments - Q0751",
    "text": "[Comments] Does the compiler include commented code in the bytecode?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Yes"
      },
      {
        "letter": "B",
        "text": "Only Javadoc"
      },
      {
        "letter": "C",
        "text": "No"
      },
      {
        "letter": "D",
        "text": "Only // comments"
      }
    ],
    "correct": "C",
    "explanation": "Comments are ignored by the compiler and not included in bytecode."
  },
  {
    "title": "Comments - Q0752",
    "text": "[Comments] Which is the single-line comment syntax in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "#"
      },
      {
        "letter": "B",
        "text": "/* */"
      },
      {
        "letter": "C",
        "text": "//"
      },
      {
        "letter": "D",
        "text": "<!-- -->"
      }
    ],
    "correct": "C",
    "explanation": "// starts a single-line comment."
  },
  {
    "title": "Comments - Q0753",
    "text": "[Comments] Which comment style is used for Javadoc?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "// ..."
      },
      {
        "letter": "B",
        "text": "/* ... */"
      },
      {
        "letter": "C",
        "text": "/** ... */"
      },
      {
        "letter": "D",
        "text": "# ..."
      }
    ],
    "correct": "C",
    "explanation": "Javadoc comments start with /** and can be processed to generate docs."
  },
  {
    "title": "Comments - Q0754",
    "text": "[Comments] Which comment can span multiple lines?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "' ... '"
      },
      {
        "letter": "B",
        "text": "// ..."
      },
      {
        "letter": "C",
        "text": "@comment"
      },
      {
        "letter": "D",
        "text": "/* ... */"
      }
    ],
    "correct": "D",
    "explanation": "Block comments use /* ... */ and can span several lines."
  },
  {
    "title": "Comments - Q0755",
    "text": "[Comments] Does the compiler include commented code in the bytecode?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "No"
      },
      {
        "letter": "B",
        "text": "Only Javadoc"
      },
      {
        "letter": "C",
        "text": "Only // comments"
      },
      {
        "letter": "D",
        "text": "Yes"
      }
    ],
    "correct": "A",
    "explanation": "Comments are ignored by the compiler and not included in bytecode."
  },
  {
    "title": "Comments - Q0756",
    "text": "[Comments] Which is the single-line comment syntax in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "/* */"
      },
      {
        "letter": "B",
        "text": "<!-- -->"
      },
      {
        "letter": "C",
        "text": "#"
      },
      {
        "letter": "D",
        "text": "//"
      }
    ],
    "correct": "D",
    "explanation": "// starts a single-line comment."
  },
  {
    "title": "Comments - Q0757",
    "text": "[Comments] Which comment style is used for Javadoc?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "// ..."
      },
      {
        "letter": "B",
        "text": "# ..."
      },
      {
        "letter": "C",
        "text": "/** ... */"
      },
      {
        "letter": "D",
        "text": "/* ... */"
      }
    ],
    "correct": "C",
    "explanation": "Javadoc comments start with /** and can be processed to generate docs."
  },
  {
    "title": "Comments - Q0758",
    "text": "[Comments] Which comment can span multiple lines?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "' ... '"
      },
      {
        "letter": "B",
        "text": "@comment"
      },
      {
        "letter": "C",
        "text": "/* ... */"
      },
      {
        "letter": "D",
        "text": "// ..."
      }
    ],
    "correct": "C",
    "explanation": "Block comments use /* ... */ and can span several lines."
  },
  {
    "title": "Comments - Q0759",
    "text": "[Comments] Does the compiler include commented code in the bytecode?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Yes"
      },
      {
        "letter": "B",
        "text": "Only Javadoc"
      },
      {
        "letter": "C",
        "text": "No"
      },
      {
        "letter": "D",
        "text": "Only // comments"
      }
    ],
    "correct": "C",
    "explanation": "Comments are ignored by the compiler and not included in bytecode."
  },
  {
    "title": "Comments - Q0760",
    "text": "[Comments] Which is the single-line comment syntax in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "<!-- -->"
      },
      {
        "letter": "B",
        "text": "/* */"
      },
      {
        "letter": "C",
        "text": "#"
      },
      {
        "letter": "D",
        "text": "//"
      }
    ],
    "correct": "D",
    "explanation": "// starts a single-line comment."
  },
  {
    "title": "Comments - Q0761",
    "text": "[Comments] Which comment style is used for Javadoc?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "# ..."
      },
      {
        "letter": "B",
        "text": "// ..."
      },
      {
        "letter": "C",
        "text": "/* ... */"
      },
      {
        "letter": "D",
        "text": "/** ... */"
      }
    ],
    "correct": "D",
    "explanation": "Javadoc comments start with /** and can be processed to generate docs."
  },
  {
    "title": "Comments - Q0762",
    "text": "[Comments] Which comment can span multiple lines?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "' ... '"
      },
      {
        "letter": "B",
        "text": "// ..."
      },
      {
        "letter": "C",
        "text": "@comment"
      },
      {
        "letter": "D",
        "text": "/* ... */"
      }
    ],
    "correct": "D",
    "explanation": "Block comments use /* ... */ and can span several lines."
  },
  {
    "title": "Comments - Q0763",
    "text": "[Comments] Does the compiler include commented code in the bytecode?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "No"
      },
      {
        "letter": "B",
        "text": "Yes"
      },
      {
        "letter": "C",
        "text": "Only Javadoc"
      },
      {
        "letter": "D",
        "text": "Only // comments"
      }
    ],
    "correct": "A",
    "explanation": "Comments are ignored by the compiler and not included in bytecode."
  },
  {
    "title": "Comments - Q0764",
    "text": "[Comments] Which is the single-line comment syntax in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "//"
      },
      {
        "letter": "B",
        "text": "<!-- -->"
      },
      {
        "letter": "C",
        "text": "/* */"
      },
      {
        "letter": "D",
        "text": "#"
      }
    ],
    "correct": "A",
    "explanation": "// starts a single-line comment."
  },
  {
    "title": "Comments - Q0765",
    "text": "[Comments] Which comment style is used for Javadoc?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "/** ... */"
      },
      {
        "letter": "B",
        "text": "// ..."
      },
      {
        "letter": "C",
        "text": "/* ... */"
      },
      {
        "letter": "D",
        "text": "# ..."
      }
    ],
    "correct": "A",
    "explanation": "Javadoc comments start with /** and can be processed to generate docs."
  },
  {
    "title": "Comments - Q0766",
    "text": "[Comments] Which comment can span multiple lines?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "// ..."
      },
      {
        "letter": "B",
        "text": "/* ... */"
      },
      {
        "letter": "C",
        "text": "@comment"
      },
      {
        "letter": "D",
        "text": "' ... '"
      }
    ],
    "correct": "B",
    "explanation": "Block comments use /* ... */ and can span several lines."
  },
  {
    "title": "Comments - Q0767",
    "text": "[Comments] Does the compiler include commented code in the bytecode?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Yes"
      },
      {
        "letter": "B",
        "text": "Only Javadoc"
      },
      {
        "letter": "C",
        "text": "No"
      },
      {
        "letter": "D",
        "text": "Only // comments"
      }
    ],
    "correct": "C",
    "explanation": "Comments are ignored by the compiler and not included in bytecode."
  },
  {
    "title": "Comments - Q0768",
    "text": "[Comments] Which is the single-line comment syntax in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "/* */"
      },
      {
        "letter": "B",
        "text": "#"
      },
      {
        "letter": "C",
        "text": "<!-- -->"
      },
      {
        "letter": "D",
        "text": "//"
      }
    ],
    "correct": "D",
    "explanation": "// starts a single-line comment."
  },
  {
    "title": "Comments - Q0769",
    "text": "[Comments] Which comment style is used for Javadoc?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "// ..."
      },
      {
        "letter": "B",
        "text": "/* ... */"
      },
      {
        "letter": "C",
        "text": "# ..."
      },
      {
        "letter": "D",
        "text": "/** ... */"
      }
    ],
    "correct": "D",
    "explanation": "Javadoc comments start with /** and can be processed to generate docs."
  },
  {
    "title": "Comments - Q0770",
    "text": "[Comments] Which comment can span multiple lines?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "// ..."
      },
      {
        "letter": "B",
        "text": "@comment"
      },
      {
        "letter": "C",
        "text": "/* ... */"
      },
      {
        "letter": "D",
        "text": "' ... '"
      }
    ],
    "correct": "C",
    "explanation": "Block comments use /* ... */ and can span several lines."
  },
  {
    "title": "Comments - Q0771",
    "text": "[Comments] Does the compiler include commented code in the bytecode?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Only Javadoc"
      },
      {
        "letter": "B",
        "text": "Only // comments"
      },
      {
        "letter": "C",
        "text": "Yes"
      },
      {
        "letter": "D",
        "text": "No"
      }
    ],
    "correct": "D",
    "explanation": "Comments are ignored by the compiler and not included in bytecode."
  },
  {
    "title": "Comments - Q0772",
    "text": "[Comments] Which is the single-line comment syntax in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "/* */"
      },
      {
        "letter": "B",
        "text": "#"
      },
      {
        "letter": "C",
        "text": "<!-- -->"
      },
      {
        "letter": "D",
        "text": "//"
      }
    ],
    "correct": "D",
    "explanation": "// starts a single-line comment."
  },
  {
    "title": "Comments - Q0773",
    "text": "[Comments] Which comment style is used for Javadoc?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "/** ... */"
      },
      {
        "letter": "B",
        "text": "/* ... */"
      },
      {
        "letter": "C",
        "text": "// ..."
      },
      {
        "letter": "D",
        "text": "# ..."
      }
    ],
    "correct": "A",
    "explanation": "Javadoc comments start with /** and can be processed to generate docs."
  },
  {
    "title": "Comments - Q0774",
    "text": "[Comments] Which comment can span multiple lines?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "/* ... */"
      },
      {
        "letter": "B",
        "text": "@comment"
      },
      {
        "letter": "C",
        "text": "' ... '"
      },
      {
        "letter": "D",
        "text": "// ..."
      }
    ],
    "correct": "A",
    "explanation": "Block comments use /* ... */ and can span several lines."
  },
  {
    "title": "Comments - Q0775",
    "text": "[Comments] Does the compiler include commented code in the bytecode?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Only // comments"
      },
      {
        "letter": "B",
        "text": "No"
      },
      {
        "letter": "C",
        "text": "Only Javadoc"
      },
      {
        "letter": "D",
        "text": "Yes"
      }
    ],
    "correct": "B",
    "explanation": "Comments are ignored by the compiler and not included in bytecode."
  },
  {
    "title": "Comments - Q0776",
    "text": "[Comments] Which is the single-line comment syntax in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "/* */"
      },
      {
        "letter": "B",
        "text": "//"
      },
      {
        "letter": "C",
        "text": "<!-- -->"
      },
      {
        "letter": "D",
        "text": "#"
      }
    ],
    "correct": "B",
    "explanation": "// starts a single-line comment."
  },
  {
    "title": "Comments - Q0777",
    "text": "[Comments] Which comment style is used for Javadoc?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "// ..."
      },
      {
        "letter": "B",
        "text": "/* ... */"
      },
      {
        "letter": "C",
        "text": "# ..."
      },
      {
        "letter": "D",
        "text": "/** ... */"
      }
    ],
    "correct": "D",
    "explanation": "Javadoc comments start with /** and can be processed to generate docs."
  },
  {
    "title": "Comments - Q0778",
    "text": "[Comments] Which comment can span multiple lines?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "' ... '"
      },
      {
        "letter": "B",
        "text": "// ..."
      },
      {
        "letter": "C",
        "text": "@comment"
      },
      {
        "letter": "D",
        "text": "/* ... */"
      }
    ],
    "correct": "D",
    "explanation": "Block comments use /* ... */ and can span several lines."
  },
  {
    "title": "Comments - Q0779",
    "text": "[Comments] Does the compiler include commented code in the bytecode?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "No"
      },
      {
        "letter": "B",
        "text": "Only Javadoc"
      },
      {
        "letter": "C",
        "text": "Yes"
      },
      {
        "letter": "D",
        "text": "Only // comments"
      }
    ],
    "correct": "A",
    "explanation": "Comments are ignored by the compiler and not included in bytecode."
  },
  {
    "title": "Comments - Q0780",
    "text": "[Comments] Which is the single-line comment syntax in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "#"
      },
      {
        "letter": "B",
        "text": "//"
      },
      {
        "letter": "C",
        "text": "<!-- -->"
      },
      {
        "letter": "D",
        "text": "/* */"
      }
    ],
    "correct": "B",
    "explanation": "// starts a single-line comment."
  },
  {
    "title": "Comments - Q0781",
    "text": "[Comments] Which comment style is used for Javadoc?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "/** ... */"
      },
      {
        "letter": "B",
        "text": "// ..."
      },
      {
        "letter": "C",
        "text": "/* ... */"
      },
      {
        "letter": "D",
        "text": "# ..."
      }
    ],
    "correct": "A",
    "explanation": "Javadoc comments start with /** and can be processed to generate docs."
  },
  {
    "title": "Comments - Q0782",
    "text": "[Comments] Which comment can span multiple lines?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "' ... '"
      },
      {
        "letter": "B",
        "text": "@comment"
      },
      {
        "letter": "C",
        "text": "/* ... */"
      },
      {
        "letter": "D",
        "text": "// ..."
      }
    ],
    "correct": "C",
    "explanation": "Block comments use /* ... */ and can span several lines."
  },
  {
    "title": "Comments - Q0783",
    "text": "[Comments] Does the compiler include commented code in the bytecode?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Yes"
      },
      {
        "letter": "B",
        "text": "Only Javadoc"
      },
      {
        "letter": "C",
        "text": "Only // comments"
      },
      {
        "letter": "D",
        "text": "No"
      }
    ],
    "correct": "D",
    "explanation": "Comments are ignored by the compiler and not included in bytecode."
  },
  {
    "title": "Comments - Q0784",
    "text": "[Comments] Which is the single-line comment syntax in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "#"
      },
      {
        "letter": "B",
        "text": "//"
      },
      {
        "letter": "C",
        "text": "/* */"
      },
      {
        "letter": "D",
        "text": "<!-- -->"
      }
    ],
    "correct": "B",
    "explanation": "// starts a single-line comment."
  },
  {
    "title": "Comments - Q0785",
    "text": "[Comments] Which comment style is used for Javadoc?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "/* ... */"
      },
      {
        "letter": "B",
        "text": "// ..."
      },
      {
        "letter": "C",
        "text": "# ..."
      },
      {
        "letter": "D",
        "text": "/** ... */"
      }
    ],
    "correct": "D",
    "explanation": "Javadoc comments start with /** and can be processed to generate docs."
  },
  {
    "title": "Comments - Q0786",
    "text": "[Comments] Which comment can span multiple lines?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "/* ... */"
      },
      {
        "letter": "B",
        "text": "// ..."
      },
      {
        "letter": "C",
        "text": "' ... '"
      },
      {
        "letter": "D",
        "text": "@comment"
      }
    ],
    "correct": "A",
    "explanation": "Block comments use /* ... */ and can span several lines."
  },
  {
    "title": "Comments - Q0787",
    "text": "[Comments] Does the compiler include commented code in the bytecode?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Only // comments"
      },
      {
        "letter": "B",
        "text": "Yes"
      },
      {
        "letter": "C",
        "text": "Only Javadoc"
      },
      {
        "letter": "D",
        "text": "No"
      }
    ],
    "correct": "D",
    "explanation": "Comments are ignored by the compiler and not included in bytecode."
  },
  {
    "title": "Comments - Q0788",
    "text": "[Comments] Which is the single-line comment syntax in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "/* */"
      },
      {
        "letter": "B",
        "text": "<!-- -->"
      },
      {
        "letter": "C",
        "text": "//"
      },
      {
        "letter": "D",
        "text": "#"
      }
    ],
    "correct": "C",
    "explanation": "// starts a single-line comment."
  },
  {
    "title": "Comments - Q0789",
    "text": "[Comments] Which comment style is used for Javadoc?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "# ..."
      },
      {
        "letter": "B",
        "text": "/* ... */"
      },
      {
        "letter": "C",
        "text": "/** ... */"
      },
      {
        "letter": "D",
        "text": "// ..."
      }
    ],
    "correct": "C",
    "explanation": "Javadoc comments start with /** and can be processed to generate docs."
  },
  {
    "title": "Comments - Q0790",
    "text": "[Comments] Which comment can span multiple lines?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "// ..."
      },
      {
        "letter": "B",
        "text": "@comment"
      },
      {
        "letter": "C",
        "text": "' ... '"
      },
      {
        "letter": "D",
        "text": "/* ... */"
      }
    ],
    "correct": "D",
    "explanation": "Block comments use /* ... */ and can span several lines."
  },
  {
    "title": "Comments - Q0791",
    "text": "[Comments] Does the compiler include commented code in the bytecode?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "No"
      },
      {
        "letter": "B",
        "text": "Only Javadoc"
      },
      {
        "letter": "C",
        "text": "Yes"
      },
      {
        "letter": "D",
        "text": "Only // comments"
      }
    ],
    "correct": "A",
    "explanation": "Comments are ignored by the compiler and not included in bytecode."
  },
  {
    "title": "Comments - Q0792",
    "text": "[Comments] Which is the single-line comment syntax in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "<!-- -->"
      },
      {
        "letter": "B",
        "text": "/* */"
      },
      {
        "letter": "C",
        "text": "#"
      },
      {
        "letter": "D",
        "text": "//"
      }
    ],
    "correct": "D",
    "explanation": "// starts a single-line comment."
  },
  {
    "title": "Comments - Q0793",
    "text": "[Comments] Which comment style is used for Javadoc?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "/** ... */"
      },
      {
        "letter": "B",
        "text": "# ..."
      },
      {
        "letter": "C",
        "text": "// ..."
      },
      {
        "letter": "D",
        "text": "/* ... */"
      }
    ],
    "correct": "A",
    "explanation": "Javadoc comments start with /** and can be processed to generate docs."
  },
  {
    "title": "Comments - Q0794",
    "text": "[Comments] Which comment can span multiple lines?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "// ..."
      },
      {
        "letter": "B",
        "text": "/* ... */"
      },
      {
        "letter": "C",
        "text": "' ... '"
      },
      {
        "letter": "D",
        "text": "@comment"
      }
    ],
    "correct": "B",
    "explanation": "Block comments use /* ... */ and can span several lines."
  },
  {
    "title": "Comments - Q0795",
    "text": "[Comments] Does the compiler include commented code in the bytecode?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Only Javadoc"
      },
      {
        "letter": "B",
        "text": "Only // comments"
      },
      {
        "letter": "C",
        "text": "No"
      },
      {
        "letter": "D",
        "text": "Yes"
      }
    ],
    "correct": "C",
    "explanation": "Comments are ignored by the compiler and not included in bytecode."
  },
  {
    "title": "Comments - Q0796",
    "text": "[Comments] Which is the single-line comment syntax in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "//"
      },
      {
        "letter": "B",
        "text": "<!-- -->"
      },
      {
        "letter": "C",
        "text": "#"
      },
      {
        "letter": "D",
        "text": "/* */"
      }
    ],
    "correct": "A",
    "explanation": "// starts a single-line comment."
  },
  {
    "title": "Comments - Q0797",
    "text": "[Comments] Which comment style is used for Javadoc?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "# ..."
      },
      {
        "letter": "B",
        "text": "// ..."
      },
      {
        "letter": "C",
        "text": "/* ... */"
      },
      {
        "letter": "D",
        "text": "/** ... */"
      }
    ],
    "correct": "D",
    "explanation": "Javadoc comments start with /** and can be processed to generate docs."
  },
  {
    "title": "Comments - Q0798",
    "text": "[Comments] Which comment can span multiple lines?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "/* ... */"
      },
      {
        "letter": "B",
        "text": "// ..."
      },
      {
        "letter": "C",
        "text": "' ... '"
      },
      {
        "letter": "D",
        "text": "@comment"
      }
    ],
    "correct": "A",
    "explanation": "Block comments use /* ... */ and can span several lines."
  },
  {
    "title": "Comments - Q0799",
    "text": "[Comments] Does the compiler include commented code in the bytecode?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Only Javadoc"
      },
      {
        "letter": "B",
        "text": "No"
      },
      {
        "letter": "C",
        "text": "Only // comments"
      },
      {
        "letter": "D",
        "text": "Yes"
      }
    ],
    "correct": "B",
    "explanation": "Comments are ignored by the compiler and not included in bytecode."
  },
  {
    "title": "Comments - Q0800",
    "text": "[Comments] Which is the single-line comment syntax in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "#"
      },
      {
        "letter": "B",
        "text": "//"
      },
      {
        "letter": "C",
        "text": "<!-- -->"
      },
      {
        "letter": "D",
        "text": "/* */"
      }
    ],
    "correct": "B",
    "explanation": "// starts a single-line comment."
  },
  {
    "title": "Comments - Q0801",
    "text": "[Comments] Which comment style is used for Javadoc?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "/** ... */"
      },
      {
        "letter": "B",
        "text": "# ..."
      },
      {
        "letter": "C",
        "text": "// ..."
      },
      {
        "letter": "D",
        "text": "/* ... */"
      }
    ],
    "correct": "A",
    "explanation": "Javadoc comments start with /** and can be processed to generate docs."
  },
  {
    "title": "Comments - Q0802",
    "text": "[Comments] Which comment can span multiple lines?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "' ... '"
      },
      {
        "letter": "B",
        "text": "// ..."
      },
      {
        "letter": "C",
        "text": "@comment"
      },
      {
        "letter": "D",
        "text": "/* ... */"
      }
    ],
    "correct": "D",
    "explanation": "Block comments use /* ... */ and can span several lines."
  },
  {
    "title": "Comments - Q0803",
    "text": "[Comments] Does the compiler include commented code in the bytecode?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Only Javadoc"
      },
      {
        "letter": "B",
        "text": "Yes"
      },
      {
        "letter": "C",
        "text": "Only // comments"
      },
      {
        "letter": "D",
        "text": "No"
      }
    ],
    "correct": "D",
    "explanation": "Comments are ignored by the compiler and not included in bytecode."
  },
  {
    "title": "Comments - Q0804",
    "text": "[Comments] Which is the single-line comment syntax in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "//"
      },
      {
        "letter": "B",
        "text": "#"
      },
      {
        "letter": "C",
        "text": "<!-- -->"
      },
      {
        "letter": "D",
        "text": "/* */"
      }
    ],
    "correct": "A",
    "explanation": "// starts a single-line comment."
  },
  {
    "title": "Comments - Q0805",
    "text": "[Comments] Which comment style is used for Javadoc?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "// ..."
      },
      {
        "letter": "B",
        "text": "# ..."
      },
      {
        "letter": "C",
        "text": "/** ... */"
      },
      {
        "letter": "D",
        "text": "/* ... */"
      }
    ],
    "correct": "C",
    "explanation": "Javadoc comments start with /** and can be processed to generate docs."
  },
  {
    "title": "Comments - Q0806",
    "text": "[Comments] Which comment can span multiple lines?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "// ..."
      },
      {
        "letter": "B",
        "text": "@comment"
      },
      {
        "letter": "C",
        "text": "' ... '"
      },
      {
        "letter": "D",
        "text": "/* ... */"
      }
    ],
    "correct": "D",
    "explanation": "Block comments use /* ... */ and can span several lines."
  },
  {
    "title": "Comments - Q0807",
    "text": "[Comments] Does the compiler include commented code in the bytecode?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Yes"
      },
      {
        "letter": "B",
        "text": "Only Javadoc"
      },
      {
        "letter": "C",
        "text": "Only // comments"
      },
      {
        "letter": "D",
        "text": "No"
      }
    ],
    "correct": "D",
    "explanation": "Comments are ignored by the compiler and not included in bytecode."
  },
  {
    "title": "Comments - Q0808",
    "text": "[Comments] Which is the single-line comment syntax in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "//"
      },
      {
        "letter": "B",
        "text": "/* */"
      },
      {
        "letter": "C",
        "text": "<!-- -->"
      },
      {
        "letter": "D",
        "text": "#"
      }
    ],
    "correct": "A",
    "explanation": "// starts a single-line comment."
  },
  {
    "title": "Comments - Q0809",
    "text": "[Comments] Which comment style is used for Javadoc?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "/* ... */"
      },
      {
        "letter": "B",
        "text": "// ..."
      },
      {
        "letter": "C",
        "text": "/** ... */"
      },
      {
        "letter": "D",
        "text": "# ..."
      }
    ],
    "correct": "C",
    "explanation": "Javadoc comments start with /** and can be processed to generate docs."
  },
  {
    "title": "Comments - Q0810",
    "text": "[Comments] Which comment can span multiple lines?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "/* ... */"
      },
      {
        "letter": "B",
        "text": "@comment"
      },
      {
        "letter": "C",
        "text": "' ... '"
      },
      {
        "letter": "D",
        "text": "// ..."
      }
    ],
    "correct": "A",
    "explanation": "Block comments use /* ... */ and can span several lines."
  },
  {
    "title": "Comments - Q0811",
    "text": "[Comments] Does the compiler include commented code in the bytecode?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Only // comments"
      },
      {
        "letter": "B",
        "text": "Only Javadoc"
      },
      {
        "letter": "C",
        "text": "No"
      },
      {
        "letter": "D",
        "text": "Yes"
      }
    ],
    "correct": "C",
    "explanation": "Comments are ignored by the compiler and not included in bytecode."
  },
  {
    "title": "Comments - Q0812",
    "text": "[Comments] Which is the single-line comment syntax in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "/* */"
      },
      {
        "letter": "B",
        "text": "#"
      },
      {
        "letter": "C",
        "text": "<!-- -->"
      },
      {
        "letter": "D",
        "text": "//"
      }
    ],
    "correct": "D",
    "explanation": "// starts a single-line comment."
  },
  {
    "title": "Comments - Q0813",
    "text": "[Comments] Which comment style is used for Javadoc?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "/* ... */"
      },
      {
        "letter": "B",
        "text": "/** ... */"
      },
      {
        "letter": "C",
        "text": "// ..."
      },
      {
        "letter": "D",
        "text": "# ..."
      }
    ],
    "correct": "B",
    "explanation": "Javadoc comments start with /** and can be processed to generate docs."
  },
  {
    "title": "Comments - Q0814",
    "text": "[Comments] Which comment can span multiple lines?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "' ... '"
      },
      {
        "letter": "B",
        "text": "@comment"
      },
      {
        "letter": "C",
        "text": "// ..."
      },
      {
        "letter": "D",
        "text": "/* ... */"
      }
    ],
    "correct": "D",
    "explanation": "Block comments use /* ... */ and can span several lines."
  },
  {
    "title": "Comments - Q0815",
    "text": "[Comments] Does the compiler include commented code in the bytecode?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Yes"
      },
      {
        "letter": "B",
        "text": "Only Javadoc"
      },
      {
        "letter": "C",
        "text": "No"
      },
      {
        "letter": "D",
        "text": "Only // comments"
      }
    ],
    "correct": "C",
    "explanation": "Comments are ignored by the compiler and not included in bytecode."
  },
  {
    "title": "Comments - Q0816",
    "text": "[Comments] Which is the single-line comment syntax in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "#"
      },
      {
        "letter": "B",
        "text": "<!-- -->"
      },
      {
        "letter": "C",
        "text": "/* */"
      },
      {
        "letter": "D",
        "text": "//"
      }
    ],
    "correct": "D",
    "explanation": "// starts a single-line comment."
  },
  {
    "title": "Comments - Q0817",
    "text": "[Comments] Which comment style is used for Javadoc?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "# ..."
      },
      {
        "letter": "B",
        "text": "/* ... */"
      },
      {
        "letter": "C",
        "text": "/** ... */"
      },
      {
        "letter": "D",
        "text": "// ..."
      }
    ],
    "correct": "C",
    "explanation": "Javadoc comments start with /** and can be processed to generate docs."
  },
  {
    "title": "Comments - Q0818",
    "text": "[Comments] Which comment can span multiple lines?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "@comment"
      },
      {
        "letter": "B",
        "text": "' ... '"
      },
      {
        "letter": "C",
        "text": "/* ... */"
      },
      {
        "letter": "D",
        "text": "// ..."
      }
    ],
    "correct": "C",
    "explanation": "Block comments use /* ... */ and can span several lines."
  },
  {
    "title": "Comments - Q0819",
    "text": "[Comments] Does the compiler include commented code in the bytecode?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Only // comments"
      },
      {
        "letter": "B",
        "text": "Yes"
      },
      {
        "letter": "C",
        "text": "Only Javadoc"
      },
      {
        "letter": "D",
        "text": "No"
      }
    ],
    "correct": "D",
    "explanation": "Comments are ignored by the compiler and not included in bytecode."
  },
  {
    "title": "Comments - Q0820",
    "text": "[Comments] Which is the single-line comment syntax in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "<!-- -->"
      },
      {
        "letter": "B",
        "text": "/* */"
      },
      {
        "letter": "C",
        "text": "#"
      },
      {
        "letter": "D",
        "text": "//"
      }
    ],
    "correct": "D",
    "explanation": "// starts a single-line comment."
  },
  {
    "title": "Comments - Q0821",
    "text": "[Comments] Which comment style is used for Javadoc?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "# ..."
      },
      {
        "letter": "B",
        "text": "// ..."
      },
      {
        "letter": "C",
        "text": "/* ... */"
      },
      {
        "letter": "D",
        "text": "/** ... */"
      }
    ],
    "correct": "D",
    "explanation": "Javadoc comments start with /** and can be processed to generate docs."
  },
  {
    "title": "Comments - Q0822",
    "text": "[Comments] Which comment can span multiple lines?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "' ... '"
      },
      {
        "letter": "B",
        "text": "@comment"
      },
      {
        "letter": "C",
        "text": "// ..."
      },
      {
        "letter": "D",
        "text": "/* ... */"
      }
    ],
    "correct": "D",
    "explanation": "Block comments use /* ... */ and can span several lines."
  },
  {
    "title": "Comments - Q0823",
    "text": "[Comments] Does the compiler include commented code in the bytecode?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Yes"
      },
      {
        "letter": "B",
        "text": "No"
      },
      {
        "letter": "C",
        "text": "Only // comments"
      },
      {
        "letter": "D",
        "text": "Only Javadoc"
      }
    ],
    "correct": "B",
    "explanation": "Comments are ignored by the compiler and not included in bytecode."
  },
  {
    "title": "Comments - Q0824",
    "text": "[Comments] Which is the single-line comment syntax in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "<!-- -->"
      },
      {
        "letter": "B",
        "text": "//"
      },
      {
        "letter": "C",
        "text": "#"
      },
      {
        "letter": "D",
        "text": "/* */"
      }
    ],
    "correct": "B",
    "explanation": "// starts a single-line comment."
  },
  {
    "title": "Comments - Q0825",
    "text": "[Comments] Which comment style is used for Javadoc?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "# ..."
      },
      {
        "letter": "B",
        "text": "// ..."
      },
      {
        "letter": "C",
        "text": "/** ... */"
      },
      {
        "letter": "D",
        "text": "/* ... */"
      }
    ],
    "correct": "C",
    "explanation": "Javadoc comments start with /** and can be processed to generate docs."
  },
  {
    "title": "Comments - Q0826",
    "text": "[Comments] Which comment can span multiple lines?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "// ..."
      },
      {
        "letter": "B",
        "text": "' ... '"
      },
      {
        "letter": "C",
        "text": "/* ... */"
      },
      {
        "letter": "D",
        "text": "@comment"
      }
    ],
    "correct": "C",
    "explanation": "Block comments use /* ... */ and can span several lines."
  },
  {
    "title": "Comments - Q0827",
    "text": "[Comments] Does the compiler include commented code in the bytecode?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "No"
      },
      {
        "letter": "B",
        "text": "Only Javadoc"
      },
      {
        "letter": "C",
        "text": "Yes"
      },
      {
        "letter": "D",
        "text": "Only // comments"
      }
    ],
    "correct": "A",
    "explanation": "Comments are ignored by the compiler and not included in bytecode."
  },
  {
    "title": "Comments - Q0828",
    "text": "[Comments] Which is the single-line comment syntax in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "<!-- -->"
      },
      {
        "letter": "B",
        "text": "#"
      },
      {
        "letter": "C",
        "text": "/* */"
      },
      {
        "letter": "D",
        "text": "//"
      }
    ],
    "correct": "D",
    "explanation": "// starts a single-line comment."
  },
  {
    "title": "Comments - Q0829",
    "text": "[Comments] Which comment style is used for Javadoc?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "/** ... */"
      },
      {
        "letter": "B",
        "text": "/* ... */"
      },
      {
        "letter": "C",
        "text": "# ..."
      },
      {
        "letter": "D",
        "text": "// ..."
      }
    ],
    "correct": "A",
    "explanation": "Javadoc comments start with /** and can be processed to generate docs."
  },
  {
    "title": "Comments - Q0830",
    "text": "[Comments] Which comment can span multiple lines?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "@comment"
      },
      {
        "letter": "B",
        "text": "' ... '"
      },
      {
        "letter": "C",
        "text": "/* ... */"
      },
      {
        "letter": "D",
        "text": "// ..."
      }
    ],
    "correct": "C",
    "explanation": "Block comments use /* ... */ and can span several lines."
  },
  {
    "title": "Comments - Q0831",
    "text": "[Comments] Does the compiler include commented code in the bytecode?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Yes"
      },
      {
        "letter": "B",
        "text": "Only // comments"
      },
      {
        "letter": "C",
        "text": "Only Javadoc"
      },
      {
        "letter": "D",
        "text": "No"
      }
    ],
    "correct": "D",
    "explanation": "Comments are ignored by the compiler and not included in bytecode."
  },
  {
    "title": "Comments - Q0832",
    "text": "[Comments] Which is the single-line comment syntax in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "<!-- -->"
      },
      {
        "letter": "B",
        "text": "//"
      },
      {
        "letter": "C",
        "text": "#"
      },
      {
        "letter": "D",
        "text": "/* */"
      }
    ],
    "correct": "B",
    "explanation": "// starts a single-line comment."
  },
  {
    "title": "Comments - Q0833",
    "text": "[Comments] Which comment style is used for Javadoc?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "// ..."
      },
      {
        "letter": "B",
        "text": "/** ... */"
      },
      {
        "letter": "C",
        "text": "# ..."
      },
      {
        "letter": "D",
        "text": "/* ... */"
      }
    ],
    "correct": "B",
    "explanation": "Javadoc comments start with /** and can be processed to generate docs."
  },
  {
    "title": "Comments - Q0834",
    "text": "[Comments] Which comment can span multiple lines?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "' ... '"
      },
      {
        "letter": "B",
        "text": "/* ... */"
      },
      {
        "letter": "C",
        "text": "// ..."
      },
      {
        "letter": "D",
        "text": "@comment"
      }
    ],
    "correct": "B",
    "explanation": "Block comments use /* ... */ and can span several lines."
  },
  {
    "title": "Comments - Q0835",
    "text": "[Comments] Does the compiler include commented code in the bytecode?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Yes"
      },
      {
        "letter": "B",
        "text": "Only // comments"
      },
      {
        "letter": "C",
        "text": "Only Javadoc"
      },
      {
        "letter": "D",
        "text": "No"
      }
    ],
    "correct": "D",
    "explanation": "Comments are ignored by the compiler and not included in bytecode."
  },
  {
    "title": "Comments - Q0836",
    "text": "[Comments] Which is the single-line comment syntax in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "/* */"
      },
      {
        "letter": "B",
        "text": "//"
      },
      {
        "letter": "C",
        "text": "#"
      },
      {
        "letter": "D",
        "text": "<!-- -->"
      }
    ],
    "correct": "B",
    "explanation": "// starts a single-line comment."
  },
  {
    "title": "Comments - Q0837",
    "text": "[Comments] Which comment style is used for Javadoc?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "// ..."
      },
      {
        "letter": "B",
        "text": "# ..."
      },
      {
        "letter": "C",
        "text": "/** ... */"
      },
      {
        "letter": "D",
        "text": "/* ... */"
      }
    ],
    "correct": "C",
    "explanation": "Javadoc comments start with /** and can be processed to generate docs."
  },
  {
    "title": "Comments - Q0838",
    "text": "[Comments] Which comment can span multiple lines?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "/* ... */"
      },
      {
        "letter": "B",
        "text": "// ..."
      },
      {
        "letter": "C",
        "text": "@comment"
      },
      {
        "letter": "D",
        "text": "' ... '"
      }
    ],
    "correct": "A",
    "explanation": "Block comments use /* ... */ and can span several lines."
  },
  {
    "title": "Comments - Q0839",
    "text": "[Comments] Does the compiler include commented code in the bytecode?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Only // comments"
      },
      {
        "letter": "B",
        "text": "No"
      },
      {
        "letter": "C",
        "text": "Yes"
      },
      {
        "letter": "D",
        "text": "Only Javadoc"
      }
    ],
    "correct": "B",
    "explanation": "Comments are ignored by the compiler and not included in bytecode."
  },
  {
    "title": "Comments - Q0840",
    "text": "[Comments] Which is the single-line comment syntax in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "/* */"
      },
      {
        "letter": "B",
        "text": "//"
      },
      {
        "letter": "C",
        "text": "#"
      },
      {
        "letter": "D",
        "text": "<!-- -->"
      }
    ],
    "correct": "B",
    "explanation": "// starts a single-line comment."
  },
  {
    "title": "Comments - Q0841",
    "text": "[Comments] Which comment style is used for Javadoc?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "// ..."
      },
      {
        "letter": "B",
        "text": "/* ... */"
      },
      {
        "letter": "C",
        "text": "/** ... */"
      },
      {
        "letter": "D",
        "text": "# ..."
      }
    ],
    "correct": "C",
    "explanation": "Javadoc comments start with /** and can be processed to generate docs."
  },
  {
    "title": "Comments - Q0842",
    "text": "[Comments] Which comment can span multiple lines?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "' ... '"
      },
      {
        "letter": "B",
        "text": "/* ... */"
      },
      {
        "letter": "C",
        "text": "@comment"
      },
      {
        "letter": "D",
        "text": "// ..."
      }
    ],
    "correct": "B",
    "explanation": "Block comments use /* ... */ and can span several lines."
  },
  {
    "title": "Comments - Q0843",
    "text": "[Comments] Does the compiler include commented code in the bytecode?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "No"
      },
      {
        "letter": "B",
        "text": "Yes"
      },
      {
        "letter": "C",
        "text": "Only Javadoc"
      },
      {
        "letter": "D",
        "text": "Only // comments"
      }
    ],
    "correct": "A",
    "explanation": "Comments are ignored by the compiler and not included in bytecode."
  },
  {
    "title": "Comments - Q0844",
    "text": "[Comments] Which is the single-line comment syntax in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "//"
      },
      {
        "letter": "B",
        "text": "/* */"
      },
      {
        "letter": "C",
        "text": "<!-- -->"
      },
      {
        "letter": "D",
        "text": "#"
      }
    ],
    "correct": "A",
    "explanation": "// starts a single-line comment."
  },
  {
    "title": "Comments - Q0845",
    "text": "[Comments] Which comment style is used for Javadoc?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "# ..."
      },
      {
        "letter": "B",
        "text": "/* ... */"
      },
      {
        "letter": "C",
        "text": "// ..."
      },
      {
        "letter": "D",
        "text": "/** ... */"
      }
    ],
    "correct": "D",
    "explanation": "Javadoc comments start with /** and can be processed to generate docs."
  },
  {
    "title": "Comments - Q0846",
    "text": "[Comments] Which comment can span multiple lines?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "/* ... */"
      },
      {
        "letter": "B",
        "text": "@comment"
      },
      {
        "letter": "C",
        "text": "// ..."
      },
      {
        "letter": "D",
        "text": "' ... '"
      }
    ],
    "correct": "A",
    "explanation": "Block comments use /* ... */ and can span several lines."
  },
  {
    "title": "Comments - Q0847",
    "text": "[Comments] Does the compiler include commented code in the bytecode?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Only // comments"
      },
      {
        "letter": "B",
        "text": "Only Javadoc"
      },
      {
        "letter": "C",
        "text": "No"
      },
      {
        "letter": "D",
        "text": "Yes"
      }
    ],
    "correct": "C",
    "explanation": "Comments are ignored by the compiler and not included in bytecode."
  },
  {
    "title": "Comments - Q0848",
    "text": "[Comments] Which is the single-line comment syntax in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "<!-- -->"
      },
      {
        "letter": "B",
        "text": "#"
      },
      {
        "letter": "C",
        "text": "/* */"
      },
      {
        "letter": "D",
        "text": "//"
      }
    ],
    "correct": "D",
    "explanation": "// starts a single-line comment."
  },
  {
    "title": "Comments - Q0849",
    "text": "[Comments] Which comment style is used for Javadoc?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "/* ... */"
      },
      {
        "letter": "B",
        "text": "# ..."
      },
      {
        "letter": "C",
        "text": "// ..."
      },
      {
        "letter": "D",
        "text": "/** ... */"
      }
    ],
    "correct": "D",
    "explanation": "Javadoc comments start with /** and can be processed to generate docs."
  },
  {
    "title": "Comments - Q0850",
    "text": "[Comments] Which comment can span multiple lines?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "/* ... */"
      },
      {
        "letter": "B",
        "text": "// ..."
      },
      {
        "letter": "C",
        "text": "' ... '"
      },
      {
        "letter": "D",
        "text": "@comment"
      }
    ],
    "correct": "A",
    "explanation": "Block comments use /* ... */ and can span several lines."
  },
  {
    "title": "Comments - Q0851",
    "text": "[Comments] Does the compiler include commented code in the bytecode?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Only // comments"
      },
      {
        "letter": "B",
        "text": "Only Javadoc"
      },
      {
        "letter": "C",
        "text": "Yes"
      },
      {
        "letter": "D",
        "text": "No"
      }
    ],
    "correct": "D",
    "explanation": "Comments are ignored by the compiler and not included in bytecode."
  },
  {
    "title": "Comments - Q0852",
    "text": "[Comments] Which is the single-line comment syntax in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "#"
      },
      {
        "letter": "B",
        "text": "//"
      },
      {
        "letter": "C",
        "text": "<!-- -->"
      },
      {
        "letter": "D",
        "text": "/* */"
      }
    ],
    "correct": "B",
    "explanation": "// starts a single-line comment."
  },
  {
    "title": "Comments - Q0853",
    "text": "[Comments] Which comment style is used for Javadoc?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "# ..."
      },
      {
        "letter": "B",
        "text": "/** ... */"
      },
      {
        "letter": "C",
        "text": "// ..."
      },
      {
        "letter": "D",
        "text": "/* ... */"
      }
    ],
    "correct": "B",
    "explanation": "Javadoc comments start with /** and can be processed to generate docs."
  },
  {
    "title": "Comments - Q0854",
    "text": "[Comments] Which comment can span multiple lines?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "// ..."
      },
      {
        "letter": "B",
        "text": "' ... '"
      },
      {
        "letter": "C",
        "text": "/* ... */"
      },
      {
        "letter": "D",
        "text": "@comment"
      }
    ],
    "correct": "C",
    "explanation": "Block comments use /* ... */ and can span several lines."
  },
  {
    "title": "Comments - Q0855",
    "text": "[Comments] Does the compiler include commented code in the bytecode?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "Only // comments"
      },
      {
        "letter": "B",
        "text": "Yes"
      },
      {
        "letter": "C",
        "text": "Only Javadoc"
      },
      {
        "letter": "D",
        "text": "No"
      }
    ],
    "correct": "D",
    "explanation": "Comments are ignored by the compiler and not included in bytecode."
  },
  {
    "title": "Comments - Q0856",
    "text": "[Comments] Which is the single-line comment syntax in Java?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "/* */"
      },
      {
        "letter": "B",
        "text": "//"
      },
      {
        "letter": "C",
        "text": "#"
      },
      {
        "letter": "D",
        "text": "<!-- -->"
      }
    ],
    "correct": "B",
    "explanation": "// starts a single-line comment."
  },
  {
    "title": "Comments - Q0857",
    "text": "[Comments] Which comment style is used for Javadoc?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "/* ... */"
      },
      {
        "letter": "B",
        "text": "# ..."
      },
      {
        "letter": "C",
        "text": "/** ... */"
      },
      {
        "letter": "D",
        "text": "// ..."
      }
    ],
    "correct": "C",
    "explanation": "Javadoc comments start with /** and can be processed to generate docs."
  },
  {
    "title": "Comments - Q0858",
    "text": "[Comments] Which comment can span multiple lines?",
    "code": "",
    "options": [
      {
        "letter": "A",
        "text": "/* ... */"
      },
      {
        "letter": "B",
        "text": "// ..."
      },
      {
        "letter": "C",
        "text": "@comment"
      },
      {
        "letter": "D",
        "text": "' ... '"
      }
    ],
    "correct": "A",
    "explanation": "Block comments use /* ... */ and can span several lines."
  },
  {
    "title": "User Input - Q0859",
    "text": "[User Input] Is it necessary to close a Scanner wrapping System.in?",
    "code": "Scanner sc = new Scanner(System.in); sc.close();",
    "options": [
      {
        "letter": "A",
        "text": "Never allowed"
      },
      {
        "letter": "B",
        "text": "Closing scanner flushes input"
      },
      {
        "letter": "C",
        "text": "Not recommended to close System.in scanner if you need input later"
      },
      {
        "letter": "D",
        "text": "Always required"
      }
    ],
    "correct": "C",
    "explanation": "Closing Scanner closes the underlying stream (System.in), which may not be desired."
  },
  {
    "title": "User Input - Q0860",
    "text": "[User Input] Which class is commonly used to read console input in Java?",
    "code": "import java.util.Scanner;\nScanner sc = new Scanner(System.in);\nint n = sc.nextInt();",
    "options": [
      {
        "letter": "A",
        "text": "BufferedReader"
      },
      {
        "letter": "B",
        "text": "Console"
      },
      {
        "letter": "C",
        "text": "Scanner"
      },
      {
        "letter": "D",
        "text": "DataInputStream"
      }
    ],
    "correct": "C",
    "explanation": "Scanner is commonly used for simple console input (java.util.Scanner)."
  },
  {
    "title": "User Input - Q0861",
    "text": "[User Input] How are command-line arguments accessed in Java?",
    "code": "public static void main(String[] args) { System.out.println(args.length); }",
    "options": [
      {
        "letter": "A",
        "text": "Through the String[] args parameter of main"
      },
      {
        "letter": "B",
        "text": "They are not accessible"
      },
      {
        "letter": "C",
        "text": "Using Scanner by default"
      },
      {
        "letter": "D",
        "text": "System.console() only"
      }
    ],
    "correct": "A",
    "explanation": "main receives command-line arguments via String[] args."
  },
  {
    "title": "User Input - Q0862",
    "text": "[User Input] Which Scanner method reads an entire line including spaces?",
    "code": "Scanner sc = new Scanner(System.in); String s = sc.nextLine();",
    "options": [
      {
        "letter": "A",
        "text": "readLine()"
      },
      {
        "letter": "B",
        "text": "next()"
      },
      {
        "letter": "C",
        "text": "nextInt()"
      },
      {
        "letter": "D",
        "text": "nextLine()"
      }
    ],
    "correct": "D",
    "explanation": "nextLine() reads until end-of-line, including spaces."
  },
  {
    "title": "User Input - Q0863",
    "text": "[User Input] What happens if user inputs a non-integer when calling nextInt()?",
    "code": "Scanner sc = new Scanner(System.in); int x = sc.nextInt();",
    "options": [
      {
        "letter": "A",
        "text": "InputMismatchException at runtime"
      },
      {
        "letter": "B",
        "text": "Compilation error"
      },
      {
        "letter": "C",
        "text": "It returns 0"
      },
      {
        "letter": "D",
        "text": "It blocks forever"
      }
    ],
    "correct": "A",
    "explanation": "nextInt() throws InputMismatchException if the token isn't parseable as int."
  },
  {
    "title": "User Input - Q0864",
    "text": "[User Input] Is it necessary to close a Scanner wrapping System.in?",
    "code": "Scanner sc = new Scanner(System.in); sc.close();",
    "options": [
      {
        "letter": "A",
        "text": "Never allowed"
      },
      {
        "letter": "B",
        "text": "Always required"
      },
      {
        "letter": "C",
        "text": "Closing scanner flushes input"
      },
      {
        "letter": "D",
        "text": "Not recommended to close System.in scanner if you need input later"
      }
    ],
    "correct": "D",
    "explanation": "Closing Scanner closes the underlying stream (System.in), which may not be desired."
  },
  {
    "title": "User Input - Q0865",
    "text": "[User Input] Which class is commonly used to read console input in Java?",
    "code": "import java.util.Scanner;\nScanner sc = new Scanner(System.in);\nint n = sc.nextInt();",
    "options": [
      {
        "letter": "A",
        "text": "Scanner"
      },
      {
        "letter": "B",
        "text": "DataInputStream"
      },
      {
        "letter": "C",
        "text": "BufferedReader"
      },
      {
        "letter": "D",
        "text": "Console"
      }
    ],
    "correct": "A",
    "explanation": "Scanner is commonly used for simple console input (java.util.Scanner)."
  },
  {
    "title": "User Input - Q0866",
    "text": "[User Input] How are command-line arguments accessed in Java?",
    "code": "public static void main(String[] args) { System.out.println(args.length); }",
    "options": [
      {
        "letter": "A",
        "text": "Through the String[] args parameter of main"
      },
      {
        "letter": "B",
        "text": "They are not accessible"
      },
      {
        "letter": "C",
        "text": "Using Scanner by default"
      },
      {
        "letter": "D",
        "text": "System.console() only"
      }
    ],
    "correct": "A",
    "explanation": "main receives command-line arguments via String[] args."
  },
  {
    "title": "User Input - Q0867",
    "text": "[User Input] Which Scanner method reads an entire line including spaces?",
    "code": "Scanner sc = new Scanner(System.in); String s = sc.nextLine();",
    "options": [
      {
        "letter": "A",
        "text": "next()"
      },
      {
        "letter": "B",
        "text": "readLine()"
      },
      {
        "letter": "C",
        "text": "nextInt()"
      },
      {
        "letter": "D",
        "text": "nextLine()"
      }
    ],
    "correct": "D",
    "explanation": "nextLine() reads until end-of-line, including spaces."
  },
  {
    "title": "User Input - Q0868",
    "text": "[User Input] What happens if user inputs a non-integer when calling nextInt()?",
    "code": "Scanner sc = new Scanner(System.in); int x = sc.nextInt();",
    "options": [
      {
        "letter": "A",
        "text": "It returns 0"
      },
      {
        "letter": "B",
        "text": "InputMismatchException at runtime"
      },
      {
        "letter": "C",
        "text": "It blocks forever"
      },
      {
        "letter": "D",
        "text": "Compilation error"
      }
    ],
    "correct": "B",
    "explanation": "nextInt() throws InputMismatchException if the token isn't parseable as int."
  },
  {
    "title": "User Input - Q0869",
    "text": "[User Input] Is it necessary to close a Scanner wrapping System.in?",
    "code": "Scanner sc = new Scanner(System.in); sc.close();",
    "options": [
      {
        "letter": "A",
        "text": "Not recommended to close System.in scanner if you need input later"
      },
      {
        "letter": "B",
        "text": "Never allowed"
      },
      {
        "letter": "C",
        "text": "Closing scanner flushes input"
      },
      {
        "letter": "D",
        "text": "Always required"
      }
    ],
    "correct": "A",
    "explanation": "Closing Scanner closes the underlying stream (System.in), which may not be desired."
  },
  {
    "title": "User Input - Q0870",
    "text": "[User Input] Which class is commonly used to read console input in Java?",
    "code": "import java.util.Scanner;\nScanner sc = new Scanner(System.in);\nint n = sc.nextInt();",
    "options": [
      {
        "letter": "A",
        "text": "Console"
      },
      {
        "letter": "B",
        "text": "Scanner"
      },
      {
        "letter": "C",
        "text": "BufferedReader"
      },
      {
        "letter": "D",
        "text": "DataInputStream"
      }
    ],
    "correct": "B",
    "explanation": "Scanner is commonly used for simple console input (java.util.Scanner)."
  },
  {
    "title": "User Input - Q0871",
    "text": "[User Input] How are command-line arguments accessed in Java?",
    "code": "public static void main(String[] args) { System.out.println(args.length); }",
    "options": [
      {
        "letter": "A",
        "text": "They are not accessible"
      },
      {
        "letter": "B",
        "text": "Through the String[] args parameter of main"
      },
      {
        "letter": "C",
        "text": "System.console() only"
      },
      {
        "letter": "D",
        "text": "Using Scanner by default"
      }
    ],
    "correct": "B",
    "explanation": "main receives command-line arguments via String[] args."
  },
  {
    "title": "User Input - Q0872",
    "text": "[User Input] Which Scanner method reads an entire line including spaces?",
    "code": "Scanner sc = new Scanner(System.in); String s = sc.nextLine();",
    "options": [
      {
        "letter": "A",
        "text": "next()"
      },
      {
        "letter": "B",
        "text": "readLine()"
      },
      {
        "letter": "C",
        "text": "nextLine()"
      },
      {
        "letter": "D",
        "text": "nextInt()"
      }
    ],
    "correct": "C",
    "explanation": "nextLine() reads until end-of-line, including spaces."
  },
  {
    "title": "User Input - Q0873",
    "text": "[User Input] What happens if user inputs a non-integer when calling nextInt()?",
    "code": "Scanner sc = new Scanner(System.in); int x = sc.nextInt();",
    "options": [
      {
        "letter": "A",
        "text": "InputMismatchException at runtime"
      },
      {
        "letter": "B",
        "text": "It blocks forever"
      },
      {
        "letter": "C",
        "text": "Compilation error"
      },
      {
        "letter": "D",
        "text": "It returns 0"
      }
    ],
    "correct": "A",
    "explanation": "nextInt() throws InputMismatchException if the token isn't parseable as int."
  },
  {
    "title": "User Input - Q0874",
    "text": "[User Input] Is it necessary to close a Scanner wrapping System.in?",
    "code": "Scanner sc = new Scanner(System.in); sc.close();",
    "options": [
      {
        "letter": "A",
        "text": "Not recommended to close System.in scanner if you need input later"
      },
      {
        "letter": "B",
        "text": "Closing scanner flushes input"
      },
      {
        "letter": "C",
        "text": "Never allowed"
      },
      {
        "letter": "D",
        "text": "Always required"
      }
    ],
    "correct": "A",
    "explanation": "Closing Scanner closes the underlying stream (System.in), which may not be desired."
  },
  {
    "title": "User Input - Q0875",
    "text": "[User Input] Which class is commonly used to read console input in Java?",
    "code": "import java.util.Scanner;\nScanner sc = new Scanner(System.in);\nint n = sc.nextInt();",
    "options": [
      {
        "letter": "A",
        "text": "Console"
      },
      {
        "letter": "B",
        "text": "Scanner"
      },
      {
        "letter": "C",
        "text": "BufferedReader"
      },
      {
        "letter": "D",
        "text": "DataInputStream"
      }
    ],
    "correct": "B",
    "explanation": "Scanner is commonly used for simple console input (java.util.Scanner)."
  },
  {
    "title": "User Input - Q0876",
    "text": "[User Input] How are command-line arguments accessed in Java?",
    "code": "public static void main(String[] args) { System.out.println(args.length); }",
    "options": [
      {
        "letter": "A",
        "text": "System.console() only"
      },
      {
        "letter": "B",
        "text": "Using Scanner by default"
      },
      {
        "letter": "C",
        "text": "They are not accessible"
      },
      {
        "letter": "D",
        "text": "Through the String[] args parameter of main"
      }
    ],
    "correct": "D",
    "explanation": "main receives command-line arguments via String[] args."
  },
  {
    "title": "User Input - Q0877",
    "text": "[User Input] Which Scanner method reads an entire line including spaces?",
    "code": "Scanner sc = new Scanner(System.in); String s = sc.nextLine();",
    "options": [
      {
        "letter": "A",
        "text": "nextLine()"
      },
      {
        "letter": "B",
        "text": "readLine()"
      },
      {
        "letter": "C",
        "text": "nextInt()"
      },
      {
        "letter": "D",
        "text": "next()"
      }
    ],
    "correct": "A",
    "explanation": "nextLine() reads until end-of-line, including spaces."
  },
  {
    "title": "User Input - Q0878",
    "text": "[User Input] What happens if user inputs a non-integer when calling nextInt()?",
    "code": "Scanner sc = new Scanner(System.in); int x = sc.nextInt();",
    "options": [
      {
        "letter": "A",
        "text": "Compilation error"
      },
      {
        "letter": "B",
        "text": "It blocks forever"
      },
      {
        "letter": "C",
        "text": "InputMismatchException at runtime"
      },
      {
        "letter": "D",
        "text": "It returns 0"
      }
    ],
    "correct": "C",
    "explanation": "nextInt() throws InputMismatchException if the token isn't parseable as int."
  },
  {
    "title": "User Input - Q0879",
    "text": "[User Input] Is it necessary to close a Scanner wrapping System.in?",
    "code": "Scanner sc = new Scanner(System.in); sc.close();",
    "options": [
      {
        "letter": "A",
        "text": "Never allowed"
      },
      {
        "letter": "B",
        "text": "Not recommended to close System.in scanner if you need input later"
      },
      {
        "letter": "C",
        "text": "Closing scanner flushes input"
      },
      {
        "letter": "D",
        "text": "Always required"
      }
    ],
    "correct": "B",
    "explanation": "Closing Scanner closes the underlying stream (System.in), which may not be desired."
  },
  {
    "title": "User Input - Q0880",
    "text": "[User Input] Which class is commonly used to read console input in Java?",
    "code": "import java.util.Scanner;\nScanner sc = new Scanner(System.in);\nint n = sc.nextInt();",
    "options": [
      {
        "letter": "A",
        "text": "Console"
      },
      {
        "letter": "B",
        "text": "BufferedReader"
      },
      {
        "letter": "C",
        "text": "Scanner"
      },
      {
        "letter": "D",
        "text": "DataInputStream"
      }
    ],
    "correct": "C",
    "explanation": "Scanner is commonly used for simple console input (java.util.Scanner)."
  },
  {
    "title": "User Input - Q0881",
    "text": "[User Input] How are command-line arguments accessed in Java?",
    "code": "public static void main(String[] args) { System.out.println(args.length); }",
    "options": [
      {
        "letter": "A",
        "text": "They are not accessible"
      },
      {
        "letter": "B",
        "text": "Using Scanner by default"
      },
      {
        "letter": "C",
        "text": "System.console() only"
      },
      {
        "letter": "D",
        "text": "Through the String[] args parameter of main"
      }
    ],
    "correct": "D",
    "explanation": "main receives command-line arguments via String[] args."
  },
  {
    "title": "User Input - Q0882",
    "text": "[User Input] Which Scanner method reads an entire line including spaces?",
    "code": "Scanner sc = new Scanner(System.in); String s = sc.nextLine();",
    "options": [
      {
        "letter": "A",
        "text": "nextInt()"
      },
      {
        "letter": "B",
        "text": "nextLine()"
      },
      {
        "letter": "C",
        "text": "next()"
      },
      {
        "letter": "D",
        "text": "readLine()"
      }
    ],
    "correct": "B",
    "explanation": "nextLine() reads until end-of-line, including spaces."
  },
  {
    "title": "User Input - Q0883",
    "text": "[User Input] What happens if user inputs a non-integer when calling nextInt()?",
    "code": "Scanner sc = new Scanner(System.in); int x = sc.nextInt();",
    "options": [
      {
        "letter": "A",
        "text": "It blocks forever"
      },
      {
        "letter": "B",
        "text": "InputMismatchException at runtime"
      },
      {
        "letter": "C",
        "text": "Compilation error"
      },
      {
        "letter": "D",
        "text": "It returns 0"
      }
    ],
    "correct": "B",
    "explanation": "nextInt() throws InputMismatchException if the token isn't parseable as int."
  },
  {
    "title": "User Input - Q0884",
    "text": "[User Input] Is it necessary to close a Scanner wrapping System.in?",
    "code": "Scanner sc = new Scanner(System.in); sc.close();",
    "options": [
      {
        "letter": "A",
        "text": "Not recommended to close System.in scanner if you need input later"
      },
      {
        "letter": "B",
        "text": "Never allowed"
      },
      {
        "letter": "C",
        "text": "Closing scanner flushes input"
      },
      {
        "letter": "D",
        "text": "Always required"
      }
    ],
    "correct": "A",
    "explanation": "Closing Scanner closes the underlying stream (System.in), which may not be desired."
  },
  {
    "title": "User Input - Q0885",
    "text": "[User Input] Which class is commonly used to read console input in Java?",
    "code": "import java.util.Scanner;\nScanner sc = new Scanner(System.in);\nint n = sc.nextInt();",
    "options": [
      {
        "letter": "A",
        "text": "DataInputStream"
      },
      {
        "letter": "B",
        "text": "Console"
      },
      {
        "letter": "C",
        "text": "BufferedReader"
      },
      {
        "letter": "D",
        "text": "Scanner"
      }
    ],
    "correct": "D",
    "explanation": "Scanner is commonly used for simple console input (java.util.Scanner)."
  },
  {
    "title": "User Input - Q0886",
    "text": "[User Input] How are command-line arguments accessed in Java?",
    "code": "public static void main(String[] args) { System.out.println(args.length); }",
    "options": [
      {
        "letter": "A",
        "text": "They are not accessible"
      },
      {
        "letter": "B",
        "text": "System.console() only"
      },
      {
        "letter": "C",
        "text": "Through the String[] args parameter of main"
      },
      {
        "letter": "D",
        "text": "Using Scanner by default"
      }
    ],
    "correct": "C",
    "explanation": "main receives command-line arguments via String[] args."
  },
  {
    "title": "User Input - Q0887",
    "text": "[User Input] Which Scanner method reads an entire line including spaces?",
    "code": "Scanner sc = new Scanner(System.in); String s = sc.nextLine();",
    "options": [
      {
        "letter": "A",
        "text": "next()"
      },
      {
        "letter": "B",
        "text": "nextLine()"
      },
      {
        "letter": "C",
        "text": "nextInt()"
      },
      {
        "letter": "D",
        "text": "readLine()"
      }
    ],
    "correct": "B",
    "explanation": "nextLine() reads until end-of-line, including spaces."
  },
  {
    "title": "User Input - Q0888",
    "text": "[User Input] What happens if user inputs a non-integer when calling nextInt()?",
    "code": "Scanner sc = new Scanner(System.in); int x = sc.nextInt();",
    "options": [
      {
        "letter": "A",
        "text": "It blocks forever"
      },
      {
        "letter": "B",
        "text": "InputMismatchException at runtime"
      },
      {
        "letter": "C",
        "text": "It returns 0"
      },
      {
        "letter": "D",
        "text": "Compilation error"
      }
    ],
    "correct": "B",
    "explanation": "nextInt() throws InputMismatchException if the token isn't parseable as int."
  },
  {
    "title": "User Input - Q0889",
    "text": "[User Input] Is it necessary to close a Scanner wrapping System.in?",
    "code": "Scanner sc = new Scanner(System.in); sc.close();",
    "options": [
      {
        "letter": "A",
        "text": "Closing scanner flushes input"
      },
      {
        "letter": "B",
        "text": "Always required"
      },
      {
        "letter": "C",
        "text": "Never allowed"
      },
      {
        "letter": "D",
        "text": "Not recommended to close System.in scanner if you need input later"
      }
    ],
    "correct": "D",
    "explanation": "Closing Scanner closes the underlying stream (System.in), which may not be desired."
  },
  {
    "title": "User Input - Q0890",
    "text": "[User Input] Which class is commonly used to read console input in Java?",
    "code": "import java.util.Scanner;\nScanner sc = new Scanner(System.in);\nint n = sc.nextInt();",
    "options": [
      {
        "letter": "A",
        "text": "Console"
      },
      {
        "letter": "B",
        "text": "DataInputStream"
      },
      {
        "letter": "C",
        "text": "BufferedReader"
      },
      {
        "letter": "D",
        "text": "Scanner"
      }
    ],
    "correct": "D",
    "explanation": "Scanner is commonly used for simple console input (java.util.Scanner)."
  },
  {
    "title": "User Input - Q0891",
    "text": "[User Input] How are command-line arguments accessed in Java?",
    "code": "public static void main(String[] args) { System.out.println(args.length); }",
    "options": [
      {
        "letter": "A",
        "text": "Through the String[] args parameter of main"
      },
      {
        "letter": "B",
        "text": "They are not accessible"
      },
      {
        "letter": "C",
        "text": "System.console() only"
      },
      {
        "letter": "D",
        "text": "Using Scanner by default"
      }
    ],
    "correct": "A",
    "explanation": "main receives command-line arguments via String[] args."
  },
  {
    "title": "User Input - Q0892",
    "text": "[User Input] Which Scanner method reads an entire line including spaces?",
    "code": "Scanner sc = new Scanner(System.in); String s = sc.nextLine();",
    "options": [
      {
        "letter": "A",
        "text": "next()"
      },
      {
        "letter": "B",
        "text": "readLine()"
      },
      {
        "letter": "C",
        "text": "nextInt()"
      },
      {
        "letter": "D",
        "text": "nextLine()"
      }
    ],
    "correct": "D",
    "explanation": "nextLine() reads until end-of-line, including spaces."
  },
  {
    "title": "User Input - Q0893",
    "text": "[User Input] What happens if user inputs a non-integer when calling nextInt()?",
    "code": "Scanner sc = new Scanner(System.in); int x = sc.nextInt();",
    "options": [
      {
        "letter": "A",
        "text": "It blocks forever"
      },
      {
        "letter": "B",
        "text": "It returns 0"
      },
      {
        "letter": "C",
        "text": "Compilation error"
      },
      {
        "letter": "D",
        "text": "InputMismatchException at runtime"
      }
    ],
    "correct": "D",
    "explanation": "nextInt() throws InputMismatchException if the token isn't parseable as int."
  },
  {
    "title": "User Input - Q0894",
    "text": "[User Input] Is it necessary to close a Scanner wrapping System.in?",
    "code": "Scanner sc = new Scanner(System.in); sc.close();",
    "options": [
      {
        "letter": "A",
        "text": "Closing scanner flushes input"
      },
      {
        "letter": "B",
        "text": "Always required"
      },
      {
        "letter": "C",
        "text": "Never allowed"
      },
      {
        "letter": "D",
        "text": "Not recommended to close System.in scanner if you need input later"
      }
    ],
    "correct": "D",
    "explanation": "Closing Scanner closes the underlying stream (System.in), which may not be desired."
  },
  {
    "title": "User Input - Q0895",
    "text": "[User Input] Which class is commonly used to read console input in Java?",
    "code": "import java.util.Scanner;\nScanner sc = new Scanner(System.in);\nint n = sc.nextInt();",
    "options": [
      {
        "letter": "A",
        "text": "BufferedReader"
      },
      {
        "letter": "B",
        "text": "DataInputStream"
      },
      {
        "letter": "C",
        "text": "Console"
      },
      {
        "letter": "D",
        "text": "Scanner"
      }
    ],
    "correct": "D",
    "explanation": "Scanner is commonly used for simple console input (java.util.Scanner)."
  },
  {
    "title": "User Input - Q0896",
    "text": "[User Input] How are command-line arguments accessed in Java?",
    "code": "public static void main(String[] args) { System.out.println(args.length); }",
    "options": [
      {
        "letter": "A",
        "text": "They are not accessible"
      },
      {
        "letter": "B",
        "text": "System.console() only"
      },
      {
        "letter": "C",
        "text": "Using Scanner by default"
      },
      {
        "letter": "D",
        "text": "Through the String[] args parameter of main"
      }
    ],
    "correct": "D",
    "explanation": "main receives command-line arguments via String[] args."
  },
  {
    "title": "User Input - Q0897",
    "text": "[User Input] Which Scanner method reads an entire line including spaces?",
    "code": "Scanner sc = new Scanner(System.in); String s = sc.nextLine();",
    "options": [
      {
        "letter": "A",
        "text": "readLine()"
      },
      {
        "letter": "B",
        "text": "next()"
      },
      {
        "letter": "C",
        "text": "nextLine()"
      },
      {
        "letter": "D",
        "text": "nextInt()"
      }
    ],
    "correct": "C",
    "explanation": "nextLine() reads until end-of-line, including spaces."
  },
  {
    "title": "User Input - Q0898",
    "text": "[User Input] What happens if user inputs a non-integer when calling nextInt()?",
    "code": "Scanner sc = new Scanner(System.in); int x = sc.nextInt();",
    "options": [
      {
        "letter": "A",
        "text": "Compilation error"
      },
      {
        "letter": "B",
        "text": "InputMismatchException at runtime"
      },
      {
        "letter": "C",
        "text": "It blocks forever"
      },
      {
        "letter": "D",
        "text": "It returns 0"
      }
    ],
    "correct": "B",
    "explanation": "nextInt() throws InputMismatchException if the token isn't parseable as int."
  },
  {
    "title": "User Input - Q0899",
    "text": "[User Input] Is it necessary to close a Scanner wrapping System.in?",
    "code": "Scanner sc = new Scanner(System.in); sc.close();",
    "options": [
      {
        "letter": "A",
        "text": "Never allowed"
      },
      {
        "letter": "B",
        "text": "Closing scanner flushes input"
      },
      {
        "letter": "C",
        "text": "Not recommended to close System.in scanner if you need input later"
      },
      {
        "letter": "D",
        "text": "Always required"
      }
    ],
    "correct": "C",
    "explanation": "Closing Scanner closes the underlying stream (System.in), which may not be desired."
  },
  {
    "title": "User Input - Q0900",
    "text": "[User Input] Which class is commonly used to read console input in Java?",
    "code": "import java.util.Scanner;\nScanner sc = new Scanner(System.in);\nint n = sc.nextInt();",
    "options": [
      {
        "letter": "A",
        "text": "Console"
      },
      {
        "letter": "B",
        "text": "DataInputStream"
      },
      {
        "letter": "C",
        "text": "BufferedReader"
      },
      {
        "letter": "D",
        "text": "Scanner"
      }
    ],
    "correct": "D",
    "explanation": "Scanner is commonly used for simple console input (java.util.Scanner)."
  },
  {
    "title": "User Input - Q0901",
    "text": "[User Input] How are command-line arguments accessed in Java?",
    "code": "public static void main(String[] args) { System.out.println(args.length); }",
    "options": [
      {
        "letter": "A",
        "text": "Through the String[] args parameter of main"
      },
      {
        "letter": "B",
        "text": "Using Scanner by default"
      },
      {
        "letter": "C",
        "text": "They are not accessible"
      },
      {
        "letter": "D",
        "text": "System.console() only"
      }
    ],
    "correct": "A",
    "explanation": "main receives command-line arguments via String[] args."
  },
  {
    "title": "User Input - Q0902",
    "text": "[User Input] Which Scanner method reads an entire line including spaces?",
    "code": "Scanner sc = new Scanner(System.in); String s = sc.nextLine();",
    "options": [
      {
        "letter": "A",
        "text": "next()"
      },
      {
        "letter": "B",
        "text": "nextLine()"
      },
      {
        "letter": "C",
        "text": "nextInt()"
      },
      {
        "letter": "D",
        "text": "readLine()"
      }
    ],
    "correct": "B",
    "explanation": "nextLine() reads until end-of-line, including spaces."
  },
  {
    "title": "User Input - Q0903",
    "text": "[User Input] What happens if user inputs a non-integer when calling nextInt()?",
    "code": "Scanner sc = new Scanner(System.in); int x = sc.nextInt();",
    "options": [
      {
        "letter": "A",
        "text": "Compilation error"
      },
      {
        "letter": "B",
        "text": "It returns 0"
      },
      {
        "letter": "C",
        "text": "InputMismatchException at runtime"
      },
      {
        "letter": "D",
        "text": "It blocks forever"
      }
    ],
    "correct": "C",
    "explanation": "nextInt() throws InputMismatchException if the token isn't parseable as int."
  },
  {
    "title": "User Input - Q0904",
    "text": "[User Input] Is it necessary to close a Scanner wrapping System.in?",
    "code": "Scanner sc = new Scanner(System.in); sc.close();",
    "options": [
      {
        "letter": "A",
        "text": "Not recommended to close System.in scanner if you need input later"
      },
      {
        "letter": "B",
        "text": "Closing scanner flushes input"
      },
      {
        "letter": "C",
        "text": "Always required"
      },
      {
        "letter": "D",
        "text": "Never allowed"
      }
    ],
    "correct": "A",
    "explanation": "Closing Scanner closes the underlying stream (System.in), which may not be desired."
  },
  {
    "title": "User Input - Q0905",
    "text": "[User Input] Which class is commonly used to read console input in Java?",
    "code": "import java.util.Scanner;\nScanner sc = new Scanner(System.in);\nint n = sc.nextInt();",
    "options": [
      {
        "letter": "A",
        "text": "BufferedReader"
      },
      {
        "letter": "B",
        "text": "DataInputStream"
      },
      {
        "letter": "C",
        "text": "Console"
      },
      {
        "letter": "D",
        "text": "Scanner"
      }
    ],
    "correct": "D",
    "explanation": "Scanner is commonly used for simple console input (java.util.Scanner)."
  },
  {
    "title": "User Input - Q0906",
    "text": "[User Input] How are command-line arguments accessed in Java?",
    "code": "public static void main(String[] args) { System.out.println(args.length); }",
    "options": [
      {
        "letter": "A",
        "text": "Through the String[] args parameter of main"
      },
      {
        "letter": "B",
        "text": "They are not accessible"
      },
      {
        "letter": "C",
        "text": "System.console() only"
      },
      {
        "letter": "D",
        "text": "Using Scanner by default"
      }
    ],
    "correct": "A",
    "explanation": "main receives command-line arguments via String[] args."
  },
  {
    "title": "User Input - Q0907",
    "text": "[User Input] Which Scanner method reads an entire line including spaces?",
    "code": "Scanner sc = new Scanner(System.in); String s = sc.nextLine();",
    "options": [
      {
        "letter": "A",
        "text": "nextLine()"
      },
      {
        "letter": "B",
        "text": "nextInt()"
      },
      {
        "letter": "C",
        "text": "readLine()"
      },
      {
        "letter": "D",
        "text": "next()"
      }
    ],
    "correct": "A",
    "explanation": "nextLine() reads until end-of-line, including spaces."
  },
  {
    "title": "User Input - Q0908",
    "text": "[User Input] What happens if user inputs a non-integer when calling nextInt()?",
    "code": "Scanner sc = new Scanner(System.in); int x = sc.nextInt();",
    "options": [
      {
        "letter": "A",
        "text": "It blocks forever"
      },
      {
        "letter": "B",
        "text": "It returns 0"
      },
      {
        "letter": "C",
        "text": "InputMismatchException at runtime"
      },
      {
        "letter": "D",
        "text": "Compilation error"
      }
    ],
    "correct": "C",
    "explanation": "nextInt() throws InputMismatchException if the token isn't parseable as int."
  },
  {
    "title": "User Input - Q0909",
    "text": "[User Input] Is it necessary to close a Scanner wrapping System.in?",
    "code": "Scanner sc = new Scanner(System.in); sc.close();",
    "options": [
      {
        "letter": "A",
        "text": "Closing scanner flushes input"
      },
      {
        "letter": "B",
        "text": "Not recommended to close System.in scanner if you need input later"
      },
      {
        "letter": "C",
        "text": "Always required"
      },
      {
        "letter": "D",
        "text": "Never allowed"
      }
    ],
    "correct": "B",
    "explanation": "Closing Scanner closes the underlying stream (System.in), which may not be desired."
  },
  {
    "title": "User Input - Q0910",
    "text": "[User Input] Which class is commonly used to read console input in Java?",
    "code": "import java.util.Scanner;\nScanner sc = new Scanner(System.in);\nint n = sc.nextInt();",
    "options": [
      {
        "letter": "A",
        "text": "Scanner"
      },
      {
        "letter": "B",
        "text": "BufferedReader"
      },
      {
        "letter": "C",
        "text": "DataInputStream"
      },
      {
        "letter": "D",
        "text": "Console"
      }
    ],
    "correct": "A",
    "explanation": "Scanner is commonly used for simple console input (java.util.Scanner)."
  },
  {
    "title": "User Input - Q0911",
    "text": "[User Input] How are command-line arguments accessed in Java?",
    "code": "public static void main(String[] args) { System.out.println(args.length); }",
    "options": [
      {
        "letter": "A",
        "text": "System.console() only"
      },
      {
        "letter": "B",
        "text": "Using Scanner by default"
      },
      {
        "letter": "C",
        "text": "They are not accessible"
      },
      {
        "letter": "D",
        "text": "Through the String[] args parameter of main"
      }
    ],
    "correct": "D",
    "explanation": "main receives command-line arguments via String[] args."
  },
  {
    "title": "User Input - Q0912",
    "text": "[User Input] Which Scanner method reads an entire line including spaces?",
    "code": "Scanner sc = new Scanner(System.in); String s = sc.nextLine();",
    "options": [
      {
        "letter": "A",
        "text": "nextInt()"
      },
      {
        "letter": "B",
        "text": "next()"
      },
      {
        "letter": "C",
        "text": "nextLine()"
      },
      {
        "letter": "D",
        "text": "readLine()"
      }
    ],
    "correct": "C",
    "explanation": "nextLine() reads until end-of-line, including spaces."
  },
  {
    "title": "User Input - Q0913",
    "text": "[User Input] What happens if user inputs a non-integer when calling nextInt()?",
    "code": "Scanner sc = new Scanner(System.in); int x = sc.nextInt();",
    "options": [
      {
        "letter": "A",
        "text": "It returns 0"
      },
      {
        "letter": "B",
        "text": "It blocks forever"
      },
      {
        "letter": "C",
        "text": "Compilation error"
      },
      {
        "letter": "D",
        "text": "InputMismatchException at runtime"
      }
    ],
    "correct": "D",
    "explanation": "nextInt() throws InputMismatchException if the token isn't parseable as int."
  },
  {
    "title": "User Input - Q0914",
    "text": "[User Input] Is it necessary to close a Scanner wrapping System.in?",
    "code": "Scanner sc = new Scanner(System.in); sc.close();",
    "options": [
      {
        "letter": "A",
        "text": "Always required"
      },
      {
        "letter": "B",
        "text": "Not recommended to close System.in scanner if you need input later"
      },
      {
        "letter": "C",
        "text": "Never allowed"
      },
      {
        "letter": "D",
        "text": "Closing scanner flushes input"
      }
    ],
    "correct": "B",
    "explanation": "Closing Scanner closes the underlying stream (System.in), which may not be desired."
  },
  {
    "title": "User Input - Q0915",
    "text": "[User Input] Which class is commonly used to read console input in Java?",
    "code": "import java.util.Scanner;\nScanner sc = new Scanner(System.in);\nint n = sc.nextInt();",
    "options": [
      {
        "letter": "A",
        "text": "BufferedReader"
      },
      {
        "letter": "B",
        "text": "Scanner"
      },
      {
        "letter": "C",
        "text": "DataInputStream"
      },
      {
        "letter": "D",
        "text": "Console"
      }
    ],
    "correct": "B",
    "explanation": "Scanner is commonly used for simple console input (java.util.Scanner)."
  },
  {
    "title": "User Input - Q0916",
    "text": "[User Input] How are command-line arguments accessed in Java?",
    "code": "public static void main(String[] args) { System.out.println(args.length); }",
    "options": [
      {
        "letter": "A",
        "text": "System.console() only"
      },
      {
        "letter": "B",
        "text": "They are not accessible"
      },
      {
        "letter": "C",
        "text": "Using Scanner by default"
      },
      {
        "letter": "D",
        "text": "Through the String[] args parameter of main"
      }
    ],
    "correct": "D",
    "explanation": "main receives command-line arguments via String[] args."
  },
  {
    "title": "User Input - Q0917",
    "text": "[User Input] Which Scanner method reads an entire line including spaces?",
    "code": "Scanner sc = new Scanner(System.in); String s = sc.nextLine();",
    "options": [
      {
        "letter": "A",
        "text": "next()"
      },
      {
        "letter": "B",
        "text": "readLine()"
      },
      {
        "letter": "C",
        "text": "nextLine()"
      },
      {
        "letter": "D",
        "text": "nextInt()"
      }
    ],
    "correct": "C",
    "explanation": "nextLine() reads until end-of-line, including spaces."
  },
  {
    "title": "User Input - Q0918",
    "text": "[User Input] What happens if user inputs a non-integer when calling nextInt()?",
    "code": "Scanner sc = new Scanner(System.in); int x = sc.nextInt();",
    "options": [
      {
        "letter": "A",
        "text": "It returns 0"
      },
      {
        "letter": "B",
        "text": "It blocks forever"
      },
      {
        "letter": "C",
        "text": "Compilation error"
      },
      {
        "letter": "D",
        "text": "InputMismatchException at runtime"
      }
    ],
    "correct": "D",
    "explanation": "nextInt() throws InputMismatchException if the token isn't parseable as int."
  },
  {
    "title": "User Input - Q0919",
    "text": "[User Input] Is it necessary to close a Scanner wrapping System.in?",
    "code": "Scanner sc = new Scanner(System.in); sc.close();",
    "options": [
      {
        "letter": "A",
        "text": "Not recommended to close System.in scanner if you need input later"
      },
      {
        "letter": "B",
        "text": "Closing scanner flushes input"
      },
      {
        "letter": "C",
        "text": "Always required"
      },
      {
        "letter": "D",
        "text": "Never allowed"
      }
    ],
    "correct": "A",
    "explanation": "Closing Scanner closes the underlying stream (System.in), which may not be desired."
  },
  {
    "title": "User Input - Q0920",
    "text": "[User Input] Which class is commonly used to read console input in Java?",
    "code": "import java.util.Scanner;\nScanner sc = new Scanner(System.in);\nint n = sc.nextInt();",
    "options": [
      {
        "letter": "A",
        "text": "Console"
      },
      {
        "letter": "B",
        "text": "Scanner"
      },
      {
        "letter": "C",
        "text": "DataInputStream"
      },
      {
        "letter": "D",
        "text": "BufferedReader"
      }
    ],
    "correct": "B",
    "explanation": "Scanner is commonly used for simple console input (java.util.Scanner)."
  },
  {
    "title": "User Input - Q0921",
    "text": "[User Input] How are command-line arguments accessed in Java?",
    "code": "public static void main(String[] args) { System.out.println(args.length); }",
    "options": [
      {
        "letter": "A",
        "text": "They are not accessible"
      },
      {
        "letter": "B",
        "text": "Using Scanner by default"
      },
      {
        "letter": "C",
        "text": "Through the String[] args parameter of main"
      },
      {
        "letter": "D",
        "text": "System.console() only"
      }
    ],
    "correct": "C",
    "explanation": "main receives command-line arguments via String[] args."
  },
  {
    "title": "User Input - Q0922",
    "text": "[User Input] Which Scanner method reads an entire line including spaces?",
    "code": "Scanner sc = new Scanner(System.in); String s = sc.nextLine();",
    "options": [
      {
        "letter": "A",
        "text": "nextLine()"
      },
      {
        "letter": "B",
        "text": "nextInt()"
      },
      {
        "letter": "C",
        "text": "next()"
      },
      {
        "letter": "D",
        "text": "readLine()"
      }
    ],
    "correct": "A",
    "explanation": "nextLine() reads until end-of-line, including spaces."
  },
  {
    "title": "User Input - Q0923",
    "text": "[User Input] What happens if user inputs a non-integer when calling nextInt()?",
    "code": "Scanner sc = new Scanner(System.in); int x = sc.nextInt();",
    "options": [
      {
        "letter": "A",
        "text": "It blocks forever"
      },
      {
        "letter": "B",
        "text": "Compilation error"
      },
      {
        "letter": "C",
        "text": "It returns 0"
      },
      {
        "letter": "D",
        "text": "InputMismatchException at runtime"
      }
    ],
    "correct": "D",
    "explanation": "nextInt() throws InputMismatchException if the token isn't parseable as int."
  },
  {
    "title": "User Input - Q0924",
    "text": "[User Input] Is it necessary to close a Scanner wrapping System.in?",
    "code": "Scanner sc = new Scanner(System.in); sc.close();",
    "options": [
      {
        "letter": "A",
        "text": "Never allowed"
      },
      {
        "letter": "B",
        "text": "Always required"
      },
      {
        "letter": "C",
        "text": "Closing scanner flushes input"
      },
      {
        "letter": "D",
        "text": "Not recommended to close System.in scanner if you need input later"
      }
    ],
    "correct": "D",
    "explanation": "Closing Scanner closes the underlying stream (System.in), which may not be desired."
  },
  {
    "title": "User Input - Q0925",
    "text": "[User Input] Which class is commonly used to read console input in Java?",
    "code": "import java.util.Scanner;\nScanner sc = new Scanner(System.in);\nint n = sc.nextInt();",
    "options": [
      {
        "letter": "A",
        "text": "Scanner"
      },
      {
        "letter": "B",
        "text": "BufferedReader"
      },
      {
        "letter": "C",
        "text": "Console"
      },
      {
        "letter": "D",
        "text": "DataInputStream"
      }
    ],
    "correct": "A",
    "explanation": "Scanner is commonly used for simple console input (java.util.Scanner)."
  },
  {
    "title": "User Input - Q0926",
    "text": "[User Input] How are command-line arguments accessed in Java?",
    "code": "public static void main(String[] args) { System.out.println(args.length); }",
    "options": [
      {
        "letter": "A",
        "text": "They are not accessible"
      },
      {
        "letter": "B",
        "text": "Through the String[] args parameter of main"
      },
      {
        "letter": "C",
        "text": "System.console() only"
      },
      {
        "letter": "D",
        "text": "Using Scanner by default"
      }
    ],
    "correct": "B",
    "explanation": "main receives command-line arguments via String[] args."
  },
  {
    "title": "User Input - Q0927",
    "text": "[User Input] Which Scanner method reads an entire line including spaces?",
    "code": "Scanner sc = new Scanner(System.in); String s = sc.nextLine();",
    "options": [
      {
        "letter": "A",
        "text": "readLine()"
      },
      {
        "letter": "B",
        "text": "nextInt()"
      },
      {
        "letter": "C",
        "text": "next()"
      },
      {
        "letter": "D",
        "text": "nextLine()"
      }
    ],
    "correct": "D",
    "explanation": "nextLine() reads until end-of-line, including spaces."
  },
  {
    "title": "User Input - Q0928",
    "text": "[User Input] What happens if user inputs a non-integer when calling nextInt()?",
    "code": "Scanner sc = new Scanner(System.in); int x = sc.nextInt();",
    "options": [
      {
        "letter": "A",
        "text": "Compilation error"
      },
      {
        "letter": "B",
        "text": "It returns 0"
      },
      {
        "letter": "C",
        "text": "InputMismatchException at runtime"
      },
      {
        "letter": "D",
        "text": "It blocks forever"
      }
    ],
    "correct": "C",
    "explanation": "nextInt() throws InputMismatchException if the token isn't parseable as int."
  },
  {
    "title": "User Input - Q0929",
    "text": "[User Input] Is it necessary to close a Scanner wrapping System.in?",
    "code": "Scanner sc = new Scanner(System.in); sc.close();",
    "options": [
      {
        "letter": "A",
        "text": "Closing scanner flushes input"
      },
      {
        "letter": "B",
        "text": "Never allowed"
      },
      {
        "letter": "C",
        "text": "Not recommended to close System.in scanner if you need input later"
      },
      {
        "letter": "D",
        "text": "Always required"
      }
    ],
    "correct": "C",
    "explanation": "Closing Scanner closes the underlying stream (System.in), which may not be desired."
  },
  {
    "title": "User Input - Q0930",
    "text": "[User Input] Which class is commonly used to read console input in Java?",
    "code": "import java.util.Scanner;\nScanner sc = new Scanner(System.in);\nint n = sc.nextInt();",
    "options": [
      {
        "letter": "A",
        "text": "DataInputStream"
      },
      {
        "letter": "B",
        "text": "Scanner"
      },
      {
        "letter": "C",
        "text": "BufferedReader"
      },
      {
        "letter": "D",
        "text": "Console"
      }
    ],
    "correct": "B",
    "explanation": "Scanner is commonly used for simple console input (java.util.Scanner)."
  },
  {
    "title": "User Input - Q0931",
    "text": "[User Input] How are command-line arguments accessed in Java?",
    "code": "public static void main(String[] args) { System.out.println(args.length); }",
    "options": [
      {
        "letter": "A",
        "text": "Through the String[] args parameter of main"
      },
      {
        "letter": "B",
        "text": "System.console() only"
      },
      {
        "letter": "C",
        "text": "They are not accessible"
      },
      {
        "letter": "D",
        "text": "Using Scanner by default"
      }
    ],
    "correct": "A",
    "explanation": "main receives command-line arguments via String[] args."
  },
  {
    "title": "User Input - Q0932",
    "text": "[User Input] Which Scanner method reads an entire line including spaces?",
    "code": "Scanner sc = new Scanner(System.in); String s = sc.nextLine();",
    "options": [
      {
        "letter": "A",
        "text": "next()"
      },
      {
        "letter": "B",
        "text": "nextLine()"
      },
      {
        "letter": "C",
        "text": "nextInt()"
      },
      {
        "letter": "D",
        "text": "readLine()"
      }
    ],
    "correct": "B",
    "explanation": "nextLine() reads until end-of-line, including spaces."
  },
  {
    "title": "User Input - Q0933",
    "text": "[User Input] What happens if user inputs a non-integer when calling nextInt()?",
    "code": "Scanner sc = new Scanner(System.in); int x = sc.nextInt();",
    "options": [
      {
        "letter": "A",
        "text": "It returns 0"
      },
      {
        "letter": "B",
        "text": "Compilation error"
      },
      {
        "letter": "C",
        "text": "InputMismatchException at runtime"
      },
      {
        "letter": "D",
        "text": "It blocks forever"
      }
    ],
    "correct": "C",
    "explanation": "nextInt() throws InputMismatchException if the token isn't parseable as int."
  },
  {
    "title": "User Input - Q0934",
    "text": "[User Input] Is it necessary to close a Scanner wrapping System.in?",
    "code": "Scanner sc = new Scanner(System.in); sc.close();",
    "options": [
      {
        "letter": "A",
        "text": "Not recommended to close System.in scanner if you need input later"
      },
      {
        "letter": "B",
        "text": "Always required"
      },
      {
        "letter": "C",
        "text": "Closing scanner flushes input"
      },
      {
        "letter": "D",
        "text": "Never allowed"
      }
    ],
    "correct": "A",
    "explanation": "Closing Scanner closes the underlying stream (System.in), which may not be desired."
  },
  {
    "title": "User Input - Q0935",
    "text": "[User Input] Which class is commonly used to read console input in Java?",
    "code": "import java.util.Scanner;\nScanner sc = new Scanner(System.in);\nint n = sc.nextInt();",
    "options": [
      {
        "letter": "A",
        "text": "DataInputStream"
      },
      {
        "letter": "B",
        "text": "Scanner"
      },
      {
        "letter": "C",
        "text": "Console"
      },
      {
        "letter": "D",
        "text": "BufferedReader"
      }
    ],
    "correct": "B",
    "explanation": "Scanner is commonly used for simple console input (java.util.Scanner)."
  },
  {
    "title": "User Input - Q0936",
    "text": "[User Input] How are command-line arguments accessed in Java?",
    "code": "public static void main(String[] args) { System.out.println(args.length); }",
    "options": [
      {
        "letter": "A",
        "text": "System.console() only"
      },
      {
        "letter": "B",
        "text": "They are not accessible"
      },
      {
        "letter": "C",
        "text": "Through the String[] args parameter of main"
      },
      {
        "letter": "D",
        "text": "Using Scanner by default"
      }
    ],
    "correct": "C",
    "explanation": "main receives command-line arguments via String[] args."
  },
  {
    "title": "User Input - Q0937",
    "text": "[User Input] Which Scanner method reads an entire line including spaces?",
    "code": "Scanner sc = new Scanner(System.in); String s = sc.nextLine();",
    "options": [
      {
        "letter": "A",
        "text": "next()"
      },
      {
        "letter": "B",
        "text": "readLine()"
      },
      {
        "letter": "C",
        "text": "nextLine()"
      },
      {
        "letter": "D",
        "text": "nextInt()"
      }
    ],
    "correct": "C",
    "explanation": "nextLine() reads until end-of-line, including spaces."
  },
  {
    "title": "User Input - Q0938",
    "text": "[User Input] What happens if user inputs a non-integer when calling nextInt()?",
    "code": "Scanner sc = new Scanner(System.in); int x = sc.nextInt();",
    "options": [
      {
        "letter": "A",
        "text": "InputMismatchException at runtime"
      },
      {
        "letter": "B",
        "text": "Compilation error"
      },
      {
        "letter": "C",
        "text": "It returns 0"
      },
      {
        "letter": "D",
        "text": "It blocks forever"
      }
    ],
    "correct": "A",
    "explanation": "nextInt() throws InputMismatchException if the token isn't parseable as int."
  },
  {
    "title": "User Input - Q0939",
    "text": "[User Input] Is it necessary to close a Scanner wrapping System.in?",
    "code": "Scanner sc = new Scanner(System.in); sc.close();",
    "options": [
      {
        "letter": "A",
        "text": "Never allowed"
      },
      {
        "letter": "B",
        "text": "Closing scanner flushes input"
      },
      {
        "letter": "C",
        "text": "Not recommended to close System.in scanner if you need input later"
      },
      {
        "letter": "D",
        "text": "Always required"
      }
    ],
    "correct": "C",
    "explanation": "Closing Scanner closes the underlying stream (System.in), which may not be desired."
  },
  {
    "title": "User Input - Q0940",
    "text": "[User Input] Which class is commonly used to read console input in Java?",
    "code": "import java.util.Scanner;\nScanner sc = new Scanner(System.in);\nint n = sc.nextInt();",
    "options": [
      {
        "letter": "A",
        "text": "Scanner"
      },
      {
        "letter": "B",
        "text": "BufferedReader"
      },
      {
        "letter": "C",
        "text": "Console"
      },
      {
        "letter": "D",
        "text": "DataInputStream"
      }
    ],
    "correct": "A",
    "explanation": "Scanner is commonly used for simple console input (java.util.Scanner)."
  },
  {
    "title": "User Input - Q0941",
    "text": "[User Input] How are command-line arguments accessed in Java?",
    "code": "public static void main(String[] args) { System.out.println(args.length); }",
    "options": [
      {
        "letter": "A",
        "text": "Using Scanner by default"
      },
      {
        "letter": "B",
        "text": "System.console() only"
      },
      {
        "letter": "C",
        "text": "Through the String[] args parameter of main"
      },
      {
        "letter": "D",
        "text": "They are not accessible"
      }
    ],
    "correct": "C",
    "explanation": "main receives command-line arguments via String[] args."
  },
  {
    "title": "User Input - Q0942",
    "text": "[User Input] Which Scanner method reads an entire line including spaces?",
    "code": "Scanner sc = new Scanner(System.in); String s = sc.nextLine();",
    "options": [
      {
        "letter": "A",
        "text": "nextLine()"
      },
      {
        "letter": "B",
        "text": "readLine()"
      },
      {
        "letter": "C",
        "text": "next()"
      },
      {
        "letter": "D",
        "text": "nextInt()"
      }
    ],
    "correct": "A",
    "explanation": "nextLine() reads until end-of-line, including spaces."
  },
  {
    "title": "User Input - Q0943",
    "text": "[User Input] What happens if user inputs a non-integer when calling nextInt()?",
    "code": "Scanner sc = new Scanner(System.in); int x = sc.nextInt();",
    "options": [
      {
        "letter": "A",
        "text": "InputMismatchException at runtime"
      },
      {
        "letter": "B",
        "text": "It blocks forever"
      },
      {
        "letter": "C",
        "text": "It returns 0"
      },
      {
        "letter": "D",
        "text": "Compilation error"
      }
    ],
    "correct": "A",
    "explanation": "nextInt() throws InputMismatchException if the token isn't parseable as int."
  },
  {
    "title": "User Input - Q0944",
    "text": "[User Input] Is it necessary to close a Scanner wrapping System.in?",
    "code": "Scanner sc = new Scanner(System.in); sc.close();",
    "options": [
      {
        "letter": "A",
        "text": "Never allowed"
      },
      {
        "letter": "B",
        "text": "Closing scanner flushes input"
      },
      {
        "letter": "C",
        "text": "Not recommended to close System.in scanner if you need input later"
      },
      {
        "letter": "D",
        "text": "Always required"
      }
    ],
    "correct": "C",
    "explanation": "Closing Scanner closes the underlying stream (System.in), which may not be desired."
  },
  {
    "title": "User Input - Q0945",
    "text": "[User Input] Which class is commonly used to read console input in Java?",
    "code": "import java.util.Scanner;\nScanner sc = new Scanner(System.in);\nint n = sc.nextInt();",
    "options": [
      {
        "letter": "A",
        "text": "Console"
      },
      {
        "letter": "B",
        "text": "DataInputStream"
      },
      {
        "letter": "C",
        "text": "BufferedReader"
      },
      {
        "letter": "D",
        "text": "Scanner"
      }
    ],
    "correct": "D",
    "explanation": "Scanner is commonly used for simple console input (java.util.Scanner)."
  },
  {
    "title": "User Input - Q0946",
    "text": "[User Input] How are command-line arguments accessed in Java?",
    "code": "public static void main(String[] args) { System.out.println(args.length); }",
    "options": [
      {
        "letter": "A",
        "text": "They are not accessible"
      },
      {
        "letter": "B",
        "text": "Through the String[] args parameter of main"
      },
      {
        "letter": "C",
        "text": "Using Scanner by default"
      },
      {
        "letter": "D",
        "text": "System.console() only"
      }
    ],
    "correct": "B",
    "explanation": "main receives command-line arguments via String[] args."
  },
  {
    "title": "User Input - Q0947",
    "text": "[User Input] Which Scanner method reads an entire line including spaces?",
    "code": "Scanner sc = new Scanner(System.in); String s = sc.nextLine();",
    "options": [
      {
        "letter": "A",
        "text": "readLine()"
      },
      {
        "letter": "B",
        "text": "next()"
      },
      {
        "letter": "C",
        "text": "nextLine()"
      },
      {
        "letter": "D",
        "text": "nextInt()"
      }
    ],
    "correct": "C",
    "explanation": "nextLine() reads until end-of-line, including spaces."
  },
  {
    "title": "User Input - Q0948",
    "text": "[User Input] What happens if user inputs a non-integer when calling nextInt()?",
    "code": "Scanner sc = new Scanner(System.in); int x = sc.nextInt();",
    "options": [
      {
        "letter": "A",
        "text": "InputMismatchException at runtime"
      },
      {
        "letter": "B",
        "text": "Compilation error"
      },
      {
        "letter": "C",
        "text": "It returns 0"
      },
      {
        "letter": "D",
        "text": "It blocks forever"
      }
    ],
    "correct": "A",
    "explanation": "nextInt() throws InputMismatchException if the token isn't parseable as int."
  },
  {
    "title": "User Input - Q0949",
    "text": "[User Input] Is it necessary to close a Scanner wrapping System.in?",
    "code": "Scanner sc = new Scanner(System.in); sc.close();",
    "options": [
      {
        "letter": "A",
        "text": "Closing scanner flushes input"
      },
      {
        "letter": "B",
        "text": "Never allowed"
      },
      {
        "letter": "C",
        "text": "Not recommended to close System.in scanner if you need input later"
      },
      {
        "letter": "D",
        "text": "Always required"
      }
    ],
    "correct": "C",
    "explanation": "Closing Scanner closes the underlying stream (System.in), which may not be desired."
  },
  {
    "title": "User Input - Q0950",
    "text": "[User Input] Which class is commonly used to read console input in Java?",
    "code": "import java.util.Scanner;\nScanner sc = new Scanner(System.in);\nint n = sc.nextInt();",
    "options": [
      {
        "letter": "A",
        "text": "Scanner"
      },
      {
        "letter": "B",
        "text": "DataInputStream"
      },
      {
        "letter": "C",
        "text": "Console"
      },
      {
        "letter": "D",
        "text": "BufferedReader"
      }
    ],
    "correct": "A",
    "explanation": "Scanner is commonly used for simple console input (java.util.Scanner)."
  },
  {
    "title": "User Input - Q0951",
    "text": "[User Input] How are command-line arguments accessed in Java?",
    "code": "public static void main(String[] args) { System.out.println(args.length); }",
    "options": [
      {
        "letter": "A",
        "text": "Through the String[] args parameter of main"
      },
      {
        "letter": "B",
        "text": "They are not accessible"
      },
      {
        "letter": "C",
        "text": "System.console() only"
      },
      {
        "letter": "D",
        "text": "Using Scanner by default"
      }
    ],
    "correct": "A",
    "explanation": "main receives command-line arguments via String[] args."
  },
  {
    "title": "User Input - Q0952",
    "text": "[User Input] Which Scanner method reads an entire line including spaces?",
    "code": "Scanner sc = new Scanner(System.in); String s = sc.nextLine();",
    "options": [
      {
        "letter": "A",
        "text": "next()"
      },
      {
        "letter": "B",
        "text": "readLine()"
      },
      {
        "letter": "C",
        "text": "nextInt()"
      },
      {
        "letter": "D",
        "text": "nextLine()"
      }
    ],
    "correct": "D",
    "explanation": "nextLine() reads until end-of-line, including spaces."
  },
  {
    "title": "User Input - Q0953",
    "text": "[User Input] What happens if user inputs a non-integer when calling nextInt()?",
    "code": "Scanner sc = new Scanner(System.in); int x = sc.nextInt();",
    "options": [
      {
        "letter": "A",
        "text": "It returns 0"
      },
      {
        "letter": "B",
        "text": "It blocks forever"
      },
      {
        "letter": "C",
        "text": "Compilation error"
      },
      {
        "letter": "D",
        "text": "InputMismatchException at runtime"
      }
    ],
    "correct": "D",
    "explanation": "nextInt() throws InputMismatchException if the token isn't parseable as int."
  },
  {
    "title": "User Input - Q0954",
    "text": "[User Input] Is it necessary to close a Scanner wrapping System.in?",
    "code": "Scanner sc = new Scanner(System.in); sc.close();",
    "options": [
      {
        "letter": "A",
        "text": "Not recommended to close System.in scanner if you need input later"
      },
      {
        "letter": "B",
        "text": "Never allowed"
      },
      {
        "letter": "C",
        "text": "Closing scanner flushes input"
      },
      {
        "letter": "D",
        "text": "Always required"
      }
    ],
    "correct": "A",
    "explanation": "Closing Scanner closes the underlying stream (System.in), which may not be desired."
  },
  {
    "title": "User Input - Q0955",
    "text": "[User Input] Which class is commonly used to read console input in Java?",
    "code": "import java.util.Scanner;\nScanner sc = new Scanner(System.in);\nint n = sc.nextInt();",
    "options": [
      {
        "letter": "A",
        "text": "BufferedReader"
      },
      {
        "letter": "B",
        "text": "DataInputStream"
      },
      {
        "letter": "C",
        "text": "Scanner"
      },
      {
        "letter": "D",
        "text": "Console"
      }
    ],
    "correct": "C",
    "explanation": "Scanner is commonly used for simple console input (java.util.Scanner)."
  },
  {
    "title": "User Input - Q0956",
    "text": "[User Input] How are command-line arguments accessed in Java?",
    "code": "public static void main(String[] args) { System.out.println(args.length); }",
    "options": [
      {
        "letter": "A",
        "text": "System.console() only"
      },
      {
        "letter": "B",
        "text": "They are not accessible"
      },
      {
        "letter": "C",
        "text": "Through the String[] args parameter of main"
      },
      {
        "letter": "D",
        "text": "Using Scanner by default"
      }
    ],
    "correct": "C",
    "explanation": "main receives command-line arguments via String[] args."
  },
  {
    "title": "User Input - Q0957",
    "text": "[User Input] Which Scanner method reads an entire line including spaces?",
    "code": "Scanner sc = new Scanner(System.in); String s = sc.nextLine();",
    "options": [
      {
        "letter": "A",
        "text": "next()"
      },
      {
        "letter": "B",
        "text": "readLine()"
      },
      {
        "letter": "C",
        "text": "nextInt()"
      },
      {
        "letter": "D",
        "text": "nextLine()"
      }
    ],
    "correct": "D",
    "explanation": "nextLine() reads until end-of-line, including spaces."
  },
  {
    "title": "User Input - Q0958",
    "text": "[User Input] What happens if user inputs a non-integer when calling nextInt()?",
    "code": "Scanner sc = new Scanner(System.in); int x = sc.nextInt();",
    "options": [
      {
        "letter": "A",
        "text": "It blocks forever"
      },
      {
        "letter": "B",
        "text": "Compilation error"
      },
      {
        "letter": "C",
        "text": "It returns 0"
      },
      {
        "letter": "D",
        "text": "InputMismatchException at runtime"
      }
    ],
    "correct": "D",
    "explanation": "nextInt() throws InputMismatchException if the token isn't parseable as int."
  },
  {
    "title": "User Input - Q0959",
    "text": "[User Input] Is it necessary to close a Scanner wrapping System.in?",
    "code": "Scanner sc = new Scanner(System.in); sc.close();",
    "options": [
      {
        "letter": "A",
        "text": "Always required"
      },
      {
        "letter": "B",
        "text": "Closing scanner flushes input"
      },
      {
        "letter": "C",
        "text": "Never allowed"
      },
      {
        "letter": "D",
        "text": "Not recommended to close System.in scanner if you need input later"
      }
    ],
    "correct": "D",
    "explanation": "Closing Scanner closes the underlying stream (System.in), which may not be desired."
  },
  {
    "title": "User Input - Q0960",
    "text": "[User Input] Which class is commonly used to read console input in Java?",
    "code": "import java.util.Scanner;\nScanner sc = new Scanner(System.in);\nint n = sc.nextInt();",
    "options": [
      {
        "letter": "A",
        "text": "DataInputStream"
      },
      {
        "letter": "B",
        "text": "BufferedReader"
      },
      {
        "letter": "C",
        "text": "Console"
      },
      {
        "letter": "D",
        "text": "Scanner"
      }
    ],
    "correct": "D",
    "explanation": "Scanner is commonly used for simple console input (java.util.Scanner)."
  },
  {
    "title": "User Input - Q0961",
    "text": "[User Input] How are command-line arguments accessed in Java?",
    "code": "public static void main(String[] args) { System.out.println(args.length); }",
    "options": [
      {
        "letter": "A",
        "text": "They are not accessible"
      },
      {
        "letter": "B",
        "text": "Through the String[] args parameter of main"
      },
      {
        "letter": "C",
        "text": "Using Scanner by default"
      },
      {
        "letter": "D",
        "text": "System.console() only"
      }
    ],
    "correct": "B",
    "explanation": "main receives command-line arguments via String[] args."
  },
  {
    "title": "User Input - Q0962",
    "text": "[User Input] Which Scanner method reads an entire line including spaces?",
    "code": "Scanner sc = new Scanner(System.in); String s = sc.nextLine();",
    "options": [
      {
        "letter": "A",
        "text": "nextLine()"
      },
      {
        "letter": "B",
        "text": "next()"
      },
      {
        "letter": "C",
        "text": "readLine()"
      },
      {
        "letter": "D",
        "text": "nextInt()"
      }
    ],
    "correct": "A",
    "explanation": "nextLine() reads until end-of-line, including spaces."
  },
  {
    "title": "User Input - Q0963",
    "text": "[User Input] What happens if user inputs a non-integer when calling nextInt()?",
    "code": "Scanner sc = new Scanner(System.in); int x = sc.nextInt();",
    "options": [
      {
        "letter": "A",
        "text": "It blocks forever"
      },
      {
        "letter": "B",
        "text": "It returns 0"
      },
      {
        "letter": "C",
        "text": "InputMismatchException at runtime"
      },
      {
        "letter": "D",
        "text": "Compilation error"
      }
    ],
    "correct": "C",
    "explanation": "nextInt() throws InputMismatchException if the token isn't parseable as int."
  },
  {
    "title": "User Input - Q0964",
    "text": "[User Input] Is it necessary to close a Scanner wrapping System.in?",
    "code": "Scanner sc = new Scanner(System.in); sc.close();",
    "options": [
      {
        "letter": "A",
        "text": "Closing scanner flushes input"
      },
      {
        "letter": "B",
        "text": "Never allowed"
      },
      {
        "letter": "C",
        "text": "Not recommended to close System.in scanner if you need input later"
      },
      {
        "letter": "D",
        "text": "Always required"
      }
    ],
    "correct": "C",
    "explanation": "Closing Scanner closes the underlying stream (System.in), which may not be desired."
  },
  {
    "title": "User Input - Q0965",
    "text": "[User Input] Which class is commonly used to read console input in Java?",
    "code": "import java.util.Scanner;\nScanner sc = new Scanner(System.in);\nint n = sc.nextInt();",
    "options": [
      {
        "letter": "A",
        "text": "DataInputStream"
      },
      {
        "letter": "B",
        "text": "BufferedReader"
      },
      {
        "letter": "C",
        "text": "Scanner"
      },
      {
        "letter": "D",
        "text": "Console"
      }
    ],
    "correct": "C",
    "explanation": "Scanner is commonly used for simple console input (java.util.Scanner)."
  },
  {
    "title": "User Input - Q0966",
    "text": "[User Input] How are command-line arguments accessed in Java?",
    "code": "public static void main(String[] args) { System.out.println(args.length); }",
    "options": [
      {
        "letter": "A",
        "text": "Through the String[] args parameter of main"
      },
      {
        "letter": "B",
        "text": "They are not accessible"
      },
      {
        "letter": "C",
        "text": "Using Scanner by default"
      },
      {
        "letter": "D",
        "text": "System.console() only"
      }
    ],
    "correct": "A",
    "explanation": "main receives command-line arguments via String[] args."
  },
  {
    "title": "User Input - Q0967",
    "text": "[User Input] Which Scanner method reads an entire line including spaces?",
    "code": "Scanner sc = new Scanner(System.in); String s = sc.nextLine();",
    "options": [
      {
        "letter": "A",
        "text": "readLine()"
      },
      {
        "letter": "B",
        "text": "next()"
      },
      {
        "letter": "C",
        "text": "nextInt()"
      },
      {
        "letter": "D",
        "text": "nextLine()"
      }
    ],
    "correct": "D",
    "explanation": "nextLine() reads until end-of-line, including spaces."
  },
  {
    "title": "User Input - Q0968",
    "text": "[User Input] What happens if user inputs a non-integer when calling nextInt()?",
    "code": "Scanner sc = new Scanner(System.in); int x = sc.nextInt();",
    "options": [
      {
        "letter": "A",
        "text": "Compilation error"
      },
      {
        "letter": "B",
        "text": "It blocks forever"
      },
      {
        "letter": "C",
        "text": "InputMismatchException at runtime"
      },
      {
        "letter": "D",
        "text": "It returns 0"
      }
    ],
    "correct": "C",
    "explanation": "nextInt() throws InputMismatchException if the token isn't parseable as int."
  },
  {
    "title": "User Input - Q0969",
    "text": "[User Input] Is it necessary to close a Scanner wrapping System.in?",
    "code": "Scanner sc = new Scanner(System.in); sc.close();",
    "options": [
      {
        "letter": "A",
        "text": "Not recommended to close System.in scanner if you need input later"
      },
      {
        "letter": "B",
        "text": "Always required"
      },
      {
        "letter": "C",
        "text": "Never allowed"
      },
      {
        "letter": "D",
        "text": "Closing scanner flushes input"
      }
    ],
    "correct": "A",
    "explanation": "Closing Scanner closes the underlying stream (System.in), which may not be desired."
  },
  {
    "title": "User Input - Q0970",
    "text": "[User Input] Which class is commonly used to read console input in Java?",
    "code": "import java.util.Scanner;\nScanner sc = new Scanner(System.in);\nint n = sc.nextInt();",
    "options": [
      {
        "letter": "A",
        "text": "BufferedReader"
      },
      {
        "letter": "B",
        "text": "Scanner"
      },
      {
        "letter": "C",
        "text": "Console"
      },
      {
        "letter": "D",
        "text": "DataInputStream"
      }
    ],
    "correct": "B",
    "explanation": "Scanner is commonly used for simple console input (java.util.Scanner)."
  },
  {
    "title": "User Input - Q0971",
    "text": "[User Input] How are command-line arguments accessed in Java?",
    "code": "public static void main(String[] args) { System.out.println(args.length); }",
    "options": [
      {
        "letter": "A",
        "text": "They are not accessible"
      },
      {
        "letter": "B",
        "text": "System.console() only"
      },
      {
        "letter": "C",
        "text": "Through the String[] args parameter of main"
      },
      {
        "letter": "D",
        "text": "Using Scanner by default"
      }
    ],
    "correct": "C",
    "explanation": "main receives command-line arguments via String[] args."
  },
  {
    "title": "User Input - Q0972",
    "text": "[User Input] Which Scanner method reads an entire line including spaces?",
    "code": "Scanner sc = new Scanner(System.in); String s = sc.nextLine();",
    "options": [
      {
        "letter": "A",
        "text": "readLine()"
      },
      {
        "letter": "B",
        "text": "nextInt()"
      },
      {
        "letter": "C",
        "text": "nextLine()"
      },
      {
        "letter": "D",
        "text": "next()"
      }
    ],
    "correct": "C",
    "explanation": "nextLine() reads until end-of-line, including spaces."
  },
  {
    "title": "User Input - Q0973",
    "text": "[User Input] What happens if user inputs a non-integer when calling nextInt()?",
    "code": "Scanner sc = new Scanner(System.in); int x = sc.nextInt();",
    "options": [
      {
        "letter": "A",
        "text": "It returns 0"
      },
      {
        "letter": "B",
        "text": "It blocks forever"
      },
      {
        "letter": "C",
        "text": "InputMismatchException at runtime"
      },
      {
        "letter": "D",
        "text": "Compilation error"
      }
    ],
    "correct": "C",
    "explanation": "nextInt() throws InputMismatchException if the token isn't parseable as int."
  },
  {
    "title": "User Input - Q0974",
    "text": "[User Input] Is it necessary to close a Scanner wrapping System.in?",
    "code": "Scanner sc = new Scanner(System.in); sc.close();",
    "options": [
      {
        "letter": "A",
        "text": "Closing scanner flushes input"
      },
      {
        "letter": "B",
        "text": "Not recommended to close System.in scanner if you need input later"
      },
      {
        "letter": "C",
        "text": "Always required"
      },
      {
        "letter": "D",
        "text": "Never allowed"
      }
    ],
    "correct": "B",
    "explanation": "Closing Scanner closes the underlying stream (System.in), which may not be desired."
  },
  {
    "title": "User Input - Q0975",
    "text": "[User Input] Which class is commonly used to read console input in Java?",
    "code": "import java.util.Scanner;\nScanner sc = new Scanner(System.in);\nint n = sc.nextInt();",
    "options": [
      {
        "letter": "A",
        "text": "Scanner"
      },
      {
        "letter": "B",
        "text": "BufferedReader"
      },
      {
        "letter": "C",
        "text": "DataInputStream"
      },
      {
        "letter": "D",
        "text": "Console"
      }
    ],
    "correct": "A",
    "explanation": "Scanner is commonly used for simple console input (java.util.Scanner)."
  },
  {
    "title": "User Input - Q0976",
    "text": "[User Input] How are command-line arguments accessed in Java?",
    "code": "public static void main(String[] args) { System.out.println(args.length); }",
    "options": [
      {
        "letter": "A",
        "text": "Using Scanner by default"
      },
      {
        "letter": "B",
        "text": "Through the String[] args parameter of main"
      },
      {
        "letter": "C",
        "text": "They are not accessible"
      },
      {
        "letter": "D",
        "text": "System.console() only"
      }
    ],
    "correct": "B",
    "explanation": "main receives command-line arguments via String[] args."
  },
  {
    "title": "User Input - Q0977",
    "text": "[User Input] Which Scanner method reads an entire line including spaces?",
    "code": "Scanner sc = new Scanner(System.in); String s = sc.nextLine();",
    "options": [
      {
        "letter": "A",
        "text": "nextInt()"
      },
      {
        "letter": "B",
        "text": "readLine()"
      },
      {
        "letter": "C",
        "text": "next()"
      },
      {
        "letter": "D",
        "text": "nextLine()"
      }
    ],
    "correct": "D",
    "explanation": "nextLine() reads until end-of-line, including spaces."
  },
  {
    "title": "User Input - Q0978",
    "text": "[User Input] What happens if user inputs a non-integer when calling nextInt()?",
    "code": "Scanner sc = new Scanner(System.in); int x = sc.nextInt();",
    "options": [
      {
        "letter": "A",
        "text": "It returns 0"
      },
      {
        "letter": "B",
        "text": "It blocks forever"
      },
      {
        "letter": "C",
        "text": "Compilation error"
      },
      {
        "letter": "D",
        "text": "InputMismatchException at runtime"
      }
    ],
    "correct": "D",
    "explanation": "nextInt() throws InputMismatchException if the token isn't parseable as int."
  },
  {
    "title": "User Input - Q0979",
    "text": "[User Input] Is it necessary to close a Scanner wrapping System.in?",
    "code": "Scanner sc = new Scanner(System.in); sc.close();",
    "options": [
      {
        "letter": "A",
        "text": "Never allowed"
      },
      {
        "letter": "B",
        "text": "Closing scanner flushes input"
      },
      {
        "letter": "C",
        "text": "Not recommended to close System.in scanner if you need input later"
      },
      {
        "letter": "D",
        "text": "Always required"
      }
    ],
    "correct": "C",
    "explanation": "Closing Scanner closes the underlying stream (System.in), which may not be desired."
  },
  {
    "title": "User Input - Q0980",
    "text": "[User Input] Which class is commonly used to read console input in Java?",
    "code": "import java.util.Scanner;\nScanner sc = new Scanner(System.in);\nint n = sc.nextInt();",
    "options": [
      {
        "letter": "A",
        "text": "Scanner"
      },
      {
        "letter": "B",
        "text": "Console"
      },
      {
        "letter": "C",
        "text": "DataInputStream"
      },
      {
        "letter": "D",
        "text": "BufferedReader"
      }
    ],
    "correct": "A",
    "explanation": "Scanner is commonly used for simple console input (java.util.Scanner)."
  },
  {
    "title": "User Input - Q0981",
    "text": "[User Input] How are command-line arguments accessed in Java?",
    "code": "public static void main(String[] args) { System.out.println(args.length); }",
    "options": [
      {
        "letter": "A",
        "text": "Using Scanner by default"
      },
      {
        "letter": "B",
        "text": "They are not accessible"
      },
      {
        "letter": "C",
        "text": "System.console() only"
      },
      {
        "letter": "D",
        "text": "Through the String[] args parameter of main"
      }
    ],
    "correct": "D",
    "explanation": "main receives command-line arguments via String[] args."
  },
  {
    "title": "User Input - Q0982",
    "text": "[User Input] Which Scanner method reads an entire line including spaces?",
    "code": "Scanner sc = new Scanner(System.in); String s = sc.nextLine();",
    "options": [
      {
        "letter": "A",
        "text": "next()"
      },
      {
        "letter": "B",
        "text": "nextInt()"
      },
      {
        "letter": "C",
        "text": "readLine()"
      },
      {
        "letter": "D",
        "text": "nextLine()"
      }
    ],
    "correct": "D",
    "explanation": "nextLine() reads until end-of-line, including spaces."
  },
  {
    "title": "User Input - Q0983",
    "text": "[User Input] What happens if user inputs a non-integer when calling nextInt()?",
    "code": "Scanner sc = new Scanner(System.in); int x = sc.nextInt();",
    "options": [
      {
        "letter": "A",
        "text": "Compilation error"
      },
      {
        "letter": "B",
        "text": "InputMismatchException at runtime"
      },
      {
        "letter": "C",
        "text": "It returns 0"
      },
      {
        "letter": "D",
        "text": "It blocks forever"
      }
    ],
    "correct": "B",
    "explanation": "nextInt() throws InputMismatchException if the token isn't parseable as int."
  },
  {
    "title": "User Input - Q0984",
    "text": "[User Input] Is it necessary to close a Scanner wrapping System.in?",
    "code": "Scanner sc = new Scanner(System.in); sc.close();",
    "options": [
      {
        "letter": "A",
        "text": "Not recommended to close System.in scanner if you need input later"
      },
      {
        "letter": "B",
        "text": "Always required"
      },
      {
        "letter": "C",
        "text": "Never allowed"
      },
      {
        "letter": "D",
        "text": "Closing scanner flushes input"
      }
    ],
    "correct": "A",
    "explanation": "Closing Scanner closes the underlying stream (System.in), which may not be desired."
  },
  {
    "title": "User Input - Q0985",
    "text": "[User Input] Which class is commonly used to read console input in Java?",
    "code": "import java.util.Scanner;\nScanner sc = new Scanner(System.in);\nint n = sc.nextInt();",
    "options": [
      {
        "letter": "A",
        "text": "Console"
      },
      {
        "letter": "B",
        "text": "Scanner"
      },
      {
        "letter": "C",
        "text": "DataInputStream"
      },
      {
        "letter": "D",
        "text": "BufferedReader"
      }
    ],
    "correct": "B",
    "explanation": "Scanner is commonly used for simple console input (java.util.Scanner)."
  },
  {
    "title": "User Input - Q0986",
    "text": "[User Input] How are command-line arguments accessed in Java?",
    "code": "public static void main(String[] args) { System.out.println(args.length); }",
    "options": [
      {
        "letter": "A",
        "text": "They are not accessible"
      },
      {
        "letter": "B",
        "text": "System.console() only"
      },
      {
        "letter": "C",
        "text": "Using Scanner by default"
      },
      {
        "letter": "D",
        "text": "Through the String[] args parameter of main"
      }
    ],
    "correct": "D",
    "explanation": "main receives command-line arguments via String[] args."
  },
  {
    "title": "User Input - Q0987",
    "text": "[User Input] Which Scanner method reads an entire line including spaces?",
    "code": "Scanner sc = new Scanner(System.in); String s = sc.nextLine();",
    "options": [
      {
        "letter": "A",
        "text": "next()"
      },
      {
        "letter": "B",
        "text": "readLine()"
      },
      {
        "letter": "C",
        "text": "nextInt()"
      },
      {
        "letter": "D",
        "text": "nextLine()"
      }
    ],
    "correct": "D",
    "explanation": "nextLine() reads until end-of-line, including spaces."
  },
  {
    "title": "User Input - Q0988",
    "text": "[User Input] What happens if user inputs a non-integer when calling nextInt()?",
    "code": "Scanner sc = new Scanner(System.in); int x = sc.nextInt();",
    "options": [
      {
        "letter": "A",
        "text": "InputMismatchException at runtime"
      },
      {
        "letter": "B",
        "text": "It blocks forever"
      },
      {
        "letter": "C",
        "text": "It returns 0"
      },
      {
        "letter": "D",
        "text": "Compilation error"
      }
    ],
    "correct": "A",
    "explanation": "nextInt() throws InputMismatchException if the token isn't parseable as int."
  },
  {
    "title": "User Input - Q0989",
    "text": "[User Input] Is it necessary to close a Scanner wrapping System.in?",
    "code": "Scanner sc = new Scanner(System.in); sc.close();",
    "options": [
      {
        "letter": "A",
        "text": "Not recommended to close System.in scanner if you need input later"
      },
      {
        "letter": "B",
        "text": "Closing scanner flushes input"
      },
      {
        "letter": "C",
        "text": "Never allowed"
      },
      {
        "letter": "D",
        "text": "Always required"
      }
    ],
    "correct": "A",
    "explanation": "Closing Scanner closes the underlying stream (System.in), which may not be desired."
  },
  {
    "title": "User Input - Q0990",
    "text": "[User Input] Which class is commonly used to read console input in Java?",
    "code": "import java.util.Scanner;\nScanner sc = new Scanner(System.in);\nint n = sc.nextInt();",
    "options": [
      {
        "letter": "A",
        "text": "BufferedReader"
      },
      {
        "letter": "B",
        "text": "DataInputStream"
      },
      {
        "letter": "C",
        "text": "Scanner"
      },
      {
        "letter": "D",
        "text": "Console"
      }
    ],
    "correct": "C",
    "explanation": "Scanner is commonly used for simple console input (java.util.Scanner)."
  },
  {
    "title": "User Input - Q0991",
    "text": "[User Input] How are command-line arguments accessed in Java?",
    "code": "public static void main(String[] args) { System.out.println(args.length); }",
    "options": [
      {
        "letter": "A",
        "text": "Through the String[] args parameter of main"
      },
      {
        "letter": "B",
        "text": "System.console() only"
      },
      {
        "letter": "C",
        "text": "They are not accessible"
      },
      {
        "letter": "D",
        "text": "Using Scanner by default"
      }
    ],
    "correct": "A",
    "explanation": "main receives command-line arguments via String[] args."
  },
  {
    "title": "User Input - Q0992",
    "text": "[User Input] Which Scanner method reads an entire line including spaces?",
    "code": "Scanner sc = new Scanner(System.in); String s = sc.nextLine();",
    "options": [
      {
        "letter": "A",
        "text": "nextLine()"
      },
      {
        "letter": "B",
        "text": "readLine()"
      },
      {
        "letter": "C",
        "text": "next()"
      },
      {
        "letter": "D",
        "text": "nextInt()"
      }
    ],
    "correct": "A",
    "explanation": "nextLine() reads until end-of-line, including spaces."
  },
  {
    "title": "User Input - Q0993",
    "text": "[User Input] What happens if user inputs a non-integer when calling nextInt()?",
    "code": "Scanner sc = new Scanner(System.in); int x = sc.nextInt();",
    "options": [
      {
        "letter": "A",
        "text": "InputMismatchException at runtime"
      },
      {
        "letter": "B",
        "text": "Compilation error"
      },
      {
        "letter": "C",
        "text": "It returns 0"
      },
      {
        "letter": "D",
        "text": "It blocks forever"
      }
    ],
    "correct": "A",
    "explanation": "nextInt() throws InputMismatchException if the token isn't parseable as int."
  },
  {
    "title": "User Input - Q0994",
    "text": "[User Input] Is it necessary to close a Scanner wrapping System.in?",
    "code": "Scanner sc = new Scanner(System.in); sc.close();",
    "options": [
      {
        "letter": "A",
        "text": "Closing scanner flushes input"
      },
      {
        "letter": "B",
        "text": "Not recommended to close System.in scanner if you need input later"
      },
      {
        "letter": "C",
        "text": "Never allowed"
      },
      {
        "letter": "D",
        "text": "Always required"
      }
    ],
    "correct": "B",
    "explanation": "Closing Scanner closes the underlying stream (System.in), which may not be desired."
  },
  {
    "title": "User Input - Q0995",
    "text": "[User Input] Which class is commonly used to read console input in Java?",
    "code": "import java.util.Scanner;\nScanner sc = new Scanner(System.in);\nint n = sc.nextInt();",
    "options": [
      {
        "letter": "A",
        "text": "BufferedReader"
      },
      {
        "letter": "B",
        "text": "Console"
      },
      {
        "letter": "C",
        "text": "Scanner"
      },
      {
        "letter": "D",
        "text": "DataInputStream"
      }
    ],
    "correct": "C",
    "explanation": "Scanner is commonly used for simple console input (java.util.Scanner)."
  },
  {
    "title": "User Input - Q0996",
    "text": "[User Input] How are command-line arguments accessed in Java?",
    "code": "public static void main(String[] args) { System.out.println(args.length); }",
    "options": [
      {
        "letter": "A",
        "text": "They are not accessible"
      },
      {
        "letter": "B",
        "text": "Using Scanner by default"
      },
      {
        "letter": "C",
        "text": "Through the String[] args parameter of main"
      },
      {
        "letter": "D",
        "text": "System.console() only"
      }
    ],
    "correct": "C",
    "explanation": "main receives command-line arguments via String[] args."
  },
  {
    "title": "User Input - Q0997",
    "text": "[User Input] Which Scanner method reads an entire line including spaces?",
    "code": "Scanner sc = new Scanner(System.in); String s = sc.nextLine();",
    "options": [
      {
        "letter": "A",
        "text": "nextLine()"
      },
      {
        "letter": "B",
        "text": "readLine()"
      },
      {
        "letter": "C",
        "text": "next()"
      },
      {
        "letter": "D",
        "text": "nextInt()"
      }
    ],
    "correct": "A",
    "explanation": "nextLine() reads until end-of-line, including spaces."
  },
  {
    "title": "User Input - Q0998",
    "text": "[User Input] What happens if user inputs a non-integer when calling nextInt()?",
    "code": "Scanner sc = new Scanner(System.in); int x = sc.nextInt();",
    "options": [
      {
        "letter": "A",
        "text": "It blocks forever"
      },
      {
        "letter": "B",
        "text": "Compilation error"
      },
      {
        "letter": "C",
        "text": "InputMismatchException at runtime"
      },
      {
        "letter": "D",
        "text": "It returns 0"
      }
    ],
    "correct": "C",
    "explanation": "nextInt() throws InputMismatchException if the token isn't parseable as int."
  },
  {
    "title": "User Input - Q0999",
    "text": "[User Input] Is it necessary to close a Scanner wrapping System.in?",
    "code": "Scanner sc = new Scanner(System.in); sc.close();",
    "options": [
      {
        "letter": "A",
        "text": "Closing scanner flushes input"
      },
      {
        "letter": "B",
        "text": "Always required"
      },
      {
        "letter": "C",
        "text": "Never allowed"
      },
      {
        "letter": "D",
        "text": "Not recommended to close System.in scanner if you need input later"
      }
    ],
    "correct": "D",
    "explanation": "Closing Scanner closes the underlying stream (System.in), which may not be desired."
  },
  {
    "title": "User Input - Q1000",
    "text": "[User Input] Which class is commonly used to read console input in Java?",
    "code": "import java.util.Scanner;\nScanner sc = new Scanner(System.in);\nint n = sc.nextInt();",
    "options": [
      {
        "letter": "A",
        "text": "Console"
      },
      {
        "letter": "B",
        "text": "DataInputStream"
      },
      {
        "letter": "C",
        "text": "Scanner"
      },
      {
        "letter": "D",
        "text": "BufferedReader"
      }
    ],
    "correct": "C",
    "explanation": "Scanner is commonly used for simple console input (java.util.Scanner)."
  }
]
